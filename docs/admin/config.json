{"posts":{"20120615":{"title":"Coffee-scriptでBlogツールもどき","timestamp":"2012-06-15T23:56:06+09:00","body":"せっかくなので練習がてら何かしようと言うことで作ってみました。\n\n    タイトル\n    以下、本文。\n\nという感じのMarkdown形式のテキストを保存するとHTMLに変換し、jadeテンプレートを当てて公開フォルダに保存するというだけの簡単なツールです。\n\n.mdファイルの保存先をDropboxにしてるのでローカルやiPhoneからテキストを保存するだけで勝手に同期されて定期的に変換するように処理しています。","key":"20120615"},"20120618":{"title":"記事の追加","timestamp":"2012-06-18T19:40:22+09:00","body":"タイムスタンプを追加したのでソートされてると良いなと.","key":"20120618"},"20120630":{"title":"テスト","timestamp":"2012-06-30T19:14:48+09:00","body":"VPSが再起動したぽいので投稿テスト。","key":"20120630"},"20120701":{"title":"Facebookコメントも試す","timestamp":"2012-07-04T01:40:49+09:00","body":"というわけでコメントツールシリーズ第3弾。\n\n最近身の回りでやたらとFacebookが流行り始めたので実はこれでいいんじゃないかという説もあります。\n\n<!-- more -->\n使い方は簡単。\n\n[facebook DEVELOPERSサイト](https://developers.facebook.com/docs/reference/plugins/comments/)へアクセスして必要な項目を設定、Get Codeボタンを押して埋め込み用のコードを取得します。\n\n取得したコードをサイトのテンプレートに埋め込んでやれば使えるようになります。\n\nあ、BlogとかだとURLはちゃんと記事のURLを自動で埋めるようにしないと多分おかしげな事になると思います。\n\nというわけで、試しに貼り付けたのがこちら。\n\nさすがにzenbackと一緒に貼るとめちゃくちゃ重いですね。\n\n<div id=\"fb-root\"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/ja_JP/all.js#xfbml=1\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));</script>\n\n<div class=\"fb-comments\" data-href=\"http://www.sevenspirals.net/20120701.html\" data-num-posts=\"3\"></div>\n\n#### 追記\n何故か幅が100%にならなかったのでCSSで無理矢理100%にしてみた。","key":"20120701"},"20120702":{"title":"ごっそり構造変えた","timestamp":"2012-07-02T21:23:52+09:00","body":"本体のスクリプト処理を変えてみました。\n\n本体の仕事は処理すべきファイルの一覧と設定の読み込みだけであとはプラグインにどんどん投げていって最終的にHTMLを吐き出すという形に変更。\n\n記事を作るのもテンプレートに当てるのもアーカイブするのもぜーんぶプラグインの仕事。・・・あれ、これ何のツールだっけ?＜待て\n\n何となく最終的に（好きだからとかそんな理由で）Blosxomみたいな形になりそうな気がしますが今のところ比較にならないくらいこっちのがダサいので順次直していきます。\n\n続きを読むプラグインとアーカイブプラグインを作ったので次はカテゴリとコメント欄をプラグイン化するかなー。\n\nあとCoffeepressという名前はあまりにもアレなのでちゃんとした名前を考えたい。","key":"20120702"},"20120630_3":{"title":"30分後にzenbackを入れてみた","timestamp":"2012-06-30T22:15:34+09:00","body":"色々入れ替えて検討中。\n\nソーシャルボタンをわざわざ自分で置かなくて良いからこっちのが楽かも。\n\nただ機能が多い分ちょっと重い？","key":"20120630_3"},"20121019_1":{"title":"XLSX.jsをnode.jsから使えるようにした","category":"programming","timestamp":"2012-10-19T09:35:48+09:00","body":"javascriptから.xlsxファイルを読み書きできるXLSX.jsをnode.jsから簡単に使えるようにWrapp(?)してみました。\n\n\n<!-- more -->\n\n\nXLSX.jsについては以下を参照。\n\n[JavaScriptでXLSX形式を扱う「XLSX.js」 - MOONGIFT](http://www.moongift.jp/2012/10/20121017-3/)\n\n導入は、node.jsとnpmが入っている前提で以下のコマンド。\n\n    npm install https://github.com/syaku/node-xlsx/tarball/master\n\n使い方は元のXLSX.jsと同じで例えば以下のようにするとA1:100, B1:200と記入されたoutput.xlsxが生成されます。\n\nここまでnode.jsと言っときながらまさかのCoffeeScriptです。\n\n    xlsx = require 'node-xlsx'\n    fs = require \"fs\"\n\n    file =\n      worksheets: [[]]\n      creator: 'syaku'\n      activeWorksheet: 0\n\n    w = file.worksheets[0]\n    r = w.push([]) - 1\n    w[r].push 100\n    w[r].push 200\n\n    bin = new Buffer(xlsx(file).base64, \"base64\")\n    fs.writeFileSync(\"output.xlsx\", bin)\n\n罫線や細かい属性は指定できないようですがnode.jsで作成したWEBアプリ等でお手軽にExcelに出力したいという用途には十分使えるのではないでしょうか。\n\n今回作ったソースのリポジトリは以下にアップロードしてあります。\n\n[https://github.com/syaku/node-xlsx/](https://github.com/syaku/node-xlsx/)\n\nというわけで、読み込みについては次の記事で。","key":"20121019_1"},"20120630_2":{"title":"DISQUSを追加してみた","timestamp":"2012-07-04T14:41:20+09:00","body":"コメントシステムにDISQUSを追加してみた。\nzenbackやfacebookコメントとかとも比較してみてどれを使うか決める。\n\nところで記事によっては文字化けするけど何でやろ。\n\n<!-- more -->\n\n<div id=\"disqus_thread\"></div>\n  <script type=\"text/javascript\">\n    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */\n    var disqus_shortname = 'sevenspiralsblog'; // required: replace example with your forum shortname\n\n    /* * * DON'T EDIT BELOW THIS LINE * * */\n    (function() {\n      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n      dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n    })();\n  </script>\n  <noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n  <a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>","key":"20120630_2"},"20121031_1":{"title":"SparkleShareをさくらVPS上のGitoliteで利用する","category":"tools","timestamp":"2012-10-31T23:52:59+09:00","thumbnail":"https://lh3.googleusercontent.com/-2v5ozfDRdnU/UJ4v5n49YoI/AAAAAAAAA8M/_cxaKYy1pYM/s800-Ic42/Sparkleshare-gnome.png","body":"新プランに移行してから大幅にストレージの容量が増えましたが特に使い道も無く盛大に余っていたのでどうにかしてこれを有効利用出来ないか、というわけで導入済みのGitoliteを使ってSparkleShareをインストールしてみました。\n\nまだ使い始めなのでどのくらい安定しているかは分かりませんが、Gitリポジトリなので履歴が見れますしDropboxのように冗長化はされませんが、ローカルリポジトリに分散することを考えるとまあ、普通の用途なら問題無いかなと。\n\n何より大容量で安価に使えるのが良いです。\n\n<!-- more -->\n\n# SparkleShareって?\n\nGitリポジトリを経由してファイルを共有するDropboxみたいなツールです。\n\nリポジトリフォルダを監視してファイルの追加、削除、編集が行われると片っ端からコミット・プッシュします。\n\nsshで接続できるGitリポジトリなら何でも使えるのでGitHub上のリポジトリを使って共有することも出来ますが、さすがにフルオープンはあれなのでさくらVPS上に構築したGitolite環境にリポジトリを作って使います。\n\n# SparkleShareクライアントのインストール\n\n![](/img/attached/sparkleshare1.png)\n\nインストーラからクライアントソフトをインストールします。ここでは特に分岐はありませんがインストール後に名前とメールアドレスを入力します。\n\n（多分）お一人様だと余り関係ありませんがリポジトリを共有した際に誰が編集したか識別するためと、Gravatarからアバターの取得を行っているようです。\n\nここまで終わると公開キーが生成されます。これは後で使いますので控えておいて下さい。\n\n# Gitリポジトリの用意\n\nGitoliteのインストールから書くと結構複雑で大変なのでそれは導入済みということで進めます。\n\ngitolite-adminの設定を編集してSparkleShare用のリポジトリを作成し、先ほど生成されたキーをkeydirに追加し、SparkleShareからアクセス出来るようにして下さい。\n\n# SparkleShare側の設定\n\n![](/img/attached/sparkleshare2.png)\n\nリポジトリを用意したらSparkleShareに登録します。\n\nタスクトレイアイコンのメニューから、*Add hosted project...*を選択すると上のようなダイアログが開きます。\n\n自前のリポジトリを使う場合は一番上の*On my own server*を選択し、*Address*と*Remote Path*を入力します。\n\n*Address*はGitoliteのアカウントがgitだとすると、*git@example.com*、*Remote Path*には先ほど作成したリポジトリ名を入力し、Addボタンで追加します。\n\n上手くいくとユーザープロファイル直下のSparkleShareフォルダ内にリポジトリがクローンされますので適当なファイルを書き込んで自動的にプッシュされれば成功です。\n\n公式サイト: <a href='http://sparkleshare.org/'>sparkleshare.org</a>","key":"20121031_1"},"20121027_1":{"title":"Hearthfireはじめました","category":"skyrim","timestamp":"2012-10-27T20:06:08+09:00","thumbnail":"https://lh3.googleusercontent.com/-0FAmLJRKDME/UJ4v5mSZmcI/AAAAAAAAA8E/OywZvxCXc3A/s800-Ic42/enb2012_10_27_9_50_11.jpg","body":"というわけで日本語版も配信されたのでDawnguard共々購入しました。\n\nメインクエストはクリアしていますが、せっかくなのでmodも色々詰め替えて新規にプレイしようと思います。\n\n<!-- more -->\n\nちなみに現在のmodの構成はこんな感じです。\n\n* Dawnguard\n* Hearthfire\n* <a href='http://skyrim.2game.info/detail.php?id=19'>Unofficial Skyrim Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=23491'>Unofficial Dawnguard Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=25127'>Unofficial Hearthfire Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=3863'>SkyUI\n* <a href='http://skyrim.2game.info/detail.php?id=16178'>1080 Smaller ipHUD</a>\n* <a href='http://skyrim.2game.info/detail.php?id=3222'>Immersive HUD - iHUD</a>\n* <a href='http://skyrim.2game.info/detail.php?id=1177'>Xbox360 Controller KeyRemap</a>\n* <a href='http://skyrim.2game.info/detail.php?id=25501'>Warburgs Detailed Paper World Map</a>\n* <a href='http://skyrim.2game.info/detail.php?id=20228'>Materialbox - auto storage</a>\n* <a href='http://skyrim.2game.info/detail.php?id=60'>Enhanced Blood Textures</a>\n* <a href='http://skyrim.2game.info/detail.php?id=9557'>Alternate Start - Live Another Life</a>\n* <a href='http://skyrim.2game.info/detail.php?id=10168'>ApachiiSkyHair</a>\n* <a href='http://skyrim.2game.info/detail.php?id=6953'>BFG - Better FaceGen (Male Facegen Type1)</a>\n* <a href='http://skyrim.2game.info/detail.php?id=4141'>High Res Face Maps for Men by Geonox</a>\n* <a href='http://skyrim.2game.info/detail.php?id=12951'>Enhanced Character Edit</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7127'>RANs HeadMesh Variants (TypeB)</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7897'>envision Face</a>\n* <a href='http://skyrim.2game.info/detail.php?id=6709'>UNP+TBBP</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19666'>Fair Skin Complexion Sweaty Body-ADEC-CBBE-UNP-UNPB</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7305'>UNP Female Armors</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19772'>Remodeled Armors - UNP version - Originally by Mak07 for CBBEv3M</a>\n* <a href='http://skyrim.2game.info/detail.php?id=1002'>JaySus Swords</a>\n* <a href='http://skyrim.2game.info/detail.php?id=14443'>Decent Women - improve female npcs face</a>\n* <a href='http://skyrim.2game.info/detail.php?id=20460'>Dark Brotherhood Babette Replacer -Dawnguard Supported-</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19169'>EDialog</a>\n* <a href='http://skyrim.2game.info/detail.php?id=8879'>Paarthurnax Choices plus3</a>\n* <a href='http://skyrim.2game.info/detail.php?id=15972'>Radiance</a>\n\nENBはRequested ENBをVer0.113のdllで使用。\n\nテクスチャ、体型は割と気分で変えてます。\n\n<img src='/img/attached/enb2012_10_27_9_51_11.jpg'>\n\nAlternate Startを入れてるのでまずは出自を選択します。適当にマーラ様にお任せしたら怒られました。\n\nともあれ、出自を決めたらベッドでお休みなさい・・・。\n\n<br />\n<br />\n\n/*/\n\n<br />\n<br />\n\n**「は！？」**\n\n<img src='/img/attached/enb2012_10_27_9_52_28.jpg'>\n\nまさかのシンデリオンの研究室からスタート。\n\n<img src='/img/attached/enb2012_10_27_9_55_25.jpg'>\n\nクエストログにドワーフ・スフィアがまだ居るかも知れないとか書いてるけどまあ、なんとかなるかと気にせず部屋から出たら瞬殺されました。普通に開始した方が楽だったかもしんない・・・。\n\n<img src='/img/attached/enb2012_10_27_10_0_26.jpg'>\n\n気を取り直して（金目の物を一通り拾ってから）なんとか脱出。シンデリオンの研究室からはアルフタンドの大リフトが目の前だったり意外とウィンドヘルムに近かったりとその辺は一応気を遣ってくれてる模様。\n\n晴れて自由の身（**ローブ一丁でスカイリムに放り出された**とも言う）になったドヴァキンの明日はどっちだ。（ていうか結局Hearthfireはじまってないし・・・。）","key":"20121027_1"},"20121102_1":{"title":"node.jsからTracを操作する(ための下準備)","category":"programming","timestamp":"2012-11-02T12:01:00+09:00","thumbnail":"http://www.lucnix.be/d/121732-2/Bouteilles+de+couleurs.jpg","body":"しばらく前の話になりますが、Trac Lightningのバージョン3あたりからTraMが同梱されなくなりました。\n\n個人で使う分には別に問題無いんですが、会社で使う場合だと大抵複数のプロジェクトが同時に走っており、それに応じて1人が関わっているプロジェクトも複数あるという場合が珍しくありません。\n\nで、各プロジェクトが完全に独立していれば良いんですがまあ、そんなわけもなくプロジェクトを横断してチケットを集計したレポートが欲しいという話が出てきます。\n\n<!-- more -->\n\nそういうときにTracのプラグインを作ってもいいんですが、出来れば慣れた（というかマイブームの）CoffeeScriptで書きたい。\n\n特にチケットの集計だけで良いならTrac Lightningには最初からXMLRPCプラグインが入っているのでそいつ経由でデータを抽出することが出来ます。\n\nそこで、node.jsでXMLRPCが扱えるライブラリはないかと探したところ、*node-xmlrpc*というそのものずばりな物があったので使ってみたのですがBASIC認証には対応している物のDigest認証に対応していませんでした。\n\nTrac Lightningは普通に入れるとDigest認証なのでこのままでは接続できません。\n\nで、(探せば見つかりそうな気もするけど)ない物は作れというわけでnode-xmlrpcをDigest認証に対応させました。\n\nかなりざっくりな上にTracとの接続しか試してませんが以下のようにすることでTracのXMLRPCメソッドが呼び出せます。\n\n    xmlrpc = require 'xmlrpc'\n    options =\n      host: \"example.com\"\n      port: 80\n      path: \"/trac/hogehoge/login/xmlrpc\"\n      digest_auth:\n        user: \"foo\"\n        pass: \"bar\"\n\n    client = xmlrpc.createClient(options)\n    client.methodCall 'ticket.get', [id], (err, ticket)->\n      console.log ticket\n\nこれでチケットの情報は一通り抜けるのであとはプロジェクト毎に定期的に取得してDBに格納するなりして集計を行います。\n\n今回改造を加えたソースは以下のリポジトリにアップしてあります。\n\n<a href='https://github.com/syaku/node-xmlrpc'>https://github.com/syaku/node-xmlrpc</a>","key":"20121102_1"},"20121030_1":{"title":"MOGOK上にRailsアプリを構築する(Windows編)","category":"programming","timestamp":"2012-10-31T12:47:11+09:00","thumbnail":"https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png","body":"IIJが提供するRuby PaaSのMOGOKがオープンβサービスを開始したので早速MOGOK上にアプリケーションを構築してみたいと思います。\n\n最初ということで基本的にはMOGOKのサイトのチュートリアルをなぞる形で進めていきます。\n\nで、何を作るかですが、こういうのはコンソールアプリはHello World、WEBサービスはToDoリストを作るのが伝統らしい(嘘)のでその伝統に従って今回はToDoリストを作ってみたいと思います。\n\n<!-- more -->\n\n#### SDKインストール\n\nまず何はなくとも開発環境をインストールしないといけないんですが、Windowsに関して言えばインストーラを実行するだけでRubyからRailsからMySQLからコマンドラインツールまで全部入ります。簡単ですね。\n\nSDKのインストールが完了すると、スタートメニューに\"MOGOK Windows Client Packages\"というのが追加されているのでその中の\"msys.bat\"を実行するとツール等にパスが通った状態のコンソールが立ち上がります。作業は基本的にこのコンソール上で行います。\n\n#### Railsアプリのひな形を作る\n\nコンソールを立ち上げるといきなり/binフォルダだったりするんでまずは適当な場所に作業用のフォルダを作成します。\n\n日本語ユーザー名でもちゃんと動くかは試してませんがわかりやすいところと言うことで今回はDocumentsフォルダの配下にrails_appsフォルダを作成してその中で作業することにします。\n\n    $ mkdir rails_apps\n    $ cd rails_apps\n\n作業フォルダに入ったらまずRailsアプリケーションのひな形を作ります。アプリケーション名は今回はmogok-todoとします。\n\n    $ rails new mogok-todo -d mysql\n    ～大量の出力～\n    is installed.\n\nコンソールにどばーっと出力されますが、特にエラーっぽい表示がなければひな形の作成は成功です。＜おおざっぱ\nひな形を作成したら次はGemfileを編集します。18行目辺りの、\n\n    # gem 'therubyracer', :platforms => :ruby\n\n上記のコメントアウトを外します。\n\nMOGOKサイトのチュートリアルではさらっと流していますが**therubyracer**はV8のJavaScriptインタプリタをrubyの中に突っ込んじまおうというライブラリらしいです。\n\nMOGOKで使われているRailsは3.2.8なので3.1から採用されたcoffee-scriptとかの為かなーと思いますがすいません、Rails自体久々に触ったのでまだよく分かってません。（爆）\n\n*:platforms => :ruby*はC Rubyの場合のみインストールという指定ですね。JRubyとかではちゃんと動かないらしい。\n\nGemfileを書き換えたらインストールをしないといけないので以下のコマンドでインストールします。が、その前にMySQLのサービスを起動します。私の環境ではSDKインストール直後ではサービスは起動していませんでした。\n\nただし、これまた私の環境ではサービスが動いていても*#&lt;Mysql2::Error: Can't connect to MySQL server on 'localhost' (10061)&gt;*というエラーが出たので**database.yml**のhost指定を*localhost*から*127.0.0.1*へ書き換えました。\n\n無事MySQLが動いていれば以下のコマンドを実行。\n\n    $ cd mogok-todo\n    $ bundle install\n    $ rake db:create:all\n\nここでエラーが出なければひな形の作成は終了です。\n\n#### アプリケーションを作り込む\n\nここからはRailsアプリを作り込んでいきますが、あんまり複雑なのを作っても仕方ないので単純にタイトルと終了フラグを持つだけのモデルを作成します。\n\nまずは*rails generate*コマンドでモデル、コントロール、ビューのひな形を作成します。\n\n    $ rails generate scaffold task titie:string done:boolean\n    $ rake db.migrate\n\n基本的なCRUDの処理はこれで出来てしまう&amp;余りにも公式チュートリアルそのままだとまずいので<a href='http://twitter.github.com/bootstrap/'>Twitter Bootstrap</a>を使ってViewをもう少しかっこよくしましょう。\n\n公式サイトから*bootstrap.zip*をダウンロードしてきてその中の*cssフォルダ*と*imgフォルダ*をpublicフォルダにコピーします。\n\nそして、BootstrapのCSSを使うために*app/views/layouts/application.html.erb*を以下のように書き換えます。\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>ToDoリスト</title>\n        <%= stylesheet_link_tag    \"/css/bootstrap.min.css\" %>\n        <%= stylesheet_link_tag    \"application\", :media => \"all\" %>\n        <%= javascript_include_tag \"application\" %>\n        <%= csrf_meta_tags %>\n      </head>\n      <body>\n        <div class='container'>\n          <%= yield %>\n        </div>\n      </body>\n    </html>\n\nただ、標準でsass-railsが入ってるので実際にはsass-rails-bootstrapとか使った方がカスタマイズもやりやすいと思います。\n\nあとはBootstrapの書式に従ってビューを順次書き換えや細かな機能を実装していきます。\n\nそうしてできあがったのが<a href='http://mogok-todo-007.ruby.iijgio.com/tasks'>こちら</a>になります。\n\n完了は削除というワイルド仕様です。\n\nいくらRailsアプリの作成自体は本題じゃないと言ってももうちょっと真面目に作れと自分でも思います。はい。\n\n最後にproduction環境でstaticなファイルを扱うために*config/environments/production.rb*の以下の値を*false*から*true*に書き換えます。\n\n    config.server_static_assets = true\n\n#### Gitリポジトリの作成\n\nMOGOKにデプロイするためにGitリポジトリを作成します。\n\nこの段階ではまだローカルリポジトリの操作なので普通にgitコマンドでリポジトリを作成します。\n\n    $ git init\n    $ git add .\n    $ git commit -m \"first commit\"\n\n特にここでエラーが出ることはないと思いますが以下のコマンドでリポジトリのステータスを確認します。\n\n    $ git status\n\n正常なら下記のような表示がコンソールに出力されます。\n\n    # On branch master\n    nothing to commit (working directory clean)\n\n#### MOGOKにデプロイする\n\nいよいよクラウドにデプロイします。\n\nコンソール上でMOGOKの操作を行うには<code>mogok</code>コマンドを使用します。\n\nとりあえずおもむろに<code>$ mogok -v</code>でバージョン確認。\n\n現時点では1.0.0となっているはずです。\n\n<code>$ mogok list</code>でアプリケーションの一覧が取得できます。まだ何も登録していなければ何も表示されません。\n\n初回実行時はログインIDとパスワードを聞かれるはずなのでユーザー登録の際に登録したIDとパスワードを入力して下さい。\n\nで、本番。下記のコマンドでMOGOKクラウド上にアプリケーションを登録します。\n\n    $ mogok create mogok-todo-XXXX\n\nアプリケーション名は全体でユニークな必要があるのでXXXXの部分を適当な文字列にするなり全く違う名前を付けるなりして下さい。\n\n成功するとGitのリモートリポジトリが登録されるので、<code>$ git remote -v</code>でちゃんと登録されているか確認して下さい。上手くいっているようであれば<code>$ git push mogok master</code>でリモートリポジトリにプッシュ。\n\n#### ビルドして実行する\n\nプッシュが成功したら、<code>$ mogok build</code>でビルドして実行します。\n\n\n割と時間がかかりますが、ビルドが終わったら普通のRailsアプリと同じようにdb:migrateを行います。\n\nコマンドは以下のようにmogokコマンドから呼び出します。\n\n    $ mogok rake db:migrate\n\nmigrateも正常に終わったら<code>$ mogok start</code>でアプリケーションを開始します。\n\n正常に起動したら、<code>$ mogok info</code>を実行して表示されるURLにアクセスして動作を確認します。\n\n#### 使ってみての感想\n\n開発環境の構築やデプロイが一発で出来るのはさすがに楽です。\n\n作ってる途中のはまりどころは、単純に私がRailsに慣れてないからですがrails newの際に-d mysqlを付け忘れてはまったり、config.server_static_assetsを書き換え忘れてはまったりしました。\n\n個人的にはマイブームはCoffeeScriptなのでHerokuのある状況でRailsしかないのはどうなのとか少しは思いますが、日本語の情報やサポートもありますし、正式版の価格次第ですがRails使うつもりなら選択肢としては良いんじゃないかと思います。","key":"20121030_1"},"aws_javascript_sdk":{"title":"AWS SDK for JavaScriptでS3でファイル操作","category":"programming","timestamp":"2013-12-01T15:15:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"ブラウザ単体でAmazon AWSのS3やDynamoDBやSQSなんかを操作できるAWS SDK for Javascriptが公開されたので使ってみました。\n\n<!-- more -->\n\n# 基本はNode.js用SDKと同じ\n扱い方は基本的にNode.js用のSDKと同じで対応していないサービスはクラスが実装されていないので扱えないという感じです。\n\nなのでどっちか覚えてればサーバーサイドの実装もブラウザ側での実装も両方割と簡単に対応出来ます。\n\n# 誰でも読み書きできるコメント欄的な物を作ってみる\n\n本当はGoogle+やFacebook認証を使ったりするんでしょうが今回は認証のないコメント欄的なものをS3を使って作りたいと思います。\n\n## IAMコンソールでユーザーを作成する\n\nまず、IAMコンソールでアプリに使うユーザーを作成します。\n\nここで作成したユーザーの<code>ARN</code>と<code>Access Key ID</code>と<code>Secret Access Key</code>は後でアプリから使うのでコピーしておきます。\n\n![](https://lh5.googleusercontent.com/-dz4YJ6Z1ZVM/UpJIKQw517I/AAAAAAAABu8/zwUUBGJQYok/s640/capture1.png)\n\nユーザーを作成したらS3のバケットを操作できるようにパーミッションを設定します。\n\n設定内容は以下のような感じ。<code>BUCKET_NAME</code>はアプリで使用するバケット名を記述します。\n\nここでは指定バケットに対してS3の全てのアクションを許可しています。\n\nここで例えばReadだけ不許可にすることで外部からファイルを受け取るためのアップローダーを作るということも出来そうです。\n\n    {\n      \"Version\": \"2013-11-24\",\n      \"Statement\": [\n        {\n          \"Action\": [\n            \"s3:*\"\n          ],\n          \"Resource\": [\n            \"arn:aws:s3:::BUCKET_NAME\"\n          ],\n          \"Effect\": \"Allow\"\n        }\n      ]\n    }\n\n## バケットを作成する\n\nS3のコンソールでバケットを作成します。\n\nここでもパーミッションを設定しますが基本的にユーザー作成時に指定した内容と同じです。\n\n先ほどコピーしておいた<code>ARN</code>をここで記述します。\n\n    {\n      \"Version\": \"2013-11-24\",\n      \"Statement\": [\n        {\n          \"Sid\": \"\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"AWS\": \"<IAMで作ったユーザーのARN>\"\n          },\n          \"Action\": \"s3:*\",\n          \"Resource\": \"arn:aws:s3:::BUCKET_NAME/*\"\n        }\n      ]\n    }\n\nパーミッションを設定したら次はCORS(Cross-Origin Resource Sharing)の設定をします。\n\n初期値ではGETしか許可されていないのでPUTも許可するようにします。\n\nまた、今回の場合、Access KeyとSecretをソースに埋め込むので<code>AllowedOrigin</code>を指定しないとどこからでも操作できて多分えらい目に遭います。\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n        <CORSRule>\n            <AllowedOrigin>http://www.exmaple.com/</AllowedOrigin>\n            <AllowedMethod>GET</AllowedMethod>\n            <AllowedMethod>PUT</AllowedMethod>\n            <MaxAgeSeconds>3000</MaxAgeSeconds>\n            <AllowedHeader>*</AllowedHeader>\n            <AllowedHeader>Authorization</AllowedHeader>\n        </CORSRule>\n    </CORSConfiguration>\n\n\n## サンプルコード\n\nとりあえず初期化処理です。\n先ほど作成したAccess KeyとSecretを設定し、S3クラスを初期化します。\n\n    var messageGet, messagePost, s3;\n\n    AWS.config.update({\n      accessKeyId: '***********************',\n      secretAccessKey: '**********************************'\n    });\n\n    s3 = new AWS.S3({\n      region: 'ap-northeast-1',\n      maxRetries: 15\n    });\n\nAWSへのリクエストは非同期で行われるので同期処理するためにJsDeferredも初期化。\n\n    Deferred.define();\n\nで、実際の初期化処理がこちら。\nバケット名とKey(ファイル名みたいなもの)とContentTypeとBody(ファイルの中身)を設定して<code>putObject</code>を呼び出します。\n\n呼び出し後は非同期で実行され、何らかの理由で失敗したらerrが成功したらresultが指定されてコールバックされます。\n\n    messagePost = function() {\n      var key, params;\n      key = new Date().getTime().toString();\n      params = {\n        Bucket: 'BUCKET_NAME'\n        Key: key,\n        ContentType: 'text/plain',\n        Body: $(\"#message\").val()\n      };\n      return s3.putObject(params, function(err, result) {\n        if (err) {\n          return console.log(err);\n        } else {\n          return console.log(data);\n        }\n      });\n    };\n\n読み込みも簡単です。\nバケット名とKeyを指定して<code>getObject</code>関数を呼び出します。\nコールバックは書き込みと同じで失敗すればerrが成功すればdataにファイルの情報がセットされ返ってきます。\n\nここではBodyの中身を文字列化してJsDeferredに渡しています。\n\n    messageGet = function(key) {\n      var deferred;\n      deferred = new Deferred();\n      s3.getObject({\n        Bucket: 'BUCKET_NAME',\n        Key: key\n      }, function(err, data) {\n        return deferred.call(data.Body.toString());\n      });\n      return deferred;\n    };\n\n起動時処理。\n<code>listObjects</code>関数でバケット内のファイルの一覧を取得し順番に<code>messageGet</code>関数を呼んでファイルの中身を取得してリストに詰めています。\n\n全部取り終わってからコンソールに吐き出すようにJsDeferredを使っています。(実際にはloopじゃなくてparallelのがいいと思う)\n\n    $(function() {\n      return s3.listObjects({\n        Bucket: 'BUCKET_NAME'\n      }, function(error, data) {\n        var result;\n        if (error) {\n          return console.log(error);\n        } else {\n          result = [];\n          return Deferred.loop(data.Contents.length, function(i) {\n            return messageGet(data.Contents[i].Key).next(function(data) {\n              return result.push(data);\n            });\n          }).next(function() {\n            // 実際には投稿日順で並び替えたりする\n            return console.log(result);\n          });\n        }\n      });\n    });\n\n## 感想のような物\n\nこのブログは静的HTMLを吐いてS3に配置していますがこんな感じのちょっとしたツールに簡単にDBやファイル保存の機能を付加できるのは大変夢が広がって面白いです。\n\nただ、出来る事がすごく増えるわけではないので別に既存のサーバーサイド処理を置き換えるものではなく、別の要件でサーバーを立てるならサーバーサイドでやった方が良いんじゃないかと思います。\n\n逆に全くの新造なら全部これを使ってサーバーを立てないというサービスもあっても良いんじゃ無いかとも思ったのでとりあえずこのブログを実験台に色々試してみたいと思います。(まずはzenbackに頼ってる機能の置き換えかな)","key":"aws_javascript_sdk"},"docker_install":{"title":"さくらVPS上のCentOSにDockerをインストールした","category":"tools","timestamp":"2014-08-14T00:14:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"Dockerというコンテナ型の仮想化ソフトがありまして、以前(確かまだポートが固定出来なかった頃)にVirtualBox上で試したんですが、色々バージョンアップを重ね1.0も(割と前に)出たので実際に使おうということで(本当はUbuntuが推奨環境のはずですが)さくらVPSのCentOS上にインストールしてみました。\n\n<!-- more -->\n\n# まずEPELのインストール\n\nDockerのパッケージはEPELリポジトリにあるのでまずEPELをインストールします。\n\n既にインストールしていることも多いと思いますので導入済みならスキップしても構いません。\n\n    $ wget http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm\n    $ sudo rpm -ivh epel-release-6-8.noarch.rpm\n\n特に問題無く成功すると思います。\n\n標準のリポジトリと追加リポジトリの優先順位を細かく設定したい場合は<code>yum-priorities</code>をインストールすることで優先順位の制御が出来ます。\n\n# docker-ioのインストール\n\n無事EPELのインストールが終わったら次はDocker本体のインストールを行います。\n\nパッケージ名はdocker-ioになるので、yumコマンドでインストールします。\n\n    $ sudo yum install docker-io\n\nまた、起動時に自動で立ち上がるように設定しておきます。\n\n    $ sudo service docker start\n    $ sudo chkconfig docker on\n\nインストールそのものはこれで完了です。\n\n# イメージの作成\n\n準備は整ったので仮想環境のイメージを作りたいと思います。\n\nとりあえず、CentOS上で動かしてるサービスを移設したいのでCentOSのイメージを作ります。\n\n既にCentOSのベースになるイメージは存在してるので<code>docker pull</code>コマンドでダウンロードします。\n\n    $ sudo docker pull centos:latest\n\nダウンロードが終わったら<code>docker images</code>コマンドで実際に作成されていることを確認します。\n\n    $ sudo docker images centos\n    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n    centos              latest              b157b77b1a65        2 weeks ago         243.7 MB\n\n上記のような感じになってたら成功です。\n\n\n# 実行\n\nイメージが作られたのでおもむろに実行。\n\nとりあえず今回はコンテナ名は特に指定せずに実行します。\n\n    $ sudo docker run -i -t centos /bin/bash\n\nするとこんなエラーが出てしまいました。\n\n<pre><samp>2014/08/10 14:38:36 Error: Cannot start container 6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a: write /cgroup/devices/docker/6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a/cgroup.procs: invalid argument</samp></pre>\n\n調べたところ、CentOS6の場合、Kernelのバージョンが2.6.32-431以上でないと動かない模様。\n\nというか普通に見落としてました。すいません。\n\nというわけで<code>sudo yum update</code>でまとめて更新。\n\n    $ sudo yum update\n\n更新が終わったら再び実行。仮想環境上のbashに入れれば成功です。\n\n初回なのでコンテナ作成も同時に行っていますがそれでも一瞬で起動します。\n\nここがDockerの良いところ。\n\nというわけで、入れ物は出来たので次からは今動いているサーバーをどんどんDocker上に移行していきます。","key":"docker_install"},"docker_install2":{"title":"CentOS6上のDockerにCentOS7を入れたらはまった","category":"tools","timestamp":"2014-08-16T22:45:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"前回、さくらVPS上のCentOS6にDockerをインストールしましたが、その際にコンテナイメージを<code>centos:latest</code>から作ったため、ホストはCentOS6、ゲスト(っていうのか?)はCentOS7という状態になってました。\n\nそのまま、その環境でhttpdやらを入れてたんですが、サービスが起動できずにドはまりしました。\n\n<!-- more -->\n\nRHEL7系からはサービスの起動がsystemdとsystemctlが採用されておりそのため起動方法が/etc/rc.d/init.d/配下の起動スクリプトじゃなくなってます。\n\nなので<code>systemctl</code>コマンドで有効化して起動しようとすると下記のようなエラーが出てしまいます。\n\n    bash-4.2# systemctl enable httpd.service\n    ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'\n    bash-4.2# systemctl start httpd.service\n    Failed to get D-Bus connection: No connection to service manager.\n\nGoogle先生で調べるが、よく分からない・・・。ホスト側がsystemdで管理されていないのがまずいぽい?\n\nまあ、そもそもホスト側がCentOS6なのがアカン気がするし、その後の移行作業でも問題が出そうな気がするので元にするイメージを<code>centos:centos6</code>と指定してコンテナ上もCentOS6になるようにして逃げました。","key":"docker_install2"},"20121027_2":{"title":"XLSX.jsでnode.jsからxlsxファイルを読む","category":"programming","timestamp":"2012-10-28T11:17:43+09:00","body":"というわけで前回の続きです。\n\n今回は既にあるxlsxファイルを読み込んでnode.jsから操作します。\n\n<!-- more -->\n\n内容としては前回の出力処理の逆をやれば良いだけです。\n\nここでは前回作成したxlsxファイルを\"input.xlsx\"として読み込んでみます。\n\nXLSX.js単体でxlsxファイルを読み込むときは、\n\n    new xlsx(&lt;base64文字列&gt;)\n\nとなるので、node.jsではfs.readFileで読み込んだBufferオブジェクトをtoString(\"base64\")で変換して渡してやります。\n\n    xlsx = require 'node-xlsx'\n\n    fs = require \"fs\"\n\n    buf = fs.readFileSync(\"input.xlsx\")\n\n    # base64にエンコードしてから読み込み\n    book = new xlsx(buf.toString(\"base64\"))\n\n    console.log JSON.stringify(book)\n\nこのサンプルを実行すると以下のような出力が得られます。\n\n    {\"worksheets\":[[[100,200]]],\"zipTime\":17,\"creator\":\"syaku\",\"lastModifiedBy\":\"XLSX.js\",\"created\":\"2012-10-27T14:05:56.857Z\",\"modified\":\"2012-10-27T14:05:56.857Z\",\"activeWorksheet\":0,\"processTime\":0}\n\nちゃんとJSONオブジェクトになっていますね。\n\nあとはこれを好きなように操作して画面に表示するもよし、ファイルに書き出したい時は前回の手順でファイルに出力します。","key":"20121027_2"},"elastic_search":{"title":"Node.jsとMongoDBとElasticsearchで日本語全文検索","category":"programming","timestamp":"2013-09-16T05:45:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"MongoDBのver2.4から全文検索が導入されたので使ってみようと思ったんですが、やっぱりというか日本語には対応していなかった・・・。\n\n何か悔しいのでElasticsearchでMongoDBのコレクションを日本語全文検索する環境を構築してみました。\n\n<!-- more -->\n\n# Elasticsearchのインストール\n\n何はともあれElasticsearchのインストールですが、Macならbrewで簡単にインストールできます。\n\nちなみにWindowsでも適当な場所にzipを展開するだけです。\n\n    $ brew install elasticsearch\n\nで、起動。今回は試しながらなので-fオプションを付けてフォアグラウンドで起動します。\n\n    $ elasticsearch -f\n\n特にエラーが出なければ実際にアクセスしてみます。\n\nelasticsearchはREST APIでやりとりするのでcurlコマンドでリクエストを投げます。\n\nまずはテスト用のIndexを作成します。\n\n    $ curl -XPUT 'http://localhost:9200/test'\n\n実行した結果、<code>{\"ok\":true,\"acknowledged\":true}</code>のようなレスポンスが返ってくれば成功です。\n\nついでに分析リクエストも投げてみますがこの時点では日本語は正しく分析できません。\n\n    $ curl -XGET 'http://localhost:9200/test/_analyze?pretty' -d '東京都渋谷区'\n    /*{\n      \"tokens\" : [ {\n        \"token\" : \"東\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 1,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 1\n      }, {\n        \"token\" : \"京\",\n        \"start_offset\" : 1,\n        \"end_offset\" : 2,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 2\n      }, {\n        \"token\" : \"都\",\n        \"start_offset\" : 2,\n        \"end_offset\" : 3,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 3\n      }, {\n        \"token\" : \"渋\",\n        \"start_offset\" : 3,\n        \"end_offset\" : 4,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 4\n      }, {\n        \"token\" : \"谷\",\n        \"start_offset\" : 4,\n        \"end_offset\" : 5,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 5\n      }, {\n        \"token\" : \"区\",\n        \"start_offset\" : 5,\n        \"end_offset\" : 6,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 6\n      } ]\n    }*/\n\n## プラグインの追加\n\nまずは日本語の全文検索ができるようにkuromojiの分析プラグインをインストールします。\n\nインストールはコマンド一発で簡単にできます。\n\n    $ plugin -install elasticsearch/elasticsearch-analysis-kuromoji/1.5.0\n\nで、今回はMongoDBのCollectionを全文検索したいのでそれ用のプラグインもインストールします。\n\nelasticsearch-river-mongodbプラグインのインストールは他と同じような書き方にするとURLが見つからずインストールできなかったので直接githubを指定しました。\n\n    $ plugin -install elasticsearch/elasticsearch-mapper-attachments/1.8.0\n    $ plugin -i com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/1.7.0\n\n特にエラーが出なければインストールは完了です。\n\n## kuromojiのテスト\n\nまずアナライザにkuromojiを指定して日本語の構文解析が出来るようになっているか確認します。\n\n    $ curl -XGET 'http://localhost:9200/test/_analyze?analyzer=kuromoji&pretty' -d '東京都渋谷区'\n    /*{\n      \"tokens\" : [ {\n        \"token\" : \"東京\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 2,\n        \"type\" : \"word\",\n        \"position\" : 1\n      }, {\n        \"token\" : \"都\",\n        \"start_offset\" : 2,\n        \"end_offset\" : 3,\n        \"type\" : \"word\",\n        \"position\" : 2\n      }, {\n        \"token\" : \"渋谷\",\n        \"start_offset\" : 3,\n        \"end_offset\" : 5,\n        \"type\" : \"word\",\n        \"position\" : 3\n      }, {\n        \"token\" : \"区\",\n        \"start_offset\" : 5,\n        \"end_offset\" : 6,\n        \"type\" : \"word\",\n        \"position\" : 4\n      } ]\n    }*/\n\n最後にデフォルトでkuromojiを使うようにelasticsearch.ymlに以下の行を追加します。\n\n    index.analysis.analyzer.default.type: custom\n    index.analysis.analyzer.default.tokenizer: kuromoji_tokenizer\n\n# MongoDBの設定\n\nMongoDBからIndexを作成するelasticsearch-river-mongodbプラグインはReplicaSetを構築した際に作成されるoplog.rsコレクションを利用するのでReplicaSetを構築する必要があります。\n\n構築自体は1台構成でもいいのでmongoのコンソールから<code>rs.initiate()</code>を実行します\n\nしばらく待つと構築が終わるので<code>rs.config()</code>で結果を確認します。\n\n最後にElasticsearch側でCollectionとIndexの関連付けを行います。(DB名やIndex名は実際に使う名前を指定します)\n\n    $ curl -XPUT 'http://localhost:9200/_river/mongodb/_meta' -d '{\n      \"type\": \"mongodb\",\n      \"mongodb\": {\n        \"db\": \"DATABASE_NAME\",\n        \"collection\": \"COLLECTION\",\n        \"gridfs\": true\n      },\n      \"index\": {\n        \"name\": \"ES_INDEX_NAME\",\n        \"type\": \"ES_TYPE_NAME\"\n      }\n    }'\n\nこの時点でElasticsearchを再起動すると<code>NoShardAvailableActionException</code>という例外が出るんですが何故出るのか分からず調査中。検索自体は普通に出来ます。\n\n# Node.jsから呼び出す\n\n設定が終わってしまえばあとはMongoose等で普通にデータの追加や削除を行えばほぼタイムラグ無しにElasticsearch側に反映されます。\n\nElasticsearch側のインタフェースはREST APIなので普通にNode.jsからHTTPリクエストを投げれば良いんですがその辺をラップしてくれるライブラリがあります。\n\nまずはインストール\n\n    $ npm install elasticsearch\n\nサンプルとして以下のようなSchemaのコレクションを検索する処理を書きます。\n\n    {\n      subject: String\n      body: String\n    }\n\n例によってCoffeeScriptですがsubjectとbodyに対してキーワード検索するにはこんな感じで書きます。\n\n    log4js = require 'log4js'\n    logger = log4js.getLogger()\n    elasticsearch = require 'elasticsearch';\n    es = elasticsearch {_index: 'index_name', _type: 'type_name'}\n\n    search = (keyword, callback)->\n      es.search {query:{multi_match:{query: keyword, fields:['subject', 'body']}}}, callback\n\n    search('日本語全文検索', (err, data)->\n      if err\n        logger.error err\n      else\n        logger.debug data\n    )\n\nという感じで日本語全文検索出来るようにしただけで力尽きたので今日はここまで。\n\nそのうちこれを使って何か作ってみたいと思います。\n\n# 今日使った諸々のリンク\n\n* [Elasticsearch](http://www.elasticsearch.org/)\n  * [elasticsearch-analysis-kuromoji](https://github.com/elasticsearch/elasticsearch-analysis-kuromoji)\n  * [elasticsearch-river-mongodb](https://github.com/richardwilly98/elasticsearch-river-mongodb)\n* [MongoDB](http://www.mongodb.org/)\n* [Node.js](http://nodejs.org/)\n  * [node-elasticsearch](https://github.com/ncb000gt/node-elasticsearch)","key":"elastic_search"},"feed_reader":{"title":"Google Readerが終わるそうなので","category":"programming","timestamp":"2013-05-01T10:10:15+09:00","thumbnail":"//farm4.staticflickr.com/3365/3541653049_a3e8534a8e_o.jpg","body":"7月にGoogle Readerがサービス終了とのことですが、個人的には使いまくってるのでちょっと困ります。\n\nそこで一念発起して**ちょうどGW入ったし今から作り始めれば自分が使いよいのが作れるだろう**ということで大まかに作ってみました。\n\n<!-- more -->\n\nというわけで、作りかけのサイトが[こちら](http://www.sevenspirals.net:3001/)。\n\n開発中なので常時動かしてるわけではありませんが。\n\nちなみにport3000にアクセスするとちょっとしたホラーが。\n\nあとは既読の記事は非表示にする機能と登録したFeedの変更削除が出来れば自分が最低限使いたい機能は揃うのでGoogle Readerから離脱しつつこっちの機能追加をしていこうと思います。\n\n・・・というかなんで個人用なのに認証機能付けたんだ。＜自分","key":"feed_reader"},"jetstar":{"title":"ジェットスターで札幌に行ってみた","category":"diary","timestamp":"2012-11-14T06:47:00+09:00","thumbnail":"http://www.lucnix.be/d/62183-2/DSC_2690.jpg","body":"先日、妹の結婚式のために札幌に行ったんですがその際に出来るだけ安く行こうということでジェットスターを利用してみました。\n\n<!-- more -->\n\n## 予約\n宿泊先は手配済みだったので航空券だけジェットスターのサイトで予約しました。\n\nこのサイトが地味にくせ者で、一部日本語ページが作りかけなのかページ遷移の設定がおかしいのかちょいちょい英語ページにリダイレクトされます。あと、私と相性が悪いのか説明がわかりにくい。\n\n出てくるのはだいたい操作ミスとか異常系のページ遷移みたいですがちょっと怖い。\n\n便数はそんなに多くない（し、成田までの移動時間を考えると選択肢はさらに絞られる）のですがまあ、出来るだけ手頃な便と座席を指定して予約します。\n\nここで他と違うのは手荷物が有料で出来るだけ早いタイミングで申し込んだ方が安く付くというくらいでしょうか。今回は手荷物は機内持ち込み範囲内なので無しで。\n\n予約が成立すると予約番号が発行されます。この番号はあとでチェックインに使います。\n\n## ウェブチェックイン\n支払い済みでかつ出発の48時間以内になるとウェブサイト上でチェックインを行い、搭乗券を受け取ることが出来ます。\n\nウェブチェックインを行うと搭乗券のPDFが生成されるのでこれをメールで受信するかその場で印刷します。PDF自体はカラーですがバーコードを読むだけなので印刷時は白黒で構いません。\n\n私の場合はプリンタを持ってないのでメールで受け取ってからセブンイレブンのネットプリントで印刷しました。\n\nちなみにQRコード搭乗券というのがあってそれならスマートフォンの画面表示で良いらしいんですが**例によってどうやったら出来るのかよく分かりませんでした**。\n\nチェックインは復路が一週間以内なら往復まとめてチェックインできますが、何故か私はまあ、良いかと往路だけチェックインしたため、後で復路のチェックインを行う際にWEBサイトでまた悩む羽目になりました。\n\n## 成田へ\nジェットスターは東京からだと成田発なので電車に揺られて成田空港まで移動。地味に全行程の中で一番時間がかかりました。\n\nちなみに初成田です。\n\n## 搭乗手続き\n搭乗手続き自体はウェブチェックインを済ましていて手荷物が無ければそのまま保安検査に向かえばOKです。\n\nチェックインがまだの場合は空港内の端末でチェックインを行います。\n\n保安検査では機内持ち込みの荷物の大きさもチェックされますがまあ、見た感じ明らかに逸脱していなければ止められることは無いんじゃないかなと思います。\n\n保安検査を終えたら時間まで待ってバスで移動。時間まではまあ、売店があるくらいで特にすることも無いのでぼーっと待ちます。\n\n荷物と時間に厳しい以外はこの辺の手続きは他と特に変わりません。\n\n居ない人は一応放送で呼び出してましたが、定刻になったらさっさと出発してしまいました。\n\n## 機内\n機体自体は同じですが座席がたくさん詰め込まれてて狭いです。\n\nただまあ、我慢できない狭さではないので乗ってしまえば機内サービスが有料なくらいで特に違いは感じませんでした。気圧変化で耳が痛くなるのも同じです。＜それは体質の問題。\n\n男性の添乗員を初めて見ました。\n\nその後は爆睡したので記憶無し。\n\n## 到着\n手荷物がないので特に何事も無く到着ゲートをくぐって空港内へ。\n\nジェットスターのゲートは新千歳空港の一番端だったので実家から来た他の家族と合流するのにとぼとぼ歩いて真ん中の方に移動。\n\n・・・が、何故かここで迷子スキルが発動。散々歩き回る羽目になりました。\n\n## 感想\n安いです。航空券に関しては予定の半額以下で収まりました。\n\nその分、機内サービスが無いとか狭いとか予約変更できないとかはありますが、今回の場合予定は既に決まってるし私自身、機内サービスがあろうが無かろうが気にならないので問題ありませんでした。\n\n従来のサービスが当たり前になっているくらい頻繁に飛行機に乗ってるとかあとは長距離とかだと辛いのかも知れませんがそうでもない国内の一人旅なら全然有りです。\n\nただ、成田空港までが遠かった・・・。","key":"jetstar"},"docker_lamp":{"title":"VPS内のLAMP環境をDockerコンテナに移行する","category":"tools","timestamp":"2014-08-18T01:32:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"[前回](/2014/08/14/docker_install/ \"さくらVPS上のCentOSにDockerをインストールした\")、Dockerをインストールしコンテナを作れることを確認したので実際にVPSに入っているLAMP環境をDockerコンテナに移行したいと思います。\n\n<!-- more -->\n\n# Dockerfileの作成\n\n[Docker Hub](https://registry.hub.docker.com/ \"Docker Hub\")を探せばいろんな人が作ったLAMP環境のイメージがあるんですが、Chefとかと同じで自前で作った方が良いということでDockerfileからイメージを作ることにします。\n\n今回作ったのは下記の通り、\n\n    FROM centos:centos6\n\n    MAINTAINER syaku\n\n    RUN yum install -y initscripts MAKEDEV sudo\n\n    RUN yum check\n\n    RUN yum update -y\n\n    RUN yum install -y openssh-server\n\n    RUN useradd -d /home/vagrant -m -s /bin/bash vagrant\n    RUN echo vagrant:{パスワード}| chpasswd\n    RUN echo 'vagrant ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n    RUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\n    RUN sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config\n\n    RUN yum install -y tar gzip\n\n    RUN yum install -y gcc make\n    RUN yum install -y perl perl-CPAN perl-CGI\n    RUN rpm -Uvh ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/csbuild:/Perl/CentOS_CentOS-6/noarch/perl-Jcode-2.07-1.4.noarch.rpm\n\n    RUN yum install -y httpd\n    RUN yum install -y mysql-server\n    RUN yum install -y php php-mysql php-mbstring\n\n    RUN chkconfig sshd on\n    RUN chkconfig httpd on\n    RUN chkconfig mysqld on\n\n    RUN /etc/init.d/sshd start\n    RUN /etc/init.d/mysqld start\n    RUN /etc/init.d/httpd start\n\n    EXPOSE 80\n\n    CMD [\"/sbin/init\"]\n\n通常のLAMP環境に加え、perlのCGIをいくつか動かしていたのでperlを、既存環境のファイルをやりとりするためtarとgzipをインストールしています。\n\nそのほかには、コンテナ管理にVagrantを使うことにしたので、<code>vagrant ssh</code>するためにsshをインストールしています。\n\nこうやっておくと<code>vagrant ssh</code>した際にパスワードを入力するだけでコンテナにアクセスすることが出来るのでIP調べなくていい分、若干楽です。\n\n# コンテナ管理にVagrantを使ってみる\n\nコンテナ管理には(個人的に慣れてるので)Vagrantを使用しますが、VagrantからDockerを操作するにはVer1.6以上が必要なのでインストールしていない場合はインストールします。\n\nインストールはrpmコマンド一発です。\n\n    $ sudo rpm -Uvh https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.rpm\n\nインストールが終わったらDockerfileと同じ場所にVagrantfileを作ります。\n\n今回作ったVagrantfileはこんな感じ、\n\n    Vagrant.configure(\"2\") do |config|\n        config.vm.provider \"docker\" do |d|\n            d.build_dir = \".\"\n        end\n        config.vm.network :forwarded_port, guest: 80, host: 8080\n    end\n\n内容としてはカレントディレクトリのDockerfileをビルドして80番ポートをホスト側の8080ポートに紐付けます。\n\nで、両方整ったらコマンド叩いて起動します。\n\n    $ vagrant up --provider=docker\n\n最初はイメージのビルドを行うので結構時間がかかります。\n\n正常に終わったら、\n\n    $ vagrant ssh\n\nと叩いてログインできるか確認します。\n\nログインできたらついでにちゃんとサービスが起動しているか確認します。\n\n# せっせと移行する\n\n入れ物ができあがったらあとは既存の環境からファイルやらDBのダンプやらをコンテナ環境に持ってきて移行作業を行います。\nVagrantを使っている関係でVagrantfileがあるディレクトリが/vagrant/として共有されているのでそこに放り込んでおけば作業が楽です。\n\n移行作業そのものはケースバイケースなのと基本的に移行元と同じ環境なので移行元と同じようにすれば良いので割愛。\nIPとポートは変わってるのでその辺設定ファイルを書き換える必要があります。\n\n移行が終わったら8080番ポートにアクセスしてコンテナ上のサービスにアクセス出来ることを確認します。(紛らわしいのでホスト側のサービスは止めておきます)\n\n上手く動いたらホスト側のnginxでリバースプロキシの設定をして移行は終わりです。","key":"docker_lamp"},"leap_second":{"title":"閏秒","category":"diary","timestamp":"2012-07-03T16:58:58+09:00","body":"このサーバーはさくらのVPSで運用しているんですが、そのさくらインターネットから「VPSのCPU利用率が以上に跳ね上がってるので調べてちょ（意訳）」とメールが来ました。\n\n<!-- more -->\n\n7/1に閏秒の挿入をしたのでそのタイミングで跳ね上がってたら日付の再設定を試して欲しいとのこと。\n\nsshでログインしてみるとどうもJenkinsのjavaプロセスが張り付いてる。特にジョブは走っていないのでジョブが走りまくって暴走してるわけではないらしい。\n\nで、コントロールパネルのログを見てみるとまさに上記のタイミングで急激に跳ね上がってる。\n\nというわけで閏秒が犯人らしいので下記のコマンドで日付の再設定。\n\n    # date `date +'%m%d%H%M%C%y.%S'`\n\n再設定したところでCPU利用率はがくっと下がり無事問題解決。\n\nいやー、当日は閏秒の存在をすっかり忘れてましたが影響あるもんですねー。","key":"leap_second"},"mvvm_1":{"title":"WPFでMVVMパターン(1)","category":"programming","timestamp":"2013-01-26T13:03:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"今更という感じはかなりしますが、[今こそWPF!](http://www.slideshare.net/Yamaki/wpfwpf)というわけでWPFとMVVMのお勉強を始めました。\n\n今回は第1回ということでMVVMについて勉強したことのまとめです。\n\n<!-- more -->\n\n## WPFって？\n.NET Framework3.0から追加されたUIシステムで、Direct3Dを介して描画することでGPU支援が受けられます。\n\nまた、ベクトルグラフィックスで拡大縮小が出来たりXPSフォーマットをサポートしており、画面に表示されている内容そのまま印刷出来るらしいです。(印刷はまだ試したことないっす)\n\nそしてWPFのUIはXAMLで記述され、ロジックが記述されたソースコードと完全に切り離すことが出来ます。また、コントロールの見た目を大きくカスタマイズ出来るため、見た目を変えるためにわざわざユーザーコントロールを作って、と言うことは殆どしなくてよくなります。\n\nこのロジックとUIを切り離せるというのが今回の肝ですね。\n\n## MVVMって？\nMVCパターンの派生パターンの一種で、元々はViewとロジックの分離というMVCの思想をWPFやSilverlightで実現するために生まれた考え方です。(直接の親はPresentation Modelパターンですけど)\n\n従来のMVCパターンではControllerはViewへの入力をイベントとして受け取ってModelのメソッドを呼んでロジックを実行していました。\n\n図にすると以下のような感じ。\n\n---\n\n![](http://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/ModelViewControllerDiagram2.svg/313px-ModelViewControllerDiagram2.svg.png)\n\nImage By [Wikipedia](http://ja.wikipedia.org/wiki/Model_View_Controller)\n\nただ、Controllerは入力に対する応答としてViewを操作することはありますが、ロジックの実行で変更されたModelの状態については関知しないのでViewはModelの変更を監視(イベントで通知する事もありますが)し、自身の描画を更新する必要がありました。\n\nここで問題になるのがViewがModelの変更を監視して自身の描画を更新するというところで、例えば\"金額がマイナスになったら文字を赤くする\"等のロジックをどうするかです。\n\n画面に依存する問題なのでModelに持たせるのは変なのでまあ、Viewに持たせるわけですが、Viewにロジックを持たせてしまうとテストが大変です。\n\nそこで、画面に表示する状態を持つPresentation Modelという役割を追加してViewは文字の色もModelのプロパティもボタンを操作した際のイベントすらもデータバインディングで自動的に反映するだけで済むようにすればModelを監視しなくて良いしViewとロジックを完全に分離できるよね。というのがMVVMの親になったPresentation Modelパターンの考え方です。\n\nMVVMを図にするとこんな感じ。(Presentation Modelもほぼ同じ)\n\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png\">\n\nImage By [Wikipedia](http://ja.wikipedia.org/wiki/Model_View_ViewModel)\n\nデータバインディングで自動的にというのが重要でこの仕組みを全部手書きで実現すると手間がかかりすぎてViewとロジックは分離できるかも知れませんが肝心のロジックを書く時間等大事な物を失ってしまいそうです。なのでWPFというかMVVMに手を出すときはデータバインディング(或いはその類似技術)重要。\n\nMVVMとPresentation Modelの違いは、MVVMはそこからさらに進んでWPFやSilverlightはViewを完全にXAMLだけで記述することでViewを完全に抽象化出来る(ViewModelに対して複数のViewを切り替えられる)ことで、なのでXAMLのような技術が無く、Viewを完全に抽象化出来ないMVVMパターンはPresentation Modelパターンと変わらないらしいです。\n\n---\n\n## まとめ\n* MVVMはMVCの一種てPresentation Modelの子供\n* MVCではView絡みのロジックの受け入れ先がないという問題を解決するためにPresentation Model(他の派生パターンも)が生まれた\n* プロパティもイベントも状態も自動的に反映する。データバインディング重要\n* MVVMとPresentation Modelはほぼ一緒だけどWPFのMVVMはViewを抽象化できる\n\nWPFが見当たりませんが(おい)、まとめるとこんな感じでしょうか、次回からは実際にVisualStudioでModel、View、ViewModelを作っていこうと思います。\n\n## 参考\n* [今さらWPF？いいえ、今こそWPF！](http://www.slideshare.net/Yamaki/wpfwpf)\n* [「MVVMパターンが必要な理由」啓蒙用資料公開](http://ugaya40.net/mvvm/mvvm_document.html)\n* [MVCパターン@Wikipedia](http://ja.wikipedia.org/wiki/Model_View_Controller)\n* [MVVMパターン@Wikipedia](http://ja.wikipedia.org/wiki/Model_View_ViewModel)","key":"mvvm_1"},"kuchisake_returns":{"title":"口裂け女 リターンズを観てきました","category":"diary","timestamp":"2012-07-13T23:55:26+09:00","body":"元々ホラー好きなのもあるんですが、主演の大堀さんが好きなので<cite><a href=\"http://manchikan.com/kuchisakereturns/\">口裂け女 リターンズ</a></cite>を観に行ってきました。\n\n<!-- more -->\n\nこの作品では口裂け女は山奥の村（口裂け女発祥ということから考えると岐阜？）で祭られてる生き神という設定で、民俗学を専攻している大学生の主人公とその友達がその村の祭りを取材に来て生け贄にされる。というストーリーです。\n\n詳しくは公式サイト参照。＜おい\n\nちなみに、都市伝説の方の口裂け女はこの村から逃げ出した生き神が噂として広まったということになってます。\n\n所々に笑い？あり、涙ありでそれなりに面白いんですがちょっと詰め込み過ぎな感じもしたのでもっとシンプルでも良かったんじゃないかと思います。\n\nあんまりシンプルにしすぎるとアクション映画になりそうですが。\n\nちなみに、駅に着いたとたんに迷子スキルが発動して映画館の場所が分からなくなったりふらっと本屋に寄ったら出る際に何故か万引き防止のセンサーに引っかかったりとかありましたが、おかげで道は覚えたので次からは大丈夫だと思います。","key":"kuchisake_returns"},"left_handed_pen":{"title":"左利きのペン事情","category":"stationery","timestamp":"2015-07-19T21:00:00+09:00","thumbnail":"https://lh3.googleusercontent.com/-bHJjzQZNQnQ/Vaq3p0Jc2JI/AAAAAAAADs0/aPDbxEDpmwM/s800-Ic42/dce0b4c6d29dbcbb4dd4f86a3640306f_m.jpg","body":"特に手書きが必須な職業ではないので、一般的には普段使いのペンと言えばボールペンで良いとは思いますが、昔から私はボールペンだと字が上手く書けません。というかそもそもちゃんと線が引けません。\n\n右利きの人に渡すと普通に書けるのでペンが壊れてるわけでもなく、多分自分が左利きのせい。\n\n左利き全般がそうなのかは分かりませんが同じ悩みを抱えてる人もいるんじゃないかというわけで、備忘録も兼ねて普段使ってるペンについて書きたいと思います。\n\n<!-- more -->\n\n# 左利きがボールペンと相性が悪い理由\n\nボールペンの構造として軸にはさまれたボールが回転してインクが出る構造になっていますが、以下の理由で左利きの書き方と相性が悪いようです。\n\n* ボールペンはある程度傾けて書いたほうがボールの回転がよくなるが、手が汚れないようにペンを立てて書くため、ボールの回転が悪くなる。\n* かといって右手で持つのと同じように左手で書くと常に押し書きになり、ボールに圧力がかかり回転が悪くなる。\n\nあれ、詰んだ・・・。\n\n## なんとかして左利きでボールペンで書くなら\n\nボールの転がりやすさはペン先の太さやインクの粘性も関係があり、細字のゲルインキボールペンとか相性は最悪です。\n\n逆に何とかしてボールペンで書く場合、太字で油性インクのボールペンかタンクにある程度圧力がかかっていて押し書きでもインクが出るボールペンなら比較的書きやすいです。\n\n店頭で試し書きした感じだと、三菱鉛筆のJETSTREAMとかパワータンクの0.7mmとかが書きやすかったです。\n\nまあ、それでも字がかすれたりインクが玉になったりするのが皆無にはなりませんが、書けるだけでもだいぶストレスは違います。\n\n# ボールペン以外に解決策を求める\n\n書けなければ使わなければ良いじゃないという訳で、さくっとボールペンを捨てて別のペンに解決を求めることにしましょう。\n\nというわけで、ここからは私が使って書けたペンをつらつらと紹介します。\n\n## 鉛筆系\n\n恐らく説明不要ですが、顔料を固めた芯を紙にこすりつけ顔料の軌跡を残すことで筆記する筆記具です。\n\nペンの向きや持ち方の影響をあまり受けないので左利きでも問題無く書けます。\n\n### 鉛筆\n\nこれも恐らく説明不要ですが、芯を木で挟んだいわゆる一般的な鉛筆です。\n\n左利きでも書けますが、消せるということが利点でも欠点でもあるためこれだけで全てまかなうのは大変です。\n\nあと削らないと使えないのが微妙にめんどい。\n\n### シャープペン\n\n鉛筆より細い（0.5mmとか）芯を樹脂や金属の軸で固定して使う筆記具で、現在ではノック式で芯を繰り出して使うものが殆どです。（他にもノック式発明以前は主流だった回転式といってネジの回転で芯を繰り出す機構のものもあります。）\n\n削らずに使える鉛筆の代替として使われています。欠点は芯が細いので折れにくい芯を作ることを優先しているため書き味が悪い（気がする）こととそれでも細いので結局は筆圧が高いとボキボキ折れること。\n\n### 芯ホルダー\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>鉛筆系は今はこれを使ってます。作りはだいたいシャープペンと同じですが、2mmとかの太い芯を使うため、簡単には折れません。</p>\n<p>使用感もシャープペンというよりは鉛筆に近く、絵描きにお勧めです。</p>\n<p>私はステッドラー社のMARS 780Cというのを使ってます。</p>\n<p>工業デザイナーのジョルジェット・ジウジアーロ氏が愛用していることで有名で本来は製図用ですが、\n私は（今は製図はしないので）絵を描いたり思いつきをあーでもないこーでもないと書き殴ったり消したりとかいうのに使ってます。</p>\n<p>シャープペンと同じく芯を繰り出せば削らずに書けますが、シャープペンと違ってだんだん太くなるので、とがらせるには専用の芯削りで芯をとがらせる必要があります。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B000WL4WEC&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n## 万年筆系\n\n毛細管現象という仕組みでインクをペン先に送りこんで筆記する筆記具で、高級文具の代表格ですが安いのもあります。\n\n先端にペンポイントという耐摩耗性の高い玉が溶接されており、メンテナンスさえ怠らなければ名前の通り半永久的に使えます。\n\n左利き用もありますが、筆圧を殆どかけずに書く事が出来るため、ペン先の向きさえ気をつければ左利きでも問題無く書けます。（結構ペンの向きにシビアなので持ち方を間違えると書けないです。）\n\n欠点はメンテナンスを怠ったり、しばらく使わなかったりするとインクが固まってすぐ書けなくなります。\n\nまた、かつては公文書の筆記は化学反応で定着するブルーブラックインクを使うため、万年筆かローラーボール（ほぼボールペン、インクが違う）しか使えない時代がありましたが、\n現在の万年筆はほぼ染料インクで特別耐久性が高い訳ではないのでサインペンの仲間扱いで使えない役所もあるようです。\n\n### プラチナ万年筆 プレピー\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>200円台で買える格安万年筆で、見た目は値段相応に安っぽいですが、ちゃんと万年筆ぽい書き味です。</p>\n<p>キャップにも乾燥対策のための工夫がしてあり、キャップさえしてあれば少しくらい使わなくても書けなくなったりはしません。</p>\n<p>安いので書けなくなったり無くしたりしてもダメージが少ないのが良いところ。</p>\n<p>ちなみに、他の格安ペンにも言えることですが、うっかり1本単位で通販で買うと本体と変わらない金額の送料が付いてきたりするするので注意。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001H06N3K&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### 無印良品 丸軸アルミ万年筆\n\nこちらは無印良品で売っている1000円くらいの格安万年筆です。\n\n200円のプレピーよりは高級感のある外見で値段も手頃。ちなみにOHTOのOEMで値段の割に出来も良いです。\n\nペリカン等のヨーロッパ標準規格のコンバーターが使えるのでカートリッジだけでなくボトルインクを使うことも出来ます。\n\nペン先も海外規格なのか日本のペンよりも若干太字ですがインクフローもよく書きやすかったです。（ただし安いので個体差があるかも）\n\nこの辺使ってみて良いなと思ったらラミーのサファリとか3000円～のものに手を出すと良いと思います。\n\nこのクラス以上になると左利き用もありますし、お金を出して調整しようかという気分にもなってきます。\n\n## ファイバーチップペン系\n\n樹脂製のペン先にインクを送って書くタイプの筆記具です。\n\nペンの角度や向きにシビアでないペンが多く、左利きでも書きやすいですが、ペン先が弱く筆圧が強いと壊れたり、\nまたそうでなくても使っているうちに摩耗していくため使い捨てのペンが多いです。\n\n### ぺんてる プラマン\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>どちらかというと万年筆の仲間のような気もしますが、一応プラスチック（樹脂）製なのでこちらに。</p>\n<p>より安価で使いやすい万年筆をということで開発されたプラスチック製のペン先の万年筆です。</p>\n<p>結果、万年筆とはまた違った独特の書き味となっており、そのためファンも多いです。</p>\n<p>さすがに本家の万年筆と違ってプラスチックのペン先は書いているうちに摩耗するため使い捨てで、\n本体ごと使い捨てのプラマンと軸はそのままでペン先付きのインクカートリッジが交換できるトラディオプラマンの2種類があります。</p>\n<p>安価（使い捨てなら200円）で万年筆ほどペンの向きにシビアでなく、軽い筆圧でも書けるため、左利きでも非常に書きやすいのですが、\nインクの乾きが遅く手が汚れる上に手に付くと洗ってもなかなか落ちないのが困りどころ。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B0017OR05Q&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### Parker 5th\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>似てるので勢いでここに入れちゃいましたが、あんまり自信が無い・・・。</p>\n<p>鉛筆でもボールペンでもローラーボールでも万年筆でもない第5の筆記具ということで5thという名前なのだそうです。</p>\n<p>ペン軸もほどよく重く、引っかかり無くすらすらと書けますしインクの乾きも速いので書いてすぐ触ってもまず手が汚れることはありません。</p>\n<p>良いことずくめですがその分、値段もお高くペン自体が1万円～2万円くらいしますし、替え芯が1本1000円と高いためコストパフォーマンスは非常に悪いです。</p>\n<p>このペンもペン先が摩耗する（元々割と太字なため、最後の方は結構太くなります）ためインクはペン先ごと交換するようになっています。</p>\n<p>また、非常に紙を選び、普通の万年筆なら大丈夫な紙でもあっさり裏写りしたりします。</p>\n<p>以前は普段使いで使ってましたが何度か無くしそうになる上に無くすとダメージでかいため、今は何か気が乗らないときに気合い入れて書くために使ってます。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B00BY1EJY2&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### サクラクレパス PIGMA (ミリペン)\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>巡り巡って現在主に使用しているペン。</p>\n<p>ペンの太さがミリ単位で記載されていることから通称ミリペンと呼ばれているペンでいろんなメーカーが販売しています。</p>\n<p>コミックやイラストのペン入れに使う画材だったりしますが、細く一定の線が書けるのでメモ帳や手帳に書き込むのにも向いています。</p>\n<p>種類があってどれを買うか迷ったんですが、メジャーで評価が高いという噂のサクラクレパスのPIGMAシリーズを選びました太さは03の黒、青、赤を使ってます。</p>\n<p>耐水性の顔料インクで乾きも速く、乾くと水に濡れてもにじまないため、外でメモするのに向いてます。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001GR4C6Y&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n# 紙との相性\n\n鉛筆やボールペンで問題になることは少ないでが、殆どの筆記具は紙との相性があります。\n\nどうにもならないところでいうと、万年筆やファイバーチップペンは筆圧をかけて書く事が出来ないため、カーボン紙などの複写式の用紙に書くことが出来ません。\n\nまた、特に万年筆や、プラマン、Parker 5thなどは万年筆を想定した手帳用の紙でないとインクが裏に抜けて両面に書けなかったりします。\n\n機会があればノートやメモ帳、手帳などの話も書きたいと思います。\n\n# まとめ\n\n改めて書き出してみると、私の場合、最終的には芯ホルダーやミリペン等、筆記具というか画材寄りの道具に落ち着くようです。\n\nでも万年筆はまた使いたい。（ラミーのサファリ辺りを買おうかな。）","key":"left_handed_pen"},"playlog1":{"title":"メインクエスト開始","category":"skyrim","timestamp":"2012-11-10T15:53:16+09:00","thumbnail":"https://lh6.googleusercontent.com/-fxamLzy3Lr8/UJ4v7PMb5CI/AAAAAAAAA8c/YdMr9PlLZ2A/s800/playlog1_1.jpg","body":"Alternate Start - Live Another Lifeを導入しているため、アルフタンドの大リフトに放り出された我らがドヴァキンですが、なんとかメインクエストまで戻ってきました。\n\n意外と歩き回ることになってメインクエスト開始前にドラゴンブリッジ辺りまで足を伸ばす羽目になりました。（やっぱりそのまま進めた方が楽だったかもしれない）\n\nまあ、すぐ自由に動き回れるから良いか。\n\n<!-- more -->\n\n![](https://lh4.googleusercontent.com/-qmtc2sxxxFk/UJ4v7huzaxI/AAAAAAAAA8o/j_hV4QkyZp0/s800/playlog1_2.jpg)\n\nメインクエストに合流してリバーウッドに到着しましたが、リディアが居ない上にシャウトが使えないので戦力的にきつい。というわけで少なくともミルムルニルを倒しておこうというわけでリバーウッドからホワイトランへ直行。\n\nさっそく首長にヘルゲンでの出来事を報告。**その場に居なかったのに**見てきたように語るドヴァキン。\n\n![](https://lh5.googleusercontent.com/-2-dYk6H-UN0/UJ4v7rmoa4I/AAAAAAAAA8k/9JSs4GD22c0/s800/playlog1_3.jpg)\n\nここに来るまでにいくらか戦闘経験を積んでいるのでドラゴンストーンはさくっと入手。西の監視塔でミルムルニルと戦闘。\n\n<del>イリレスと愉快な仲間達が</del>さっくり退治します。\n\nミルムルニルを倒した事を首長に報告し、従士の資格をもらいリディアを仲間にします。\n\n![](https://lh4.googleusercontent.com/-PKWzDReLqQQ/UJ4v8s5PltI/AAAAAAAAA80/KUkswnmf3Uc/s800/playlog1_4.jpg)\n\nうちのリディアさん。ころころ顔が変わりますが現在はこんな感じです。\n\nいつもならここでブリーズホームを購入しますが今回は家を建てるので買わずにスルー。\n\nいまだDawnguardとHearthfireは影も形も見えません。","key":"playlog1"},"mvvm_2":{"title":"WPFでMVVMパターン(2) - Model編","category":"programming","timestamp":"2013-02-17T13:26:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"というわけで[前回](/2013/01/26/mvvm_1/)に引き続いてMVVMネタです。\n\n今回はModelを作ります。\n\n<!-- more -->\n\n# とりあえずModelから\n\nどういう順番で作るのが正解なのかよく分かりませんが、私はだいたいModelから作り始めます。\n\n理由は単純で**Modelは絶対必要だから**。\n\n他の要素、ViewModelだけで無く(GUI的な)Viewも絶対必要とは考えません。この時点ではConsoleアプリケーションから呼び出して使うつもりで作りはじめます。その方がテストが書きやすい(気がする)ので。\n\nだいたい、それ以外の機能はView作ってみて機能が足りなかったらViewModelに押しつけりゃいいというのが私の考えです。(いい加減)\n\n# さくっとコーディング\n\nModel作成の時点では特にMVVMパターンだからどうという作法はあまりないので好きに作ります。＜おい\n\nというわけでVisual StudioでWPFアプリケーションを作成して下記のクラスを追加しました。\n\n## Model.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.ComponentModel;\n    using System.Collections.ObjectModel;\n\n    namespace MVVM\n    {\n        public class Model : INotifyPropertyChanged\n        {\n            ObservableCollection<DetailModel> _details;\n            public ObservableCollection<DetailModel> Details\n            {\n                get { return _details; }\n            }\n\n            public event PropertyChangedEventHandler PropertyChanged;\n\n            public Model()\n            {\n                _details = new ObservableCollection<DetailModel>();\n            }\n\n            public void Order()\n            {\n                /* なんらかの注文ぽい処理をするのだと思われる */\n\n                foreach (DetailModel detail in _details)\n                {\n                    Console.WriteLine(\"Key:{0}\\\\tCode:{1}\\\\tName:{2}\\\\tPrice:{3}\\\\tCount:{4}\", detail.Key, detail.Code, detail.Name, detail.Price, detail.Count);\n                }\n            }\n        }\n    }\n\n## DetailModel.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.ComponentModel;\n\n    namespace MVVM\n    {\n        public class DetailModel :INotifyPropertyChanged\n        {\n            public Guid _key;\n            public Guid Key\n            {\n                get\n                {\n                    return _key;\n                }\n            }\n\n            public string _code;\n            public string Code\n            {\n                get\n                {\n                    return _code;\n                }\n                set\n                {\n                    if (!string.IsNullOrEmpty(value) && !value.Equals(_code))\n                    {\n                        _code = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Code\"));\n                    }\n                }\n            }\n\n            public string _name;\n            public string Name\n            {\n                get\n                {\n                    return _name;\n                }\n                set\n                {\n                    if (!string.IsNullOrEmpty(value) && !value.Equals(_name))\n                    {\n                        _name = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Name\"));\n                    }\n                }\n            }\n\n            public decimal _price;\n            public decimal Price\n            {\n                get\n                {\n                    return _price;\n                }\n                set\n                {\n                    if (_price != value)\n                    {\n                        _price = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Price\"));\n                    }\n                }\n            }\n\n            public uint _count;\n            public uint Count\n            {\n                get\n                {\n                    return _count;\n                }\n                set\n                {\n                    if (_count != value)\n                    {\n                        _count = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Count\"));\n                    }\n                }\n            }\n\n            public event PropertyChangedEventHandler PropertyChanged;\n\n            public DetailModel()\n            {\n                _key = Guid.NewGuid();\n                _code = \"\";\n                _name = \"\";\n                _price = 0;\n                _count = 0;\n            }\n\n            public DetailModel(string code, string name, decimal price, uint count)\n            {\n                _key = Guid.NewGuid();\n                this.Code = code;\n                this.Name = name;\n                this.Price = price;\n                this.Count = count;\n            }\n        }\n    }\n\n明細モデル（ただのデータオブジェクトですが）のコレクションと注文の操作を持つModelですけど長いよ・・・。\n\n普通に何も考えずに書くときとの違いは、Modelの操作によってプロパティが更新された際にViewModelに通知する事を考えて、<code>INotifyPropertyChanged</code>を継承していることと同じくコレクションの変更を通知できるように<code>List&lt;T&gt;</code>ではなく、<code>ObservableCollection&lt;T&gt;</code>を使っているところでしょうか。\n\nただまあ、このパターンだと操作した結果、値が変わるような事は無さそうなのでアレですが。\n\n# Consoleアプリで実行\nModel単体では実行できないのでConsoleアプリを作って実行してみます。\n\nソリューションにConsoleアプリケーションのプロジェクトを追加して、先ほど作ったWPFプロジェクトを参照に追加します。\n\nそこに先ほど作ったModelを呼び出すコードを追加します。こんな感じ。\n\n## Program.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace TestConsole\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                var model = new MVVM.Model();\n\n                model.Details.Add(new MVVM.DetailModel(\"A001\", \"リンゴ\", 100, 1));\n                model.Details.Add(new MVVM.DetailModel(\"A002\", \"みかん\", 80, 3));\n\n                model.Order();\n\n                Console.Read();\n            }\n        }\n    }\n\nで、おもむろに実行。出力は以下のようになりました。\n\n    Key:e2c9eec2-5b90-4072-a646-c1136ee458b9       Code:A001      Name:リンゴ      Price:100      Count:1\n    Key:1e28e2fe-9574-4238-bb16-c7013ab698ec       Code:A002      Name:みかん      Price:80       Count:3\n\nまあ、さすがにちゃんと動いてるようですね。\n\n今回は単純なModel&amp;手を抜いてConsoleアプリで実行してますが、実際にはNUnit等でちゃんとしたテストを書いてJenkinsで実行するといいと思います。というかしましょう。私含めて。＜やってないのかよ\n\n特にリグレッションテストってある日突然情熱に目覚めて、やろう。と思ってもいざやると機能を追加する度にやることが加速度的に増えて心が折れがちです。\n\nなのでロジックの部分をあらかじめテストしやすいように作るのが大事なんだと思います。\n\n<br/>\n\nというところで今回はここまで。次回はViewModel・・・をすっ飛ばしてViewを作ろうと思います。","key":"mvvm_2"},"nasne_01":{"title":"nasneが届いちゃった","category":"diary","timestamp":"2012-07-26T20:05:47+09:00","thumbnail":"https://lh4.googleusercontent.com/-i7vPZwPDlPc/UBEihVexT3I/AAAAAAAAAts/W8miONS2gvw/s800/A7C961FD-9622-4012-ADB1-ACFC506347CB.JPG","body":"7月19日の発売が延期されたnasneですが、予約していた分の取り消しが間に合わなかったようで届いちゃいました。(爆)\n\n<!-- more -->\n\n届いたからには使ってみなければなるまい(あまり後先考えない人)。ということで開封して接続して起動してみたところ、HDDから異音がすることもなく無事起動。ラッキー。\n\n自宅にはこれのためにひかりTVを解約してフレッツテレビを契約していたのでtorneを起動してnasneの登録とチャンネルスキャンを行ったらすぐBS/CSが観れるようになりました。\n\n番組表の表示や番組検索はまあ、torneでキャッシュしてると思いますが、チャンネルの切替や視聴はネットワーク越しなのにこれまでのtroneで観るのと殆ど変わらないくらいスムーズです。\n\nあとDLNAメディアサーバーとしての機能はマニュアルには記載されていますがVer1.5の配信が延期になったのでまだ使えません。\n\nともあれ、これでtorne+nasne+hulu+DMM.TVと動画コンテンツの視聴環境がほぼPS3に一本化できて大変便利になりました。ニコニコ動画は殆ど観ないのであとはYoutubeくらい？\n\n今のところ調子よく動いてるようなのでしばらくいじってみようと思います。","key":"nasne_01"},"playlog2":{"title":"Hearthfireはじまりました - Skyrimプレイ日記","category":"skyrim","timestamp":"2013-01-26T21:24:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-gHcYGyZ6Ft8/UQPOexOKMjI/AAAAAAAABEg/ECqsnEaQlyc/s288/ScreenShot18.jpg","body":"というわけでしばらく間が空きましたが細々と続けてます。\n\nメインクエストの\"創始者の角笛\"でウステングラブに行く途中に立ち寄ったモーサルでのクエストを解決した報酬で土地が買えるようになったのでやっとこさHearthfireが始まりました。\n\n<!-- more -->\n\n# 建築風景\n\n![](https://lh4.googleusercontent.com/-Xln9piDf9ho/UQPOexYVOKI/AAAAAAAABEk/Tr3a9bev4U8/s800/ScreenShot3.jpg)\n\n購入した土地に設置されている建築ツールから家の建築を行います。\n\nまず最初は小さい家からスタート、ここに建てますよっと。\n\n![](https://lh4.googleusercontent.com/-6vt1nwPNZ0g/UQPOfMe4R8I/AAAAAAAABEw/UE8VIFmhFLA/s800/ScreenShot4.jpg)\n\n土台を設置。夜が深まって来て暗くて見づらいですが気にせず建築。＜まてや\n\n![](https://lh6.googleusercontent.com/-xc4ui7EdQog/UQPOfu-IH2I/AAAAAAAABFA/XVbyifq8tJQ/s800/ScreenShot7.jpg)\n\n壁まで作った段階であまりにも暗かったので時間を飛ばして朝に。\n\n何故かリディアさんが頬を赤らめながら映り込んできました。\n\nRemodeled Armorを入れてるので北国なのに本当に大丈夫かという格好になっていますが元気に活躍してくれています。\n\n![](https://lh6.googleusercontent.com/-jtHme-yB-g8/UQPOgHJ2AmI/AAAAAAAABFM/F2kblARwp1E/s800/ScreenShot9.jpg)\n\n気を取り直して建築続行、屋根の骨組みまでできあがりました。\n\n![](https://lh3.googleusercontent.com/-xMuhVQw2X0Q/UQPOeR5mfFI/AAAAAAAABEU/FxzpkaXxJIw/s800/ScreenShot11.jpg)\n\nドアと屋根を張って完成。\n\nドアを設置するまではシームレスなので途中で止めてみるのもそれはそれで面白いかも知れません。\n\n![](https://lh4.googleusercontent.com/-oXTj-JWzRBQ/UQPOeg-KtBI/AAAAAAAABEY/q9OeaD8XcRc/s800/ScreenShot12.jpg)\n\n内装は初期状態では荷物置き用の宝箱があるだけです。\n\nとりあえずベッドくらいは置きたいですね。\n\nちなみに窓が明るいのはMOD(名前忘れた)を入れたから。\n\n# 感想\n\nとりあえず最初の小さい家を作ってみましたがなんというかやっぱり自分で建てると愛着が沸くもんですねー。\n\n釘を作ってるうちに鍛冶スキルがぐんぐん上がるドヴァキン。材料の鉄インゴットは結構消費するので集めておいた方が良いです。\n\nとりあえずベッドと物置が出来て動きやすくなったので内装を作りながら再びメインクエストを進めていこうと思います。\n\n# Dawnguardは・・・？\n\n・・・いや、Dawnguard再編の噂は聞いてるんですがなかなかリフテンまで行く用事が無くて絶賛放置中です。\n\nPCで日本語版Dragonbornが出るまでにはなんとか・・・。","key":"playlog2"},"ruby_2_0_0":{"title":"Ruby2.0リリース&amp;20周年おめでとうございます","category":"programming","timestamp":"2013-02-24T23:43:00+09:00","thumbnail":"https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png","body":"えーっとタイトルだけ言いたかっただけです。(爆)\n\nRuby2.0についてはRails4.0の推奨が速くも（というかリリース前から）2.0推奨なので今度インストールしてみようと思います。\n\nというわけで、おやすみなさい。","key":"ruby_2_0_0"},"tn_maintenance":{"title":"トラベラーズノートのお手入れ","category":"stationery","timestamp":"2015-06-29T01:00:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG","body":"恐ろしいことにトラベラーズノート買った時の記事以降、まるでブログの記事を書いてない上にまたトラベラーズノートの記事になります。\n\nというわけで以前買ったトラベラーズノートですが、半年ほど手入れせずに使っていたのでここで一度手入れをしておこうということで、カバーの手入れをしました。\n\n<!-- more -->\n\n## 早速準備\n\n本当はミンクオイルとか革用のオイルやクリームを塗るらしいんですが、あいにくそんな物は持ってない＆買いに行くのも面倒なので手近な代用品がないか探したところ、結構あっさり見つかりました。\n\n<img src=\"https://lh3.googleusercontent.com/-bqFVyra29ys/VZAsssknaQI/AAAAAAAADpY/VvznF8CeZZA/s640/IMG_0105.JPG\" />\n\n安くて万能の呼び声高いニベアのスキンケアクリーム。\n\n肌だけでなく革製品も割とこれでいけるらしいです。\n\n缶だったりチューブだったりしますがコンビニでも普通に売ってるので入手性は抜群。\n\n## 手入れ前の状態\n\n<img src=\"https://lh3.googleusercontent.com/-D8HqpiIsRtU/VZAbYz6ObpI/AAAAAAAADoU/s3s4bXP9J9A/s640/IMG_0100.JPG\" />\n\n手入れ前のカバー。\n\n基本的にはロディアにメモを書いた後そのままデジタル化することも多いのでそんなに使い込んでいるわけではないのですが、それでも結構傷だらけですね。\n\nこれから汚れを拭き取ってクリームを塗っていきます。\n\n## ニベアを塗りたくる\n\n<img src=\"https://lh3.googleusercontent.com/-Yg4ur0tVQq0/VZAmJ1wpRBI/AAAAAAAADoo/q5IZaWm5vQ4/s640/IMG_0101.JPG\" />\n\nクリームを塗ったところ。なんかピンぼけしてますね。\n\nクリーム自体はどんどん吸収されていくので思い切って塗りたくります。\n\nただ半分は自分の手が吸収してるような気もする・・・。\n\n## 完成\n\n<img src=\"https://lh3.googleusercontent.com/-_Et8E9RGtkk/VZAmQ9QigsI/AAAAAAAADow/K0COgTZgFZY/s640/IMG_0104.JPG\" />\n\n最後に乾いた布で軽く拭いておしまい。\n\nだいぶ傷が目立たなくなって手触りも良くなった気がします。\n\nクリームにオイルも含まれているので若干防水効果もあるんじゃないかと思います。\n\n## 感想\n\nとりあえず思ったこと。<strong style=\"font-size:1.5em;color:red;\">ニベアすげー。</strong>","key":"tn_maintenance"},"semantic_grid_system":{"title":"The Semantic Grid System","category":"programming","timestamp":"2012-11-23T18:57:31+09:00","thumbnail":"http://farm6.staticflickr.com/5217/5420762245_548a535ffd_z.jpg","body":"[Bootstrap](http://twitter.github.com/bootstrap/)は私のようなセンスいまいちな開発者でも簡単に見栄えの良いサイトが作れる素晴らしいフレームワークなんですが1点だけ気になって夜も眠れないところがあります。(昨夜は熟睡でした)\n\n<!-- more -->\n\n# 気になるところって?\n気になるところというのは段組を表現するためのGridシステムで、例えばBootstrapで左右に分割したレイアウトにしようと思ったら、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div id=\"navigation\" class=\"span6\"&gt;\n      ～ナビゲーション～\n    &lt;/div&gt;\n    &lt;div id=\"content\" class=\"span6\"&gt;\n      ～コンテンツ～\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\nのようにします。\n\nclass属性に<code>.row</code>とか<code>.span*</code>とか付けてGrid構造を記述していますが、これではHTML内にGridのレイアウトが記述されているため、レイアウトを変えようと思ったらHTMLを変更しないといけません。\n\nまた、特に<code>.row</code>は純粋にGridの行を記述するためのものなので出来れば書きたくありません。\n\nただ、これはCSSを直接使った場合であってGitHubリポジトリから取得すればlessファイルが同梱されています。\n\nこの中に記述されたMixinを使えば任意のCSSセレクタを使ってGridレイアウトを定義できます。\n\n<pre>\n@import \"bootstrap/variables\";\n@import \"bootstrap/mixins\";\n\n.side {\n  .makeColumn(6);\n}\n.main {\n  .makeColumn(6);\n}\n</pre>\n\nこんな感じで記述したlessファイルを<code>lessc</code>コマンドでコンパイルすると<code>.side</code>と<code>.main</code>を指定した要素が<code>.span6</code>を指定したのと同じになります。\n\nで、このスタイルを使用するように書き換えたHTMLは以下のように、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div id=\"navigation\" class=\"side\"&gt;\n      ～ナビゲーション～\n    &lt;/div&gt;\n    &lt;div id=\"content\" class=\"main\"&gt;\n      ～コンテンツ～\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<code>.span6</code>という決め打ちがなくなったので例えば<code>.side</code>の幅を減らして<code>.main</code>を広く取りたいとなったときにスタイルシートを変更するだけで対応できるようになります。\n\n<code>.container</code>や<code>.row</code>についても<code>.container-fixed();</code>、<code>.makeRow();</code>というMixinが定義されているので置き換える事が可能ですが、今回の例では**特に例を思いつかなかったので**そのままです。\n\n<code>.row</code>の存在が何となく気に入らない（おい）以外は固定幅ならこれで問題無く使えるんですがResponsiveな場合や、複雑なレイアウトだと**計算が面倒なので**<code>.row-fluid</code>を使いたいんですが何故か上手くいかずに挫折。\n\nResponsiveな場合はメディアクエリの内容にに応じて<code>@gridColumnWidth</code>と<code>@gridGutterWidth</code>の値を定義してやればいけそうなんですがfluidだけはどうもこれらを%指定にするだけでは駄目らしく上手く動いてくれません。(やり方知ってるよという方是非教えて下さい。)\n\n# ここから本題\nで、これを解決するために何か無いかと探していたら今回のタイトルの[The Semantic Grid System](http://semantic.gs)(以下長いのでURLからsemantic.gs)が見つかったので使ってみました。\n\nこれは何かというと、先ほど出てきた<code>.makeRow();</code>や<code>.makeColumn();</code>のようなGridレイアウトのためのMixin定義で、less, scss, stylの3形式で提供されています。\n\n提供されるMixinは、それぞれ<code>.makeRow();</code>と<code>makeColumn();</code>に対応する<code>.row();</code>と<code>.column();</code>、offsetのための<code>.push();</code>と<code>.pull();</code>です。\n\n<code>.container</code>に相当する物はないので自分で定義する必要がありますが、初期設定では(固定幅なら)Bootstrapの<code>.container</code>がそのまま使えます。\n\nこれを使って先ほどのHTMLとスタイルシートを書き換えてみます。\n\nまずlessファイルから、\n\n<pre>\n@import \"grid\"\n\n.side {\n  .column(6);\n}\n.main {\n  .column(6);\n}\n</pre>\n\nあんまり変わりませんね。次はHTML、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div id=\"navigation\" class=\"side\"&gt;\n    ～ナビゲーション～\n  &lt;/div&gt;\n  &lt;div id=\"content\" class=\"main\"&gt;\n    ～コンテンツ～\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<code>.row</code>が消せました、やったね。サイトのサンプルにあるように複雑なレイアウトだと<code>.row();</code>を使う必要がありますが、簡単なレイアウトなら無くても動作します。\n\nまた、デフォルトでは固定幅ですが、<code>@total-width</code>に<code>100%</code>を指定するとfluid layoutとして動作します。\n\n先ほどのようにBootstrapの<code>.container</code>を使う場合、Responsive\nだと、コンテナの幅がウィンドウ(画面)のサイズによって変わるので、fluid layoutにして追従するようにした方が何かと楽です。\n\n注意点としては、BootstrapではSmartphone向けの表示になると全ての<code>.span*</code>の幅が100%になりますが、semantic.gsではそういう指定は特に入っていないので必要なら自分で指定します。\n\n最初、Bootstrapと競合しないか不安だったんですがある程度考慮して作られているらしく、特に問題無く動いています。\n\nというわけで、<code>.container</code>こそ残っていますが、それ以外はほぼ満足のいく結果になったのでこれからは安眠できそうです。(繰り返しますが昨夜は熟睡でした)","key":"semantic_grid_system"},"t4_tamplate":{"title":"プログラムでプログラムを自動生成する","category":"programming","timestamp":"2013-01-25T19:11:00+09:00","thumbnail":"http://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg/300px-Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg","body":"タイトルと写真でT4 Text Templateの話なんだなと一発で分かりますね。\n\nどうしてこうなったと思わなくもないですが、仕事でプログラムを書いていると時々同じような処理を繰り返し書くという事態に遭遇することがあります。\n\n大抵はスタブやプロパティの転記、Excel定義書からのエンティティクラスの書き起こし等々、元ネタも決まってるので基本的に怠惰(爆)なプログラマーは速攻で自動生成しようとします。\n\nが、周りを見渡すと私のような怠惰な人間はあんまりいないのか結構な頻度で手書きで書いてたりします。\n\nなので何番煎じか分かったもんじゃありませんが、プログラムでプログラムを自動生成する方法について書きたいと思います。\n\n※ちなみに個人的にはExcel定義書に関してはこっちをコードから自動生成したいですが、今回は置いときます。\n\n<!-- more -->\n\n## 基本的な考え方\n例えばExcel定義書からエンティティを書き起こす場合だと、以下のような定義を延々書く羽目になると思います。\n\n※今回はCoffeeScriptじゃなくてC#です。\n\n    /// <summary>\n    /// 社員コード\n    /// </summary>\n    public int EmployeeCode{ get; set; }\n\nこの場合ですとおそらくExcel定義書には名前と型とIDくらいは最低限書いてあるんだと思いますが、項目が100も200もあった日にはC#の自動プロパティで少し楽になった程度では割に合わないくらい手間がかかります。\n\nというか私の場合手で書いたら途中で絶対ミスる。\n\nこの例の場合、\"社員コード\"、\"int\"、\"EmployeeCode\"以外は定型です。\n\nですので、何らかの手段でExcelの中身を読み込めば以下のような処理で出力できます。\n\n※今回Excelのデータを読み込む処理自体は割愛します。\n\n    foreach(Field field in fields){\n      Console.WriteLine(\"/// <summary>\");\n      Console.WriteLine(\"/// {0}\", field.Name);\n      Console.WriteLine(\"/// </summary>\");\n      Console.WriteLine(\"public {0} {1}{{ get; set; }}\", field.Type, field.Id);\n    }\n\nこのように定型の部分を抽出してプログラムで出力しようというのが基本の考え方です。\n\n## T4 Text Template\nで、上記のようにプログラムを書いてもいいんですが、書式が変わる度にいちいちプログラムを再コンパイルするのも面倒です。\n\nなので面倒でないようにVisual Studioにはそのための仕組みが用意されています。それがT4 Text Template。\n\n使い方は簡単。プロジェクトに<code>新しい項目の追加</code>から<code>テキストテンプレート</code>を選んで新規作成します。ちなみに拡張子は.ttです。\n\nT4 Templateに先ほどのプログラムを移植すると以下のようになります。\n\nせっかくなのでクラス定義丸ごと生成するようにしてみました。\n\n    <#@ template debug=\"false\" hostspecific=\"false\" language=\"C#\" #>\n    <#@ assembly name=\"System.Core\" #>\n    <#@ import namespace=\"System.Linq\" #>\n    <#@ import namespace=\"System.Text\" #>\n    <#@ import namespace=\"System.Collections.Generic\" #>\n    <#@ output extension=\".cs\" #>\n    <#\n      /* 項目の定義を取得する */\n    #>\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace foo.dto {\n      public class <#= className#>\n      {\n    <#  Generate(fields, (field)=>{#>\n        /// <summary>\n        /// <#= field.Name #>\n        /// </summary>\n        public <#= field.Type #> <#= field.Id #>{ get; set; }\n    <#});#>\n      }\n    }\n    <#+\n    void Generate<T>( IEnumerable<T> seq, Action<T> action )\n    {\n      foreach( var item in seq ) { action(item); }\n    }\n    #>\n\nざっくり解説すると地の文はそのまま出力され、<code><#= #></code>は変数の中身に置換されます。\n\nまた、<code>&lt;# #&gt;</code>で囲まれた部分はC#のプログラムとして実行されるのでこれを駆使してコードを生成します。\n\n<code><#+ #></code>で囲まれた部分はクラス定義としてメソッド等が定義できます。ここでは<code>Generate</code>という要素の集合を出力するためのメソッドを定義しています。\n\nこの手法は[こちら](http://kazuktnd.wordpress.com/2010/08/13/csproj-user-%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE-t4-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/)で紹介されていて便利なのでそのまま使っています。\n\n<code><#@ assembly name=\"\"#></code>はその名の通りアセンブリでTemplate内でロードするクラスライブラリを指定します。GACに登録されていれば名前を指定するだけで読み込めます。\n\n<code><#@ import namespace=\"\"#></code>は<code>using</code>と同じ意味です。\n\n基本的にC#で出来ることは全部出来るので例えば<code><#@ assembly name=\"\"#></code>で外部のライブラリを使ってExcelファイルを読み込む等々かなり複雑なことまで出来ます。\n\n## まとめ\n\nなかなか日々の作業に追われていると、とにかく数をこなそうと頑張りがちです。\n\nただ、あまりに効率が悪いうえに頑張ったあげくにミスとか悲しすぎるので、**楽しようよ**。(魂の叫び)","key":"t4_tamplate"},"svn_integration":{"title":"SVNリポジトリの統合","category":"programming","timestamp":"2012-07-01T10:39:59+09:00","body":"歴史的経緯からSVNリポジトリそのものが分かれてしまっているものを統合したいことが希にあります。\n\nここでは、分散してしまっているSVNリポジトリをTracやJenkinsから参照しやすいように(できるだけ)履歴付きで統合する方法を書きます。（主にメモとして）\n\n<!-- more -->\n\n####1.旧リポジトリのダンプ\n\ndumpコマンドで旧リポジトリを履歴付きでファイルに書き出します。\n\n    svnadmin dump <旧repositoryパス> > repo_dump\n\n####2.インポートフォルダの作成\n\n旧リポジトリ用のフォルダを作成します。 既に存在している場合は飛ばして構いません。\n\nここではold_repositoriesというフォルダをroot直下に配置していますが、状況に応じて扱いやすい場所に配置して構いません。\n\n    svn mkdir -m \"old repositories.\" <新repositoryパス>/old_repositories <新repositoryパス>/old_repositories\n\nダンプしたリポジトリを読み込むフォルダを作成します。\n\n    svn mkdir -m \"create old repo directory.\" <新repositoryパス>/old_repositories <新repositoryパス>/old_repositories/repo\n\n####3.ダンプファイルのロード\n\nダンプしたファイルを以下のコマンドでロードします。\n\nロード先のフォルダが存在しないと失敗します。 また、svn mkdirとはパスの指定の仕方が違うので注意して下さい。\n\n    svnadmin load <repositoryパス> --parent-dir old_repositories/repo < repo_dump\n\n以上の操作を統合したいフォルダの数だけ実施します。\n\n####4.ロード後の整形\n\n上記の作業が終われば、old_repositories以下にフォルダ別に旧リポジトリがロードされているはずです。\n\nTortoiseSVN等から履歴がきちんと見られるか確認してみて下さい。\n\n無事統合出来ていたら各リポジトリから必要なフォルダやツリーをtrunk,tags,branchesにコピーしてリポジトリの整形を行います。\n\nこの際に移動しても履歴は残りますが、後で思い出した際にtags等を過去のリビジョンから作成することができなくなります。\n\nコピーしても履歴は追跡できますので特に理由がなければ移動ではなくコピーを使って整形して下さい。","key":"svn_integration"},"travelers_note":{"title":"システム手帳からトラベラーズノートに乗り換えてみた","category":"stationery","timestamp":"2014-10-19T16:17:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG","body":"少し前の話なんですが、これまで<a href=\"http://www.raymay.co.jp/davinci/contents/davinci/justrefill/lineup.html\">ダヴィンチのシステム手帳</a>(ジャストリフィルのバイブルサイズ)を使っていたのですが、<del>iPhone6もデカくなったしデカいのがこれから流行るんじゃないか・・・</del>今まで財布と兼用してたけど新しく財布を買ったりなんだりで、必ずしもポケットに入れなくても良くなったので前から気になってた<a href=\"http://www.midori-japan.co.jp/tr/trnotebook/products/\">トラベラーズノート</a>(茶・レギュラーサイズ)を買ってみました。\n\n<!-- more -->\n\n<img src=\"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s400/IMG_0066.JPG\" alt=\"トラベラーズノート\">\n\nチャームとか付けてみた。\n\n表面処理してないので傷はガンガン付きます。ちなみに、ハート型の傷は塚田農場でもらったシールを貼って剥がした痕です。\n\n中身はコクヨの<a href=\"http://www.kokuyo-st.co.jp/stationery/feature/jibun_techo/contents.html#idea\">ジブン手帳の中のIDEA</a>をカットして使ってます。(<a href=\"http://bungu.plus.co.jp/sta/product/note/cacrea/\">Ca.CreaのA4x1/3サイズ</a>にしたかったけどインクの裏写りが酷かったので使えず、残念。)\n\nまあ、殆どの場合、<a href=\"http://www.kokuyo-st.co.jp/stationery/tidbit/\">チビット</a>を貼る台紙と化しているのであんまり関係なかったりはしますが・・・。\n\nこのサイズになると、さすがにポケットには入らないのでメモ帳としてチビットのA7を使ってます。試しに今は横罫カットのものを使ってますが次はブロックのに変える予定。(やっぱりチビットはブロックのが楽しい。)\n\nところで、使ってるとメモ帳にもカバーが欲しくなってきたりするわけですが、チビットのA7ってトラベラーズノートのパスポートサイズに収まるんでしょうか。(チビットってちょっとサイズが変則的なので)\n\nとりあえず今度買って試してみようと思います。\n\n<br />\n<br />\n\n以上、<strong style=\"font-size:1.5em;color:red;\">たまにはプログラミング以外の記事も書くんだぜアピール</strong>でした。","key":"travelers_note"},"zenback_tag":{"title":"zenbackタグを入れてみた","timestamp":"2012-07-21T02:47:25+09:00","body":"zenbackの関連記事の挙動が安定しないので識別用のタグを入れてみた。\n\n<!-- more -->\n\nさしあたって\n\n    <!--zenback_title_begin-->\n    ....\n    <!--zenback_title_end-->\n\nと\n\n    <!--zenback_body_begin-->\n    ....\n    <!--zenback_body_end-->\n\nを設定。これで関連記事のタイトルがちゃんと反映されるかどうか試す。\n\n設定以降の記事について反映になるらしいのでちゃんと反映されるかどうかテスト投稿。","key":"zenback_tag"},"zurui-design":{"title":"ズルいデザインテクニックを取り入れてみた","category":"programming","timestamp":"2012-11-21T19:33:15+09:00","thumbnail":"http://www.lucnix.be/d/169479-2/Pont+du+Gard-+03.jpg","body":"※画像に特に意味はありません。\n\n最近、[ズルいデザインテクニック](https://speakerdeck.com/ken_c_lo/zurui-design)というのが流行っているらしいので流行に便乗してこのブログにも取り入れてみました。ズルいですね。\n\n<!-- more -->\n\n## ズルい付箋\n基本は[こちらのサイト](http://www.paulund.co.uk/creating-different-css3-box-shadows-effects)のCSSと同じ構造ですが背景に単色でなくズルいグラデーションを使用しています。\n\nあとは立体感を出すためにぼけ足の長い影を足しています。これは先ほどのサイトのEffect6～8で使われていますね。スライドでも紹介されています。\n## ズルい背景\n背景画像はスライドにある[Subtle Patterns](http://subtlepatterns.com/)の画像を使用しています。\n\n記事の背景になっている紙のスタイルは付箋と同じテクニックで影付け+ここでも立体感を出すために画像の上からぼけ足の長い影を足しています。\n\n## ズルい線、ズルい影\nその他、ズルい線やズルい影は色々なところで使われています。\n\n使ってる箇所が多いのでスライドにもあるようにMixin化して使っています。(私はbootstrap+lessを使ってるのでbootstrap+lessで作りました)\n\n## ズルい感想&larr;?\nやって見ると思いの外簡単に見栄えを良くすることが出来ました。ズルいですね。\n\n個人的に好みなのはズルい線とズルいグラデーションです。特にグラデーションは言われないと入ってるか入ってないか微妙なくらい薄くてもいざ削ると印象が大きく変わります。\n\nというわけで今回はブログのCSSを更新した事をネタに記事を更新するというズルい回をお送りしました。","key":"zurui-design"}},"category":{"uncategorized":[{"title":"Coffee-scriptでBlogツールもどき","timestamp":"2012-06-15T23:56:06+09:00","body":"せっかくなので練習がてら何かしようと言うことで作ってみました。\n\n    タイトル\n    以下、本文。\n\nという感じのMarkdown形式のテキストを保存するとHTMLに変換し、jadeテンプレートを当てて公開フォルダに保存するというだけの簡単なツールです。\n\n.mdファイルの保存先をDropboxにしてるのでローカルやiPhoneからテキストを保存するだけで勝手に同期されて定期的に変換するように処理しています。","key":"20120615"},{"title":"記事の追加","timestamp":"2012-06-18T19:40:22+09:00","body":"タイムスタンプを追加したのでソートされてると良いなと.","key":"20120618"},{"title":"テスト","timestamp":"2012-06-30T19:14:48+09:00","body":"VPSが再起動したぽいので投稿テスト。","key":"20120630"},{"title":"Facebookコメントも試す","timestamp":"2012-07-04T01:40:49+09:00","body":"というわけでコメントツールシリーズ第3弾。\n\n最近身の回りでやたらとFacebookが流行り始めたので実はこれでいいんじゃないかという説もあります。\n\n<!-- more -->\n使い方は簡単。\n\n[facebook DEVELOPERSサイト](https://developers.facebook.com/docs/reference/plugins/comments/)へアクセスして必要な項目を設定、Get Codeボタンを押して埋め込み用のコードを取得します。\n\n取得したコードをサイトのテンプレートに埋め込んでやれば使えるようになります。\n\nあ、BlogとかだとURLはちゃんと記事のURLを自動で埋めるようにしないと多分おかしげな事になると思います。\n\nというわけで、試しに貼り付けたのがこちら。\n\nさすがにzenbackと一緒に貼るとめちゃくちゃ重いですね。\n\n<div id=\"fb-root\"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/ja_JP/all.js#xfbml=1\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));</script>\n\n<div class=\"fb-comments\" data-href=\"http://www.sevenspirals.net/20120701.html\" data-num-posts=\"3\"></div>\n\n#### 追記\n何故か幅が100%にならなかったのでCSSで無理矢理100%にしてみた。","key":"20120701"},{"title":"ごっそり構造変えた","timestamp":"2012-07-02T21:23:52+09:00","body":"本体のスクリプト処理を変えてみました。\n\n本体の仕事は処理すべきファイルの一覧と設定の読み込みだけであとはプラグインにどんどん投げていって最終的にHTMLを吐き出すという形に変更。\n\n記事を作るのもテンプレートに当てるのもアーカイブするのもぜーんぶプラグインの仕事。・・・あれ、これ何のツールだっけ?＜待て\n\n何となく最終的に（好きだからとかそんな理由で）Blosxomみたいな形になりそうな気がしますが今のところ比較にならないくらいこっちのがダサいので順次直していきます。\n\n続きを読むプラグインとアーカイブプラグインを作ったので次はカテゴリとコメント欄をプラグイン化するかなー。\n\nあとCoffeepressという名前はあまりにもアレなのでちゃんとした名前を考えたい。","key":"20120702"},{"title":"30分後にzenbackを入れてみた","timestamp":"2012-06-30T22:15:34+09:00","body":"色々入れ替えて検討中。\n\nソーシャルボタンをわざわざ自分で置かなくて良いからこっちのが楽かも。\n\nただ機能が多い分ちょっと重い？","key":"20120630_3"},{"title":"DISQUSを追加してみた","timestamp":"2012-07-04T14:41:20+09:00","body":"コメントシステムにDISQUSを追加してみた。\nzenbackやfacebookコメントとかとも比較してみてどれを使うか決める。\n\nところで記事によっては文字化けするけど何でやろ。\n\n<!-- more -->\n\n<div id=\"disqus_thread\"></div>\n  <script type=\"text/javascript\">\n    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */\n    var disqus_shortname = 'sevenspiralsblog'; // required: replace example with your forum shortname\n\n    /* * * DON'T EDIT BELOW THIS LINE * * */\n    (function() {\n      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n      dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n    })();\n  </script>\n  <noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n  <a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>","key":"20120630_2"},{"title":"zenbackタグを入れてみた","timestamp":"2012-07-21T02:47:25+09:00","body":"zenbackの関連記事の挙動が安定しないので識別用のタグを入れてみた。\n\n<!-- more -->\n\nさしあたって\n\n    <!--zenback_title_begin-->\n    ....\n    <!--zenback_title_end-->\n\nと\n\n    <!--zenback_body_begin-->\n    ....\n    <!--zenback_body_end-->\n\nを設定。これで関連記事のタイトルがちゃんと反映されるかどうか試す。\n\n設定以降の記事について反映になるらしいのでちゃんと反映されるかどうかテスト投稿。","key":"zenback_tag"}],"programming":[{"title":"XLSX.jsをnode.jsから使えるようにした","category":"programming","timestamp":"2012-10-19T09:35:48+09:00","body":"javascriptから.xlsxファイルを読み書きできるXLSX.jsをnode.jsから簡単に使えるようにWrapp(?)してみました。\n\n\n<!-- more -->\n\n\nXLSX.jsについては以下を参照。\n\n[JavaScriptでXLSX形式を扱う「XLSX.js」 - MOONGIFT](http://www.moongift.jp/2012/10/20121017-3/)\n\n導入は、node.jsとnpmが入っている前提で以下のコマンド。\n\n    npm install https://github.com/syaku/node-xlsx/tarball/master\n\n使い方は元のXLSX.jsと同じで例えば以下のようにするとA1:100, B1:200と記入されたoutput.xlsxが生成されます。\n\nここまでnode.jsと言っときながらまさかのCoffeeScriptです。\n\n    xlsx = require 'node-xlsx'\n    fs = require \"fs\"\n\n    file =\n      worksheets: [[]]\n      creator: 'syaku'\n      activeWorksheet: 0\n\n    w = file.worksheets[0]\n    r = w.push([]) - 1\n    w[r].push 100\n    w[r].push 200\n\n    bin = new Buffer(xlsx(file).base64, \"base64\")\n    fs.writeFileSync(\"output.xlsx\", bin)\n\n罫線や細かい属性は指定できないようですがnode.jsで作成したWEBアプリ等でお手軽にExcelに出力したいという用途には十分使えるのではないでしょうか。\n\n今回作ったソースのリポジトリは以下にアップロードしてあります。\n\n[https://github.com/syaku/node-xlsx/](https://github.com/syaku/node-xlsx/)\n\nというわけで、読み込みについては次の記事で。","key":"20121019_1"},{"title":"node.jsからTracを操作する(ための下準備)","category":"programming","timestamp":"2012-11-02T12:01:00+09:00","thumbnail":"http://www.lucnix.be/d/121732-2/Bouteilles+de+couleurs.jpg","body":"しばらく前の話になりますが、Trac Lightningのバージョン3あたりからTraMが同梱されなくなりました。\n\n個人で使う分には別に問題無いんですが、会社で使う場合だと大抵複数のプロジェクトが同時に走っており、それに応じて1人が関わっているプロジェクトも複数あるという場合が珍しくありません。\n\nで、各プロジェクトが完全に独立していれば良いんですがまあ、そんなわけもなくプロジェクトを横断してチケットを集計したレポートが欲しいという話が出てきます。\n\n<!-- more -->\n\nそういうときにTracのプラグインを作ってもいいんですが、出来れば慣れた（というかマイブームの）CoffeeScriptで書きたい。\n\n特にチケットの集計だけで良いならTrac Lightningには最初からXMLRPCプラグインが入っているのでそいつ経由でデータを抽出することが出来ます。\n\nそこで、node.jsでXMLRPCが扱えるライブラリはないかと探したところ、*node-xmlrpc*というそのものずばりな物があったので使ってみたのですがBASIC認証には対応している物のDigest認証に対応していませんでした。\n\nTrac Lightningは普通に入れるとDigest認証なのでこのままでは接続できません。\n\nで、(探せば見つかりそうな気もするけど)ない物は作れというわけでnode-xmlrpcをDigest認証に対応させました。\n\nかなりざっくりな上にTracとの接続しか試してませんが以下のようにすることでTracのXMLRPCメソッドが呼び出せます。\n\n    xmlrpc = require 'xmlrpc'\n    options =\n      host: \"example.com\"\n      port: 80\n      path: \"/trac/hogehoge/login/xmlrpc\"\n      digest_auth:\n        user: \"foo\"\n        pass: \"bar\"\n\n    client = xmlrpc.createClient(options)\n    client.methodCall 'ticket.get', [id], (err, ticket)->\n      console.log ticket\n\nこれでチケットの情報は一通り抜けるのであとはプロジェクト毎に定期的に取得してDBに格納するなりして集計を行います。\n\n今回改造を加えたソースは以下のリポジトリにアップしてあります。\n\n<a href='https://github.com/syaku/node-xmlrpc'>https://github.com/syaku/node-xmlrpc</a>","key":"20121102_1"},{"title":"MOGOK上にRailsアプリを構築する(Windows編)","category":"programming","timestamp":"2012-10-31T12:47:11+09:00","thumbnail":"https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png","body":"IIJが提供するRuby PaaSのMOGOKがオープンβサービスを開始したので早速MOGOK上にアプリケーションを構築してみたいと思います。\n\n最初ということで基本的にはMOGOKのサイトのチュートリアルをなぞる形で進めていきます。\n\nで、何を作るかですが、こういうのはコンソールアプリはHello World、WEBサービスはToDoリストを作るのが伝統らしい(嘘)のでその伝統に従って今回はToDoリストを作ってみたいと思います。\n\n<!-- more -->\n\n#### SDKインストール\n\nまず何はなくとも開発環境をインストールしないといけないんですが、Windowsに関して言えばインストーラを実行するだけでRubyからRailsからMySQLからコマンドラインツールまで全部入ります。簡単ですね。\n\nSDKのインストールが完了すると、スタートメニューに\"MOGOK Windows Client Packages\"というのが追加されているのでその中の\"msys.bat\"を実行するとツール等にパスが通った状態のコンソールが立ち上がります。作業は基本的にこのコンソール上で行います。\n\n#### Railsアプリのひな形を作る\n\nコンソールを立ち上げるといきなり/binフォルダだったりするんでまずは適当な場所に作業用のフォルダを作成します。\n\n日本語ユーザー名でもちゃんと動くかは試してませんがわかりやすいところと言うことで今回はDocumentsフォルダの配下にrails_appsフォルダを作成してその中で作業することにします。\n\n    $ mkdir rails_apps\n    $ cd rails_apps\n\n作業フォルダに入ったらまずRailsアプリケーションのひな形を作ります。アプリケーション名は今回はmogok-todoとします。\n\n    $ rails new mogok-todo -d mysql\n    ～大量の出力～\n    is installed.\n\nコンソールにどばーっと出力されますが、特にエラーっぽい表示がなければひな形の作成は成功です。＜おおざっぱ\nひな形を作成したら次はGemfileを編集します。18行目辺りの、\n\n    # gem 'therubyracer', :platforms => :ruby\n\n上記のコメントアウトを外します。\n\nMOGOKサイトのチュートリアルではさらっと流していますが**therubyracer**はV8のJavaScriptインタプリタをrubyの中に突っ込んじまおうというライブラリらしいです。\n\nMOGOKで使われているRailsは3.2.8なので3.1から採用されたcoffee-scriptとかの為かなーと思いますがすいません、Rails自体久々に触ったのでまだよく分かってません。（爆）\n\n*:platforms => :ruby*はC Rubyの場合のみインストールという指定ですね。JRubyとかではちゃんと動かないらしい。\n\nGemfileを書き換えたらインストールをしないといけないので以下のコマンドでインストールします。が、その前にMySQLのサービスを起動します。私の環境ではSDKインストール直後ではサービスは起動していませんでした。\n\nただし、これまた私の環境ではサービスが動いていても*#&lt;Mysql2::Error: Can't connect to MySQL server on 'localhost' (10061)&gt;*というエラーが出たので**database.yml**のhost指定を*localhost*から*127.0.0.1*へ書き換えました。\n\n無事MySQLが動いていれば以下のコマンドを実行。\n\n    $ cd mogok-todo\n    $ bundle install\n    $ rake db:create:all\n\nここでエラーが出なければひな形の作成は終了です。\n\n#### アプリケーションを作り込む\n\nここからはRailsアプリを作り込んでいきますが、あんまり複雑なのを作っても仕方ないので単純にタイトルと終了フラグを持つだけのモデルを作成します。\n\nまずは*rails generate*コマンドでモデル、コントロール、ビューのひな形を作成します。\n\n    $ rails generate scaffold task titie:string done:boolean\n    $ rake db.migrate\n\n基本的なCRUDの処理はこれで出来てしまう&amp;余りにも公式チュートリアルそのままだとまずいので<a href='http://twitter.github.com/bootstrap/'>Twitter Bootstrap</a>を使ってViewをもう少しかっこよくしましょう。\n\n公式サイトから*bootstrap.zip*をダウンロードしてきてその中の*cssフォルダ*と*imgフォルダ*をpublicフォルダにコピーします。\n\nそして、BootstrapのCSSを使うために*app/views/layouts/application.html.erb*を以下のように書き換えます。\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>ToDoリスト</title>\n        <%= stylesheet_link_tag    \"/css/bootstrap.min.css\" %>\n        <%= stylesheet_link_tag    \"application\", :media => \"all\" %>\n        <%= javascript_include_tag \"application\" %>\n        <%= csrf_meta_tags %>\n      </head>\n      <body>\n        <div class='container'>\n          <%= yield %>\n        </div>\n      </body>\n    </html>\n\nただ、標準でsass-railsが入ってるので実際にはsass-rails-bootstrapとか使った方がカスタマイズもやりやすいと思います。\n\nあとはBootstrapの書式に従ってビューを順次書き換えや細かな機能を実装していきます。\n\nそうしてできあがったのが<a href='http://mogok-todo-007.ruby.iijgio.com/tasks'>こちら</a>になります。\n\n完了は削除というワイルド仕様です。\n\nいくらRailsアプリの作成自体は本題じゃないと言ってももうちょっと真面目に作れと自分でも思います。はい。\n\n最後にproduction環境でstaticなファイルを扱うために*config/environments/production.rb*の以下の値を*false*から*true*に書き換えます。\n\n    config.server_static_assets = true\n\n#### Gitリポジトリの作成\n\nMOGOKにデプロイするためにGitリポジトリを作成します。\n\nこの段階ではまだローカルリポジトリの操作なので普通にgitコマンドでリポジトリを作成します。\n\n    $ git init\n    $ git add .\n    $ git commit -m \"first commit\"\n\n特にここでエラーが出ることはないと思いますが以下のコマンドでリポジトリのステータスを確認します。\n\n    $ git status\n\n正常なら下記のような表示がコンソールに出力されます。\n\n    # On branch master\n    nothing to commit (working directory clean)\n\n#### MOGOKにデプロイする\n\nいよいよクラウドにデプロイします。\n\nコンソール上でMOGOKの操作を行うには<code>mogok</code>コマンドを使用します。\n\nとりあえずおもむろに<code>$ mogok -v</code>でバージョン確認。\n\n現時点では1.0.0となっているはずです。\n\n<code>$ mogok list</code>でアプリケーションの一覧が取得できます。まだ何も登録していなければ何も表示されません。\n\n初回実行時はログインIDとパスワードを聞かれるはずなのでユーザー登録の際に登録したIDとパスワードを入力して下さい。\n\nで、本番。下記のコマンドでMOGOKクラウド上にアプリケーションを登録します。\n\n    $ mogok create mogok-todo-XXXX\n\nアプリケーション名は全体でユニークな必要があるのでXXXXの部分を適当な文字列にするなり全く違う名前を付けるなりして下さい。\n\n成功するとGitのリモートリポジトリが登録されるので、<code>$ git remote -v</code>でちゃんと登録されているか確認して下さい。上手くいっているようであれば<code>$ git push mogok master</code>でリモートリポジトリにプッシュ。\n\n#### ビルドして実行する\n\nプッシュが成功したら、<code>$ mogok build</code>でビルドして実行します。\n\n\n割と時間がかかりますが、ビルドが終わったら普通のRailsアプリと同じようにdb:migrateを行います。\n\nコマンドは以下のようにmogokコマンドから呼び出します。\n\n    $ mogok rake db:migrate\n\nmigrateも正常に終わったら<code>$ mogok start</code>でアプリケーションを開始します。\n\n正常に起動したら、<code>$ mogok info</code>を実行して表示されるURLにアクセスして動作を確認します。\n\n#### 使ってみての感想\n\n開発環境の構築やデプロイが一発で出来るのはさすがに楽です。\n\n作ってる途中のはまりどころは、単純に私がRailsに慣れてないからですがrails newの際に-d mysqlを付け忘れてはまったり、config.server_static_assetsを書き換え忘れてはまったりしました。\n\n個人的にはマイブームはCoffeeScriptなのでHerokuのある状況でRailsしかないのはどうなのとか少しは思いますが、日本語の情報やサポートもありますし、正式版の価格次第ですがRails使うつもりなら選択肢としては良いんじゃないかと思います。","key":"20121030_1"},{"title":"AWS SDK for JavaScriptでS3でファイル操作","category":"programming","timestamp":"2013-12-01T15:15:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"ブラウザ単体でAmazon AWSのS3やDynamoDBやSQSなんかを操作できるAWS SDK for Javascriptが公開されたので使ってみました。\n\n<!-- more -->\n\n# 基本はNode.js用SDKと同じ\n扱い方は基本的にNode.js用のSDKと同じで対応していないサービスはクラスが実装されていないので扱えないという感じです。\n\nなのでどっちか覚えてればサーバーサイドの実装もブラウザ側での実装も両方割と簡単に対応出来ます。\n\n# 誰でも読み書きできるコメント欄的な物を作ってみる\n\n本当はGoogle+やFacebook認証を使ったりするんでしょうが今回は認証のないコメント欄的なものをS3を使って作りたいと思います。\n\n## IAMコンソールでユーザーを作成する\n\nまず、IAMコンソールでアプリに使うユーザーを作成します。\n\nここで作成したユーザーの<code>ARN</code>と<code>Access Key ID</code>と<code>Secret Access Key</code>は後でアプリから使うのでコピーしておきます。\n\n![](https://lh5.googleusercontent.com/-dz4YJ6Z1ZVM/UpJIKQw517I/AAAAAAAABu8/zwUUBGJQYok/s640/capture1.png)\n\nユーザーを作成したらS3のバケットを操作できるようにパーミッションを設定します。\n\n設定内容は以下のような感じ。<code>BUCKET_NAME</code>はアプリで使用するバケット名を記述します。\n\nここでは指定バケットに対してS3の全てのアクションを許可しています。\n\nここで例えばReadだけ不許可にすることで外部からファイルを受け取るためのアップローダーを作るということも出来そうです。\n\n    {\n      \"Version\": \"2013-11-24\",\n      \"Statement\": [\n        {\n          \"Action\": [\n            \"s3:*\"\n          ],\n          \"Resource\": [\n            \"arn:aws:s3:::BUCKET_NAME\"\n          ],\n          \"Effect\": \"Allow\"\n        }\n      ]\n    }\n\n## バケットを作成する\n\nS3のコンソールでバケットを作成します。\n\nここでもパーミッションを設定しますが基本的にユーザー作成時に指定した内容と同じです。\n\n先ほどコピーしておいた<code>ARN</code>をここで記述します。\n\n    {\n      \"Version\": \"2013-11-24\",\n      \"Statement\": [\n        {\n          \"Sid\": \"\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"AWS\": \"<IAMで作ったユーザーのARN>\"\n          },\n          \"Action\": \"s3:*\",\n          \"Resource\": \"arn:aws:s3:::BUCKET_NAME/*\"\n        }\n      ]\n    }\n\nパーミッションを設定したら次はCORS(Cross-Origin Resource Sharing)の設定をします。\n\n初期値ではGETしか許可されていないのでPUTも許可するようにします。\n\nまた、今回の場合、Access KeyとSecretをソースに埋め込むので<code>AllowedOrigin</code>を指定しないとどこからでも操作できて多分えらい目に遭います。\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n        <CORSRule>\n            <AllowedOrigin>http://www.exmaple.com/</AllowedOrigin>\n            <AllowedMethod>GET</AllowedMethod>\n            <AllowedMethod>PUT</AllowedMethod>\n            <MaxAgeSeconds>3000</MaxAgeSeconds>\n            <AllowedHeader>*</AllowedHeader>\n            <AllowedHeader>Authorization</AllowedHeader>\n        </CORSRule>\n    </CORSConfiguration>\n\n\n## サンプルコード\n\nとりあえず初期化処理です。\n先ほど作成したAccess KeyとSecretを設定し、S3クラスを初期化します。\n\n    var messageGet, messagePost, s3;\n\n    AWS.config.update({\n      accessKeyId: '***********************',\n      secretAccessKey: '**********************************'\n    });\n\n    s3 = new AWS.S3({\n      region: 'ap-northeast-1',\n      maxRetries: 15\n    });\n\nAWSへのリクエストは非同期で行われるので同期処理するためにJsDeferredも初期化。\n\n    Deferred.define();\n\nで、実際の初期化処理がこちら。\nバケット名とKey(ファイル名みたいなもの)とContentTypeとBody(ファイルの中身)を設定して<code>putObject</code>を呼び出します。\n\n呼び出し後は非同期で実行され、何らかの理由で失敗したらerrが成功したらresultが指定されてコールバックされます。\n\n    messagePost = function() {\n      var key, params;\n      key = new Date().getTime().toString();\n      params = {\n        Bucket: 'BUCKET_NAME'\n        Key: key,\n        ContentType: 'text/plain',\n        Body: $(\"#message\").val()\n      };\n      return s3.putObject(params, function(err, result) {\n        if (err) {\n          return console.log(err);\n        } else {\n          return console.log(data);\n        }\n      });\n    };\n\n読み込みも簡単です。\nバケット名とKeyを指定して<code>getObject</code>関数を呼び出します。\nコールバックは書き込みと同じで失敗すればerrが成功すればdataにファイルの情報がセットされ返ってきます。\n\nここではBodyの中身を文字列化してJsDeferredに渡しています。\n\n    messageGet = function(key) {\n      var deferred;\n      deferred = new Deferred();\n      s3.getObject({\n        Bucket: 'BUCKET_NAME',\n        Key: key\n      }, function(err, data) {\n        return deferred.call(data.Body.toString());\n      });\n      return deferred;\n    };\n\n起動時処理。\n<code>listObjects</code>関数でバケット内のファイルの一覧を取得し順番に<code>messageGet</code>関数を呼んでファイルの中身を取得してリストに詰めています。\n\n全部取り終わってからコンソールに吐き出すようにJsDeferredを使っています。(実際にはloopじゃなくてparallelのがいいと思う)\n\n    $(function() {\n      return s3.listObjects({\n        Bucket: 'BUCKET_NAME'\n      }, function(error, data) {\n        var result;\n        if (error) {\n          return console.log(error);\n        } else {\n          result = [];\n          return Deferred.loop(data.Contents.length, function(i) {\n            return messageGet(data.Contents[i].Key).next(function(data) {\n              return result.push(data);\n            });\n          }).next(function() {\n            // 実際には投稿日順で並び替えたりする\n            return console.log(result);\n          });\n        }\n      });\n    });\n\n## 感想のような物\n\nこのブログは静的HTMLを吐いてS3に配置していますがこんな感じのちょっとしたツールに簡単にDBやファイル保存の機能を付加できるのは大変夢が広がって面白いです。\n\nただ、出来る事がすごく増えるわけではないので別に既存のサーバーサイド処理を置き換えるものではなく、別の要件でサーバーを立てるならサーバーサイドでやった方が良いんじゃないかと思います。\n\n逆に全くの新造なら全部これを使ってサーバーを立てないというサービスもあっても良いんじゃ無いかとも思ったのでとりあえずこのブログを実験台に色々試してみたいと思います。(まずはzenbackに頼ってる機能の置き換えかな)","key":"aws_javascript_sdk"},{"title":"XLSX.jsでnode.jsからxlsxファイルを読む","category":"programming","timestamp":"2012-10-28T11:17:43+09:00","body":"というわけで前回の続きです。\n\n今回は既にあるxlsxファイルを読み込んでnode.jsから操作します。\n\n<!-- more -->\n\n内容としては前回の出力処理の逆をやれば良いだけです。\n\nここでは前回作成したxlsxファイルを\"input.xlsx\"として読み込んでみます。\n\nXLSX.js単体でxlsxファイルを読み込むときは、\n\n    new xlsx(&lt;base64文字列&gt;)\n\nとなるので、node.jsではfs.readFileで読み込んだBufferオブジェクトをtoString(\"base64\")で変換して渡してやります。\n\n    xlsx = require 'node-xlsx'\n\n    fs = require \"fs\"\n\n    buf = fs.readFileSync(\"input.xlsx\")\n\n    # base64にエンコードしてから読み込み\n    book = new xlsx(buf.toString(\"base64\"))\n\n    console.log JSON.stringify(book)\n\nこのサンプルを実行すると以下のような出力が得られます。\n\n    {\"worksheets\":[[[100,200]]],\"zipTime\":17,\"creator\":\"syaku\",\"lastModifiedBy\":\"XLSX.js\",\"created\":\"2012-10-27T14:05:56.857Z\",\"modified\":\"2012-10-27T14:05:56.857Z\",\"activeWorksheet\":0,\"processTime\":0}\n\nちゃんとJSONオブジェクトになっていますね。\n\nあとはこれを好きなように操作して画面に表示するもよし、ファイルに書き出したい時は前回の手順でファイルに出力します。","key":"20121027_2"},{"title":"Node.jsとMongoDBとElasticsearchで日本語全文検索","category":"programming","timestamp":"2013-09-16T05:45:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"MongoDBのver2.4から全文検索が導入されたので使ってみようと思ったんですが、やっぱりというか日本語には対応していなかった・・・。\n\n何か悔しいのでElasticsearchでMongoDBのコレクションを日本語全文検索する環境を構築してみました。\n\n<!-- more -->\n\n# Elasticsearchのインストール\n\n何はともあれElasticsearchのインストールですが、Macならbrewで簡単にインストールできます。\n\nちなみにWindowsでも適当な場所にzipを展開するだけです。\n\n    $ brew install elasticsearch\n\nで、起動。今回は試しながらなので-fオプションを付けてフォアグラウンドで起動します。\n\n    $ elasticsearch -f\n\n特にエラーが出なければ実際にアクセスしてみます。\n\nelasticsearchはREST APIでやりとりするのでcurlコマンドでリクエストを投げます。\n\nまずはテスト用のIndexを作成します。\n\n    $ curl -XPUT 'http://localhost:9200/test'\n\n実行した結果、<code>{\"ok\":true,\"acknowledged\":true}</code>のようなレスポンスが返ってくれば成功です。\n\nついでに分析リクエストも投げてみますがこの時点では日本語は正しく分析できません。\n\n    $ curl -XGET 'http://localhost:9200/test/_analyze?pretty' -d '東京都渋谷区'\n    /*{\n      \"tokens\" : [ {\n        \"token\" : \"東\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 1,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 1\n      }, {\n        \"token\" : \"京\",\n        \"start_offset\" : 1,\n        \"end_offset\" : 2,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 2\n      }, {\n        \"token\" : \"都\",\n        \"start_offset\" : 2,\n        \"end_offset\" : 3,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 3\n      }, {\n        \"token\" : \"渋\",\n        \"start_offset\" : 3,\n        \"end_offset\" : 4,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 4\n      }, {\n        \"token\" : \"谷\",\n        \"start_offset\" : 4,\n        \"end_offset\" : 5,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 5\n      }, {\n        \"token\" : \"区\",\n        \"start_offset\" : 5,\n        \"end_offset\" : 6,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 6\n      } ]\n    }*/\n\n## プラグインの追加\n\nまずは日本語の全文検索ができるようにkuromojiの分析プラグインをインストールします。\n\nインストールはコマンド一発で簡単にできます。\n\n    $ plugin -install elasticsearch/elasticsearch-analysis-kuromoji/1.5.0\n\nで、今回はMongoDBのCollectionを全文検索したいのでそれ用のプラグインもインストールします。\n\nelasticsearch-river-mongodbプラグインのインストールは他と同じような書き方にするとURLが見つからずインストールできなかったので直接githubを指定しました。\n\n    $ plugin -install elasticsearch/elasticsearch-mapper-attachments/1.8.0\n    $ plugin -i com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/1.7.0\n\n特にエラーが出なければインストールは完了です。\n\n## kuromojiのテスト\n\nまずアナライザにkuromojiを指定して日本語の構文解析が出来るようになっているか確認します。\n\n    $ curl -XGET 'http://localhost:9200/test/_analyze?analyzer=kuromoji&pretty' -d '東京都渋谷区'\n    /*{\n      \"tokens\" : [ {\n        \"token\" : \"東京\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 2,\n        \"type\" : \"word\",\n        \"position\" : 1\n      }, {\n        \"token\" : \"都\",\n        \"start_offset\" : 2,\n        \"end_offset\" : 3,\n        \"type\" : \"word\",\n        \"position\" : 2\n      }, {\n        \"token\" : \"渋谷\",\n        \"start_offset\" : 3,\n        \"end_offset\" : 5,\n        \"type\" : \"word\",\n        \"position\" : 3\n      }, {\n        \"token\" : \"区\",\n        \"start_offset\" : 5,\n        \"end_offset\" : 6,\n        \"type\" : \"word\",\n        \"position\" : 4\n      } ]\n    }*/\n\n最後にデフォルトでkuromojiを使うようにelasticsearch.ymlに以下の行を追加します。\n\n    index.analysis.analyzer.default.type: custom\n    index.analysis.analyzer.default.tokenizer: kuromoji_tokenizer\n\n# MongoDBの設定\n\nMongoDBからIndexを作成するelasticsearch-river-mongodbプラグインはReplicaSetを構築した際に作成されるoplog.rsコレクションを利用するのでReplicaSetを構築する必要があります。\n\n構築自体は1台構成でもいいのでmongoのコンソールから<code>rs.initiate()</code>を実行します\n\nしばらく待つと構築が終わるので<code>rs.config()</code>で結果を確認します。\n\n最後にElasticsearch側でCollectionとIndexの関連付けを行います。(DB名やIndex名は実際に使う名前を指定します)\n\n    $ curl -XPUT 'http://localhost:9200/_river/mongodb/_meta' -d '{\n      \"type\": \"mongodb\",\n      \"mongodb\": {\n        \"db\": \"DATABASE_NAME\",\n        \"collection\": \"COLLECTION\",\n        \"gridfs\": true\n      },\n      \"index\": {\n        \"name\": \"ES_INDEX_NAME\",\n        \"type\": \"ES_TYPE_NAME\"\n      }\n    }'\n\nこの時点でElasticsearchを再起動すると<code>NoShardAvailableActionException</code>という例外が出るんですが何故出るのか分からず調査中。検索自体は普通に出来ます。\n\n# Node.jsから呼び出す\n\n設定が終わってしまえばあとはMongoose等で普通にデータの追加や削除を行えばほぼタイムラグ無しにElasticsearch側に反映されます。\n\nElasticsearch側のインタフェースはREST APIなので普通にNode.jsからHTTPリクエストを投げれば良いんですがその辺をラップしてくれるライブラリがあります。\n\nまずはインストール\n\n    $ npm install elasticsearch\n\nサンプルとして以下のようなSchemaのコレクションを検索する処理を書きます。\n\n    {\n      subject: String\n      body: String\n    }\n\n例によってCoffeeScriptですがsubjectとbodyに対してキーワード検索するにはこんな感じで書きます。\n\n    log4js = require 'log4js'\n    logger = log4js.getLogger()\n    elasticsearch = require 'elasticsearch';\n    es = elasticsearch {_index: 'index_name', _type: 'type_name'}\n\n    search = (keyword, callback)->\n      es.search {query:{multi_match:{query: keyword, fields:['subject', 'body']}}}, callback\n\n    search('日本語全文検索', (err, data)->\n      if err\n        logger.error err\n      else\n        logger.debug data\n    )\n\nという感じで日本語全文検索出来るようにしただけで力尽きたので今日はここまで。\n\nそのうちこれを使って何か作ってみたいと思います。\n\n# 今日使った諸々のリンク\n\n* [Elasticsearch](http://www.elasticsearch.org/)\n  * [elasticsearch-analysis-kuromoji](https://github.com/elasticsearch/elasticsearch-analysis-kuromoji)\n  * [elasticsearch-river-mongodb](https://github.com/richardwilly98/elasticsearch-river-mongodb)\n* [MongoDB](http://www.mongodb.org/)\n* [Node.js](http://nodejs.org/)\n  * [node-elasticsearch](https://github.com/ncb000gt/node-elasticsearch)","key":"elastic_search"},{"title":"Google Readerが終わるそうなので","category":"programming","timestamp":"2013-05-01T10:10:15+09:00","thumbnail":"//farm4.staticflickr.com/3365/3541653049_a3e8534a8e_o.jpg","body":"7月にGoogle Readerがサービス終了とのことですが、個人的には使いまくってるのでちょっと困ります。\n\nそこで一念発起して**ちょうどGW入ったし今から作り始めれば自分が使いよいのが作れるだろう**ということで大まかに作ってみました。\n\n<!-- more -->\n\nというわけで、作りかけのサイトが[こちら](http://www.sevenspirals.net:3001/)。\n\n開発中なので常時動かしてるわけではありませんが。\n\nちなみにport3000にアクセスするとちょっとしたホラーが。\n\nあとは既読の記事は非表示にする機能と登録したFeedの変更削除が出来れば自分が最低限使いたい機能は揃うのでGoogle Readerから離脱しつつこっちの機能追加をしていこうと思います。\n\n・・・というかなんで個人用なのに認証機能付けたんだ。＜自分","key":"feed_reader"},{"title":"WPFでMVVMパターン(1)","category":"programming","timestamp":"2013-01-26T13:03:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"今更という感じはかなりしますが、[今こそWPF!](http://www.slideshare.net/Yamaki/wpfwpf)というわけでWPFとMVVMのお勉強を始めました。\n\n今回は第1回ということでMVVMについて勉強したことのまとめです。\n\n<!-- more -->\n\n## WPFって？\n.NET Framework3.0から追加されたUIシステムで、Direct3Dを介して描画することでGPU支援が受けられます。\n\nまた、ベクトルグラフィックスで拡大縮小が出来たりXPSフォーマットをサポートしており、画面に表示されている内容そのまま印刷出来るらしいです。(印刷はまだ試したことないっす)\n\nそしてWPFのUIはXAMLで記述され、ロジックが記述されたソースコードと完全に切り離すことが出来ます。また、コントロールの見た目を大きくカスタマイズ出来るため、見た目を変えるためにわざわざユーザーコントロールを作って、と言うことは殆どしなくてよくなります。\n\nこのロジックとUIを切り離せるというのが今回の肝ですね。\n\n## MVVMって？\nMVCパターンの派生パターンの一種で、元々はViewとロジックの分離というMVCの思想をWPFやSilverlightで実現するために生まれた考え方です。(直接の親はPresentation Modelパターンですけど)\n\n従来のMVCパターンではControllerはViewへの入力をイベントとして受け取ってModelのメソッドを呼んでロジックを実行していました。\n\n図にすると以下のような感じ。\n\n---\n\n![](http://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/ModelViewControllerDiagram2.svg/313px-ModelViewControllerDiagram2.svg.png)\n\nImage By [Wikipedia](http://ja.wikipedia.org/wiki/Model_View_Controller)\n\nただ、Controllerは入力に対する応答としてViewを操作することはありますが、ロジックの実行で変更されたModelの状態については関知しないのでViewはModelの変更を監視(イベントで通知する事もありますが)し、自身の描画を更新する必要がありました。\n\nここで問題になるのがViewがModelの変更を監視して自身の描画を更新するというところで、例えば\"金額がマイナスになったら文字を赤くする\"等のロジックをどうするかです。\n\n画面に依存する問題なのでModelに持たせるのは変なのでまあ、Viewに持たせるわけですが、Viewにロジックを持たせてしまうとテストが大変です。\n\nそこで、画面に表示する状態を持つPresentation Modelという役割を追加してViewは文字の色もModelのプロパティもボタンを操作した際のイベントすらもデータバインディングで自動的に反映するだけで済むようにすればModelを監視しなくて良いしViewとロジックを完全に分離できるよね。というのがMVVMの親になったPresentation Modelパターンの考え方です。\n\nMVVMを図にするとこんな感じ。(Presentation Modelもほぼ同じ)\n\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png\">\n\nImage By [Wikipedia](http://ja.wikipedia.org/wiki/Model_View_ViewModel)\n\nデータバインディングで自動的にというのが重要でこの仕組みを全部手書きで実現すると手間がかかりすぎてViewとロジックは分離できるかも知れませんが肝心のロジックを書く時間等大事な物を失ってしまいそうです。なのでWPFというかMVVMに手を出すときはデータバインディング(或いはその類似技術)重要。\n\nMVVMとPresentation Modelの違いは、MVVMはそこからさらに進んでWPFやSilverlightはViewを完全にXAMLだけで記述することでViewを完全に抽象化出来る(ViewModelに対して複数のViewを切り替えられる)ことで、なのでXAMLのような技術が無く、Viewを完全に抽象化出来ないMVVMパターンはPresentation Modelパターンと変わらないらしいです。\n\n---\n\n## まとめ\n* MVVMはMVCの一種てPresentation Modelの子供\n* MVCではView絡みのロジックの受け入れ先がないという問題を解決するためにPresentation Model(他の派生パターンも)が生まれた\n* プロパティもイベントも状態も自動的に反映する。データバインディング重要\n* MVVMとPresentation Modelはほぼ一緒だけどWPFのMVVMはViewを抽象化できる\n\nWPFが見当たりませんが(おい)、まとめるとこんな感じでしょうか、次回からは実際にVisualStudioでModel、View、ViewModelを作っていこうと思います。\n\n## 参考\n* [今さらWPF？いいえ、今こそWPF！](http://www.slideshare.net/Yamaki/wpfwpf)\n* [「MVVMパターンが必要な理由」啓蒙用資料公開](http://ugaya40.net/mvvm/mvvm_document.html)\n* [MVCパターン@Wikipedia](http://ja.wikipedia.org/wiki/Model_View_Controller)\n* [MVVMパターン@Wikipedia](http://ja.wikipedia.org/wiki/Model_View_ViewModel)","key":"mvvm_1"},{"title":"WPFでMVVMパターン(2) - Model編","category":"programming","timestamp":"2013-02-17T13:26:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"というわけで[前回](/2013/01/26/mvvm_1/)に引き続いてMVVMネタです。\n\n今回はModelを作ります。\n\n<!-- more -->\n\n# とりあえずModelから\n\nどういう順番で作るのが正解なのかよく分かりませんが、私はだいたいModelから作り始めます。\n\n理由は単純で**Modelは絶対必要だから**。\n\n他の要素、ViewModelだけで無く(GUI的な)Viewも絶対必要とは考えません。この時点ではConsoleアプリケーションから呼び出して使うつもりで作りはじめます。その方がテストが書きやすい(気がする)ので。\n\nだいたい、それ以外の機能はView作ってみて機能が足りなかったらViewModelに押しつけりゃいいというのが私の考えです。(いい加減)\n\n# さくっとコーディング\n\nModel作成の時点では特にMVVMパターンだからどうという作法はあまりないので好きに作ります。＜おい\n\nというわけでVisual StudioでWPFアプリケーションを作成して下記のクラスを追加しました。\n\n## Model.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.ComponentModel;\n    using System.Collections.ObjectModel;\n\n    namespace MVVM\n    {\n        public class Model : INotifyPropertyChanged\n        {\n            ObservableCollection<DetailModel> _details;\n            public ObservableCollection<DetailModel> Details\n            {\n                get { return _details; }\n            }\n\n            public event PropertyChangedEventHandler PropertyChanged;\n\n            public Model()\n            {\n                _details = new ObservableCollection<DetailModel>();\n            }\n\n            public void Order()\n            {\n                /* なんらかの注文ぽい処理をするのだと思われる */\n\n                foreach (DetailModel detail in _details)\n                {\n                    Console.WriteLine(\"Key:{0}\\\\tCode:{1}\\\\tName:{2}\\\\tPrice:{3}\\\\tCount:{4}\", detail.Key, detail.Code, detail.Name, detail.Price, detail.Count);\n                }\n            }\n        }\n    }\n\n## DetailModel.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.ComponentModel;\n\n    namespace MVVM\n    {\n        public class DetailModel :INotifyPropertyChanged\n        {\n            public Guid _key;\n            public Guid Key\n            {\n                get\n                {\n                    return _key;\n                }\n            }\n\n            public string _code;\n            public string Code\n            {\n                get\n                {\n                    return _code;\n                }\n                set\n                {\n                    if (!string.IsNullOrEmpty(value) && !value.Equals(_code))\n                    {\n                        _code = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Code\"));\n                    }\n                }\n            }\n\n            public string _name;\n            public string Name\n            {\n                get\n                {\n                    return _name;\n                }\n                set\n                {\n                    if (!string.IsNullOrEmpty(value) && !value.Equals(_name))\n                    {\n                        _name = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Name\"));\n                    }\n                }\n            }\n\n            public decimal _price;\n            public decimal Price\n            {\n                get\n                {\n                    return _price;\n                }\n                set\n                {\n                    if (_price != value)\n                    {\n                        _price = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Price\"));\n                    }\n                }\n            }\n\n            public uint _count;\n            public uint Count\n            {\n                get\n                {\n                    return _count;\n                }\n                set\n                {\n                    if (_count != value)\n                    {\n                        _count = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Count\"));\n                    }\n                }\n            }\n\n            public event PropertyChangedEventHandler PropertyChanged;\n\n            public DetailModel()\n            {\n                _key = Guid.NewGuid();\n                _code = \"\";\n                _name = \"\";\n                _price = 0;\n                _count = 0;\n            }\n\n            public DetailModel(string code, string name, decimal price, uint count)\n            {\n                _key = Guid.NewGuid();\n                this.Code = code;\n                this.Name = name;\n                this.Price = price;\n                this.Count = count;\n            }\n        }\n    }\n\n明細モデル（ただのデータオブジェクトですが）のコレクションと注文の操作を持つModelですけど長いよ・・・。\n\n普通に何も考えずに書くときとの違いは、Modelの操作によってプロパティが更新された際にViewModelに通知する事を考えて、<code>INotifyPropertyChanged</code>を継承していることと同じくコレクションの変更を通知できるように<code>List&lt;T&gt;</code>ではなく、<code>ObservableCollection&lt;T&gt;</code>を使っているところでしょうか。\n\nただまあ、このパターンだと操作した結果、値が変わるような事は無さそうなのでアレですが。\n\n# Consoleアプリで実行\nModel単体では実行できないのでConsoleアプリを作って実行してみます。\n\nソリューションにConsoleアプリケーションのプロジェクトを追加して、先ほど作ったWPFプロジェクトを参照に追加します。\n\nそこに先ほど作ったModelを呼び出すコードを追加します。こんな感じ。\n\n## Program.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace TestConsole\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                var model = new MVVM.Model();\n\n                model.Details.Add(new MVVM.DetailModel(\"A001\", \"リンゴ\", 100, 1));\n                model.Details.Add(new MVVM.DetailModel(\"A002\", \"みかん\", 80, 3));\n\n                model.Order();\n\n                Console.Read();\n            }\n        }\n    }\n\nで、おもむろに実行。出力は以下のようになりました。\n\n    Key:e2c9eec2-5b90-4072-a646-c1136ee458b9       Code:A001      Name:リンゴ      Price:100      Count:1\n    Key:1e28e2fe-9574-4238-bb16-c7013ab698ec       Code:A002      Name:みかん      Price:80       Count:3\n\nまあ、さすがにちゃんと動いてるようですね。\n\n今回は単純なModel&amp;手を抜いてConsoleアプリで実行してますが、実際にはNUnit等でちゃんとしたテストを書いてJenkinsで実行するといいと思います。というかしましょう。私含めて。＜やってないのかよ\n\n特にリグレッションテストってある日突然情熱に目覚めて、やろう。と思ってもいざやると機能を追加する度にやることが加速度的に増えて心が折れがちです。\n\nなのでロジックの部分をあらかじめテストしやすいように作るのが大事なんだと思います。\n\n<br/>\n\nというところで今回はここまで。次回はViewModel・・・をすっ飛ばしてViewを作ろうと思います。","key":"mvvm_2"},{"title":"Ruby2.0リリース&amp;20周年おめでとうございます","category":"programming","timestamp":"2013-02-24T23:43:00+09:00","thumbnail":"https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png","body":"えーっとタイトルだけ言いたかっただけです。(爆)\n\nRuby2.0についてはRails4.0の推奨が速くも（というかリリース前から）2.0推奨なので今度インストールしてみようと思います。\n\nというわけで、おやすみなさい。","key":"ruby_2_0_0"},{"title":"The Semantic Grid System","category":"programming","timestamp":"2012-11-23T18:57:31+09:00","thumbnail":"http://farm6.staticflickr.com/5217/5420762245_548a535ffd_z.jpg","body":"[Bootstrap](http://twitter.github.com/bootstrap/)は私のようなセンスいまいちな開発者でも簡単に見栄えの良いサイトが作れる素晴らしいフレームワークなんですが1点だけ気になって夜も眠れないところがあります。(昨夜は熟睡でした)\n\n<!-- more -->\n\n# 気になるところって?\n気になるところというのは段組を表現するためのGridシステムで、例えばBootstrapで左右に分割したレイアウトにしようと思ったら、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div id=\"navigation\" class=\"span6\"&gt;\n      ～ナビゲーション～\n    &lt;/div&gt;\n    &lt;div id=\"content\" class=\"span6\"&gt;\n      ～コンテンツ～\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\nのようにします。\n\nclass属性に<code>.row</code>とか<code>.span*</code>とか付けてGrid構造を記述していますが、これではHTML内にGridのレイアウトが記述されているため、レイアウトを変えようと思ったらHTMLを変更しないといけません。\n\nまた、特に<code>.row</code>は純粋にGridの行を記述するためのものなので出来れば書きたくありません。\n\nただ、これはCSSを直接使った場合であってGitHubリポジトリから取得すればlessファイルが同梱されています。\n\nこの中に記述されたMixinを使えば任意のCSSセレクタを使ってGridレイアウトを定義できます。\n\n<pre>\n@import \"bootstrap/variables\";\n@import \"bootstrap/mixins\";\n\n.side {\n  .makeColumn(6);\n}\n.main {\n  .makeColumn(6);\n}\n</pre>\n\nこんな感じで記述したlessファイルを<code>lessc</code>コマンドでコンパイルすると<code>.side</code>と<code>.main</code>を指定した要素が<code>.span6</code>を指定したのと同じになります。\n\nで、このスタイルを使用するように書き換えたHTMLは以下のように、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div id=\"navigation\" class=\"side\"&gt;\n      ～ナビゲーション～\n    &lt;/div&gt;\n    &lt;div id=\"content\" class=\"main\"&gt;\n      ～コンテンツ～\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<code>.span6</code>という決め打ちがなくなったので例えば<code>.side</code>の幅を減らして<code>.main</code>を広く取りたいとなったときにスタイルシートを変更するだけで対応できるようになります。\n\n<code>.container</code>や<code>.row</code>についても<code>.container-fixed();</code>、<code>.makeRow();</code>というMixinが定義されているので置き換える事が可能ですが、今回の例では**特に例を思いつかなかったので**そのままです。\n\n<code>.row</code>の存在が何となく気に入らない（おい）以外は固定幅ならこれで問題無く使えるんですがResponsiveな場合や、複雑なレイアウトだと**計算が面倒なので**<code>.row-fluid</code>を使いたいんですが何故か上手くいかずに挫折。\n\nResponsiveな場合はメディアクエリの内容にに応じて<code>@gridColumnWidth</code>と<code>@gridGutterWidth</code>の値を定義してやればいけそうなんですがfluidだけはどうもこれらを%指定にするだけでは駄目らしく上手く動いてくれません。(やり方知ってるよという方是非教えて下さい。)\n\n# ここから本題\nで、これを解決するために何か無いかと探していたら今回のタイトルの[The Semantic Grid System](http://semantic.gs)(以下長いのでURLからsemantic.gs)が見つかったので使ってみました。\n\nこれは何かというと、先ほど出てきた<code>.makeRow();</code>や<code>.makeColumn();</code>のようなGridレイアウトのためのMixin定義で、less, scss, stylの3形式で提供されています。\n\n提供されるMixinは、それぞれ<code>.makeRow();</code>と<code>makeColumn();</code>に対応する<code>.row();</code>と<code>.column();</code>、offsetのための<code>.push();</code>と<code>.pull();</code>です。\n\n<code>.container</code>に相当する物はないので自分で定義する必要がありますが、初期設定では(固定幅なら)Bootstrapの<code>.container</code>がそのまま使えます。\n\nこれを使って先ほどのHTMLとスタイルシートを書き換えてみます。\n\nまずlessファイルから、\n\n<pre>\n@import \"grid\"\n\n.side {\n  .column(6);\n}\n.main {\n  .column(6);\n}\n</pre>\n\nあんまり変わりませんね。次はHTML、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div id=\"navigation\" class=\"side\"&gt;\n    ～ナビゲーション～\n  &lt;/div&gt;\n  &lt;div id=\"content\" class=\"main\"&gt;\n    ～コンテンツ～\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<code>.row</code>が消せました、やったね。サイトのサンプルにあるように複雑なレイアウトだと<code>.row();</code>を使う必要がありますが、簡単なレイアウトなら無くても動作します。\n\nまた、デフォルトでは固定幅ですが、<code>@total-width</code>に<code>100%</code>を指定するとfluid layoutとして動作します。\n\n先ほどのようにBootstrapの<code>.container</code>を使う場合、Responsive\nだと、コンテナの幅がウィンドウ(画面)のサイズによって変わるので、fluid layoutにして追従するようにした方が何かと楽です。\n\n注意点としては、BootstrapではSmartphone向けの表示になると全ての<code>.span*</code>の幅が100%になりますが、semantic.gsではそういう指定は特に入っていないので必要なら自分で指定します。\n\n最初、Bootstrapと競合しないか不安だったんですがある程度考慮して作られているらしく、特に問題無く動いています。\n\nというわけで、<code>.container</code>こそ残っていますが、それ以外はほぼ満足のいく結果になったのでこれからは安眠できそうです。(繰り返しますが昨夜は熟睡でした)","key":"semantic_grid_system"},{"title":"プログラムでプログラムを自動生成する","category":"programming","timestamp":"2013-01-25T19:11:00+09:00","thumbnail":"http://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg/300px-Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg","body":"タイトルと写真でT4 Text Templateの話なんだなと一発で分かりますね。\n\nどうしてこうなったと思わなくもないですが、仕事でプログラムを書いていると時々同じような処理を繰り返し書くという事態に遭遇することがあります。\n\n大抵はスタブやプロパティの転記、Excel定義書からのエンティティクラスの書き起こし等々、元ネタも決まってるので基本的に怠惰(爆)なプログラマーは速攻で自動生成しようとします。\n\nが、周りを見渡すと私のような怠惰な人間はあんまりいないのか結構な頻度で手書きで書いてたりします。\n\nなので何番煎じか分かったもんじゃありませんが、プログラムでプログラムを自動生成する方法について書きたいと思います。\n\n※ちなみに個人的にはExcel定義書に関してはこっちをコードから自動生成したいですが、今回は置いときます。\n\n<!-- more -->\n\n## 基本的な考え方\n例えばExcel定義書からエンティティを書き起こす場合だと、以下のような定義を延々書く羽目になると思います。\n\n※今回はCoffeeScriptじゃなくてC#です。\n\n    /// <summary>\n    /// 社員コード\n    /// </summary>\n    public int EmployeeCode{ get; set; }\n\nこの場合ですとおそらくExcel定義書には名前と型とIDくらいは最低限書いてあるんだと思いますが、項目が100も200もあった日にはC#の自動プロパティで少し楽になった程度では割に合わないくらい手間がかかります。\n\nというか私の場合手で書いたら途中で絶対ミスる。\n\nこの例の場合、\"社員コード\"、\"int\"、\"EmployeeCode\"以外は定型です。\n\nですので、何らかの手段でExcelの中身を読み込めば以下のような処理で出力できます。\n\n※今回Excelのデータを読み込む処理自体は割愛します。\n\n    foreach(Field field in fields){\n      Console.WriteLine(\"/// <summary>\");\n      Console.WriteLine(\"/// {0}\", field.Name);\n      Console.WriteLine(\"/// </summary>\");\n      Console.WriteLine(\"public {0} {1}{{ get; set; }}\", field.Type, field.Id);\n    }\n\nこのように定型の部分を抽出してプログラムで出力しようというのが基本の考え方です。\n\n## T4 Text Template\nで、上記のようにプログラムを書いてもいいんですが、書式が変わる度にいちいちプログラムを再コンパイルするのも面倒です。\n\nなので面倒でないようにVisual Studioにはそのための仕組みが用意されています。それがT4 Text Template。\n\n使い方は簡単。プロジェクトに<code>新しい項目の追加</code>から<code>テキストテンプレート</code>を選んで新規作成します。ちなみに拡張子は.ttです。\n\nT4 Templateに先ほどのプログラムを移植すると以下のようになります。\n\nせっかくなのでクラス定義丸ごと生成するようにしてみました。\n\n    <#@ template debug=\"false\" hostspecific=\"false\" language=\"C#\" #>\n    <#@ assembly name=\"System.Core\" #>\n    <#@ import namespace=\"System.Linq\" #>\n    <#@ import namespace=\"System.Text\" #>\n    <#@ import namespace=\"System.Collections.Generic\" #>\n    <#@ output extension=\".cs\" #>\n    <#\n      /* 項目の定義を取得する */\n    #>\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace foo.dto {\n      public class <#= className#>\n      {\n    <#  Generate(fields, (field)=>{#>\n        /// <summary>\n        /// <#= field.Name #>\n        /// </summary>\n        public <#= field.Type #> <#= field.Id #>{ get; set; }\n    <#});#>\n      }\n    }\n    <#+\n    void Generate<T>( IEnumerable<T> seq, Action<T> action )\n    {\n      foreach( var item in seq ) { action(item); }\n    }\n    #>\n\nざっくり解説すると地の文はそのまま出力され、<code><#= #></code>は変数の中身に置換されます。\n\nまた、<code>&lt;# #&gt;</code>で囲まれた部分はC#のプログラムとして実行されるのでこれを駆使してコードを生成します。\n\n<code><#+ #></code>で囲まれた部分はクラス定義としてメソッド等が定義できます。ここでは<code>Generate</code>という要素の集合を出力するためのメソッドを定義しています。\n\nこの手法は[こちら](http://kazuktnd.wordpress.com/2010/08/13/csproj-user-%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE-t4-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/)で紹介されていて便利なのでそのまま使っています。\n\n<code><#@ assembly name=\"\"#></code>はその名の通りアセンブリでTemplate内でロードするクラスライブラリを指定します。GACに登録されていれば名前を指定するだけで読み込めます。\n\n<code><#@ import namespace=\"\"#></code>は<code>using</code>と同じ意味です。\n\n基本的にC#で出来ることは全部出来るので例えば<code><#@ assembly name=\"\"#></code>で外部のライブラリを使ってExcelファイルを読み込む等々かなり複雑なことまで出来ます。\n\n## まとめ\n\nなかなか日々の作業に追われていると、とにかく数をこなそうと頑張りがちです。\n\nただ、あまりに効率が悪いうえに頑張ったあげくにミスとか悲しすぎるので、**楽しようよ**。(魂の叫び)","key":"t4_tamplate"},{"title":"SVNリポジトリの統合","category":"programming","timestamp":"2012-07-01T10:39:59+09:00","body":"歴史的経緯からSVNリポジトリそのものが分かれてしまっているものを統合したいことが希にあります。\n\nここでは、分散してしまっているSVNリポジトリをTracやJenkinsから参照しやすいように(できるだけ)履歴付きで統合する方法を書きます。（主にメモとして）\n\n<!-- more -->\n\n####1.旧リポジトリのダンプ\n\ndumpコマンドで旧リポジトリを履歴付きでファイルに書き出します。\n\n    svnadmin dump <旧repositoryパス> > repo_dump\n\n####2.インポートフォルダの作成\n\n旧リポジトリ用のフォルダを作成します。 既に存在している場合は飛ばして構いません。\n\nここではold_repositoriesというフォルダをroot直下に配置していますが、状況に応じて扱いやすい場所に配置して構いません。\n\n    svn mkdir -m \"old repositories.\" <新repositoryパス>/old_repositories <新repositoryパス>/old_repositories\n\nダンプしたリポジトリを読み込むフォルダを作成します。\n\n    svn mkdir -m \"create old repo directory.\" <新repositoryパス>/old_repositories <新repositoryパス>/old_repositories/repo\n\n####3.ダンプファイルのロード\n\nダンプしたファイルを以下のコマンドでロードします。\n\nロード先のフォルダが存在しないと失敗します。 また、svn mkdirとはパスの指定の仕方が違うので注意して下さい。\n\n    svnadmin load <repositoryパス> --parent-dir old_repositories/repo < repo_dump\n\n以上の操作を統合したいフォルダの数だけ実施します。\n\n####4.ロード後の整形\n\n上記の作業が終われば、old_repositories以下にフォルダ別に旧リポジトリがロードされているはずです。\n\nTortoiseSVN等から履歴がきちんと見られるか確認してみて下さい。\n\n無事統合出来ていたら各リポジトリから必要なフォルダやツリーをtrunk,tags,branchesにコピーしてリポジトリの整形を行います。\n\nこの際に移動しても履歴は残りますが、後で思い出した際にtags等を過去のリビジョンから作成することができなくなります。\n\nコピーしても履歴は追跡できますので特に理由がなければ移動ではなくコピーを使って整形して下さい。","key":"svn_integration"},{"title":"ズルいデザインテクニックを取り入れてみた","category":"programming","timestamp":"2012-11-21T19:33:15+09:00","thumbnail":"http://www.lucnix.be/d/169479-2/Pont+du+Gard-+03.jpg","body":"※画像に特に意味はありません。\n\n最近、[ズルいデザインテクニック](https://speakerdeck.com/ken_c_lo/zurui-design)というのが流行っているらしいので流行に便乗してこのブログにも取り入れてみました。ズルいですね。\n\n<!-- more -->\n\n## ズルい付箋\n基本は[こちらのサイト](http://www.paulund.co.uk/creating-different-css3-box-shadows-effects)のCSSと同じ構造ですが背景に単色でなくズルいグラデーションを使用しています。\n\nあとは立体感を出すためにぼけ足の長い影を足しています。これは先ほどのサイトのEffect6～8で使われていますね。スライドでも紹介されています。\n## ズルい背景\n背景画像はスライドにある[Subtle Patterns](http://subtlepatterns.com/)の画像を使用しています。\n\n記事の背景になっている紙のスタイルは付箋と同じテクニックで影付け+ここでも立体感を出すために画像の上からぼけ足の長い影を足しています。\n\n## ズルい線、ズルい影\nその他、ズルい線やズルい影は色々なところで使われています。\n\n使ってる箇所が多いのでスライドにもあるようにMixin化して使っています。(私はbootstrap+lessを使ってるのでbootstrap+lessで作りました)\n\n## ズルい感想&larr;?\nやって見ると思いの外簡単に見栄えを良くすることが出来ました。ズルいですね。\n\n個人的に好みなのはズルい線とズルいグラデーションです。特にグラデーションは言われないと入ってるか入ってないか微妙なくらい薄くてもいざ削ると印象が大きく変わります。\n\nというわけで今回はブログのCSSを更新した事をネタに記事を更新するというズルい回をお送りしました。","key":"zurui-design"}],"tools":[{"title":"SparkleShareをさくらVPS上のGitoliteで利用する","category":"tools","timestamp":"2012-10-31T23:52:59+09:00","thumbnail":"https://lh3.googleusercontent.com/-2v5ozfDRdnU/UJ4v5n49YoI/AAAAAAAAA8M/_cxaKYy1pYM/s800-Ic42/Sparkleshare-gnome.png","body":"新プランに移行してから大幅にストレージの容量が増えましたが特に使い道も無く盛大に余っていたのでどうにかしてこれを有効利用出来ないか、というわけで導入済みのGitoliteを使ってSparkleShareをインストールしてみました。\n\nまだ使い始めなのでどのくらい安定しているかは分かりませんが、Gitリポジトリなので履歴が見れますしDropboxのように冗長化はされませんが、ローカルリポジトリに分散することを考えるとまあ、普通の用途なら問題無いかなと。\n\n何より大容量で安価に使えるのが良いです。\n\n<!-- more -->\n\n# SparkleShareって?\n\nGitリポジトリを経由してファイルを共有するDropboxみたいなツールです。\n\nリポジトリフォルダを監視してファイルの追加、削除、編集が行われると片っ端からコミット・プッシュします。\n\nsshで接続できるGitリポジトリなら何でも使えるのでGitHub上のリポジトリを使って共有することも出来ますが、さすがにフルオープンはあれなのでさくらVPS上に構築したGitolite環境にリポジトリを作って使います。\n\n# SparkleShareクライアントのインストール\n\n![](/img/attached/sparkleshare1.png)\n\nインストーラからクライアントソフトをインストールします。ここでは特に分岐はありませんがインストール後に名前とメールアドレスを入力します。\n\n（多分）お一人様だと余り関係ありませんがリポジトリを共有した際に誰が編集したか識別するためと、Gravatarからアバターの取得を行っているようです。\n\nここまで終わると公開キーが生成されます。これは後で使いますので控えておいて下さい。\n\n# Gitリポジトリの用意\n\nGitoliteのインストールから書くと結構複雑で大変なのでそれは導入済みということで進めます。\n\ngitolite-adminの設定を編集してSparkleShare用のリポジトリを作成し、先ほど生成されたキーをkeydirに追加し、SparkleShareからアクセス出来るようにして下さい。\n\n# SparkleShare側の設定\n\n![](/img/attached/sparkleshare2.png)\n\nリポジトリを用意したらSparkleShareに登録します。\n\nタスクトレイアイコンのメニューから、*Add hosted project...*を選択すると上のようなダイアログが開きます。\n\n自前のリポジトリを使う場合は一番上の*On my own server*を選択し、*Address*と*Remote Path*を入力します。\n\n*Address*はGitoliteのアカウントがgitだとすると、*git@example.com*、*Remote Path*には先ほど作成したリポジトリ名を入力し、Addボタンで追加します。\n\n上手くいくとユーザープロファイル直下のSparkleShareフォルダ内にリポジトリがクローンされますので適当なファイルを書き込んで自動的にプッシュされれば成功です。\n\n公式サイト: <a href='http://sparkleshare.org/'>sparkleshare.org</a>","key":"20121031_1"},{"title":"さくらVPS上のCentOSにDockerをインストールした","category":"tools","timestamp":"2014-08-14T00:14:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"Dockerというコンテナ型の仮想化ソフトがありまして、以前(確かまだポートが固定出来なかった頃)にVirtualBox上で試したんですが、色々バージョンアップを重ね1.0も(割と前に)出たので実際に使おうということで(本当はUbuntuが推奨環境のはずですが)さくらVPSのCentOS上にインストールしてみました。\n\n<!-- more -->\n\n# まずEPELのインストール\n\nDockerのパッケージはEPELリポジトリにあるのでまずEPELをインストールします。\n\n既にインストールしていることも多いと思いますので導入済みならスキップしても構いません。\n\n    $ wget http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm\n    $ sudo rpm -ivh epel-release-6-8.noarch.rpm\n\n特に問題無く成功すると思います。\n\n標準のリポジトリと追加リポジトリの優先順位を細かく設定したい場合は<code>yum-priorities</code>をインストールすることで優先順位の制御が出来ます。\n\n# docker-ioのインストール\n\n無事EPELのインストールが終わったら次はDocker本体のインストールを行います。\n\nパッケージ名はdocker-ioになるので、yumコマンドでインストールします。\n\n    $ sudo yum install docker-io\n\nまた、起動時に自動で立ち上がるように設定しておきます。\n\n    $ sudo service docker start\n    $ sudo chkconfig docker on\n\nインストールそのものはこれで完了です。\n\n# イメージの作成\n\n準備は整ったので仮想環境のイメージを作りたいと思います。\n\nとりあえず、CentOS上で動かしてるサービスを移設したいのでCentOSのイメージを作ります。\n\n既にCentOSのベースになるイメージは存在してるので<code>docker pull</code>コマンドでダウンロードします。\n\n    $ sudo docker pull centos:latest\n\nダウンロードが終わったら<code>docker images</code>コマンドで実際に作成されていることを確認します。\n\n    $ sudo docker images centos\n    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n    centos              latest              b157b77b1a65        2 weeks ago         243.7 MB\n\n上記のような感じになってたら成功です。\n\n\n# 実行\n\nイメージが作られたのでおもむろに実行。\n\nとりあえず今回はコンテナ名は特に指定せずに実行します。\n\n    $ sudo docker run -i -t centos /bin/bash\n\nするとこんなエラーが出てしまいました。\n\n<pre><samp>2014/08/10 14:38:36 Error: Cannot start container 6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a: write /cgroup/devices/docker/6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a/cgroup.procs: invalid argument</samp></pre>\n\n調べたところ、CentOS6の場合、Kernelのバージョンが2.6.32-431以上でないと動かない模様。\n\nというか普通に見落としてました。すいません。\n\nというわけで<code>sudo yum update</code>でまとめて更新。\n\n    $ sudo yum update\n\n更新が終わったら再び実行。仮想環境上のbashに入れれば成功です。\n\n初回なのでコンテナ作成も同時に行っていますがそれでも一瞬で起動します。\n\nここがDockerの良いところ。\n\nというわけで、入れ物は出来たので次からは今動いているサーバーをどんどんDocker上に移行していきます。","key":"docker_install"},{"title":"CentOS6上のDockerにCentOS7を入れたらはまった","category":"tools","timestamp":"2014-08-16T22:45:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"前回、さくらVPS上のCentOS6にDockerをインストールしましたが、その際にコンテナイメージを<code>centos:latest</code>から作ったため、ホストはCentOS6、ゲスト(っていうのか?)はCentOS7という状態になってました。\n\nそのまま、その環境でhttpdやらを入れてたんですが、サービスが起動できずにドはまりしました。\n\n<!-- more -->\n\nRHEL7系からはサービスの起動がsystemdとsystemctlが採用されておりそのため起動方法が/etc/rc.d/init.d/配下の起動スクリプトじゃなくなってます。\n\nなので<code>systemctl</code>コマンドで有効化して起動しようとすると下記のようなエラーが出てしまいます。\n\n    bash-4.2# systemctl enable httpd.service\n    ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'\n    bash-4.2# systemctl start httpd.service\n    Failed to get D-Bus connection: No connection to service manager.\n\nGoogle先生で調べるが、よく分からない・・・。ホスト側がsystemdで管理されていないのがまずいぽい?\n\nまあ、そもそもホスト側がCentOS6なのがアカン気がするし、その後の移行作業でも問題が出そうな気がするので元にするイメージを<code>centos:centos6</code>と指定してコンテナ上もCentOS6になるようにして逃げました。","key":"docker_install2"},{"title":"VPS内のLAMP環境をDockerコンテナに移行する","category":"tools","timestamp":"2014-08-18T01:32:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"[前回](/2014/08/14/docker_install/ \"さくらVPS上のCentOSにDockerをインストールした\")、Dockerをインストールしコンテナを作れることを確認したので実際にVPSに入っているLAMP環境をDockerコンテナに移行したいと思います。\n\n<!-- more -->\n\n# Dockerfileの作成\n\n[Docker Hub](https://registry.hub.docker.com/ \"Docker Hub\")を探せばいろんな人が作ったLAMP環境のイメージがあるんですが、Chefとかと同じで自前で作った方が良いということでDockerfileからイメージを作ることにします。\n\n今回作ったのは下記の通り、\n\n    FROM centos:centos6\n\n    MAINTAINER syaku\n\n    RUN yum install -y initscripts MAKEDEV sudo\n\n    RUN yum check\n\n    RUN yum update -y\n\n    RUN yum install -y openssh-server\n\n    RUN useradd -d /home/vagrant -m -s /bin/bash vagrant\n    RUN echo vagrant:{パスワード}| chpasswd\n    RUN echo 'vagrant ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n    RUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\n    RUN sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config\n\n    RUN yum install -y tar gzip\n\n    RUN yum install -y gcc make\n    RUN yum install -y perl perl-CPAN perl-CGI\n    RUN rpm -Uvh ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/csbuild:/Perl/CentOS_CentOS-6/noarch/perl-Jcode-2.07-1.4.noarch.rpm\n\n    RUN yum install -y httpd\n    RUN yum install -y mysql-server\n    RUN yum install -y php php-mysql php-mbstring\n\n    RUN chkconfig sshd on\n    RUN chkconfig httpd on\n    RUN chkconfig mysqld on\n\n    RUN /etc/init.d/sshd start\n    RUN /etc/init.d/mysqld start\n    RUN /etc/init.d/httpd start\n\n    EXPOSE 80\n\n    CMD [\"/sbin/init\"]\n\n通常のLAMP環境に加え、perlのCGIをいくつか動かしていたのでperlを、既存環境のファイルをやりとりするためtarとgzipをインストールしています。\n\nそのほかには、コンテナ管理にVagrantを使うことにしたので、<code>vagrant ssh</code>するためにsshをインストールしています。\n\nこうやっておくと<code>vagrant ssh</code>した際にパスワードを入力するだけでコンテナにアクセスすることが出来るのでIP調べなくていい分、若干楽です。\n\n# コンテナ管理にVagrantを使ってみる\n\nコンテナ管理には(個人的に慣れてるので)Vagrantを使用しますが、VagrantからDockerを操作するにはVer1.6以上が必要なのでインストールしていない場合はインストールします。\n\nインストールはrpmコマンド一発です。\n\n    $ sudo rpm -Uvh https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.rpm\n\nインストールが終わったらDockerfileと同じ場所にVagrantfileを作ります。\n\n今回作ったVagrantfileはこんな感じ、\n\n    Vagrant.configure(\"2\") do |config|\n        config.vm.provider \"docker\" do |d|\n            d.build_dir = \".\"\n        end\n        config.vm.network :forwarded_port, guest: 80, host: 8080\n    end\n\n内容としてはカレントディレクトリのDockerfileをビルドして80番ポートをホスト側の8080ポートに紐付けます。\n\nで、両方整ったらコマンド叩いて起動します。\n\n    $ vagrant up --provider=docker\n\n最初はイメージのビルドを行うので結構時間がかかります。\n\n正常に終わったら、\n\n    $ vagrant ssh\n\nと叩いてログインできるか確認します。\n\nログインできたらついでにちゃんとサービスが起動しているか確認します。\n\n# せっせと移行する\n\n入れ物ができあがったらあとは既存の環境からファイルやらDBのダンプやらをコンテナ環境に持ってきて移行作業を行います。\nVagrantを使っている関係でVagrantfileがあるディレクトリが/vagrant/として共有されているのでそこに放り込んでおけば作業が楽です。\n\n移行作業そのものはケースバイケースなのと基本的に移行元と同じ環境なので移行元と同じようにすれば良いので割愛。\nIPとポートは変わってるのでその辺設定ファイルを書き換える必要があります。\n\n移行が終わったら8080番ポートにアクセスしてコンテナ上のサービスにアクセス出来ることを確認します。(紛らわしいのでホスト側のサービスは止めておきます)\n\n上手く動いたらホスト側のnginxでリバースプロキシの設定をして移行は終わりです。","key":"docker_lamp"}],"skyrim":[{"title":"Hearthfireはじめました","category":"skyrim","timestamp":"2012-10-27T20:06:08+09:00","thumbnail":"https://lh3.googleusercontent.com/-0FAmLJRKDME/UJ4v5mSZmcI/AAAAAAAAA8E/OywZvxCXc3A/s800-Ic42/enb2012_10_27_9_50_11.jpg","body":"というわけで日本語版も配信されたのでDawnguard共々購入しました。\n\nメインクエストはクリアしていますが、せっかくなのでmodも色々詰め替えて新規にプレイしようと思います。\n\n<!-- more -->\n\nちなみに現在のmodの構成はこんな感じです。\n\n* Dawnguard\n* Hearthfire\n* <a href='http://skyrim.2game.info/detail.php?id=19'>Unofficial Skyrim Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=23491'>Unofficial Dawnguard Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=25127'>Unofficial Hearthfire Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=3863'>SkyUI\n* <a href='http://skyrim.2game.info/detail.php?id=16178'>1080 Smaller ipHUD</a>\n* <a href='http://skyrim.2game.info/detail.php?id=3222'>Immersive HUD - iHUD</a>\n* <a href='http://skyrim.2game.info/detail.php?id=1177'>Xbox360 Controller KeyRemap</a>\n* <a href='http://skyrim.2game.info/detail.php?id=25501'>Warburgs Detailed Paper World Map</a>\n* <a href='http://skyrim.2game.info/detail.php?id=20228'>Materialbox - auto storage</a>\n* <a href='http://skyrim.2game.info/detail.php?id=60'>Enhanced Blood Textures</a>\n* <a href='http://skyrim.2game.info/detail.php?id=9557'>Alternate Start - Live Another Life</a>\n* <a href='http://skyrim.2game.info/detail.php?id=10168'>ApachiiSkyHair</a>\n* <a href='http://skyrim.2game.info/detail.php?id=6953'>BFG - Better FaceGen (Male Facegen Type1)</a>\n* <a href='http://skyrim.2game.info/detail.php?id=4141'>High Res Face Maps for Men by Geonox</a>\n* <a href='http://skyrim.2game.info/detail.php?id=12951'>Enhanced Character Edit</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7127'>RANs HeadMesh Variants (TypeB)</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7897'>envision Face</a>\n* <a href='http://skyrim.2game.info/detail.php?id=6709'>UNP+TBBP</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19666'>Fair Skin Complexion Sweaty Body-ADEC-CBBE-UNP-UNPB</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7305'>UNP Female Armors</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19772'>Remodeled Armors - UNP version - Originally by Mak07 for CBBEv3M</a>\n* <a href='http://skyrim.2game.info/detail.php?id=1002'>JaySus Swords</a>\n* <a href='http://skyrim.2game.info/detail.php?id=14443'>Decent Women - improve female npcs face</a>\n* <a href='http://skyrim.2game.info/detail.php?id=20460'>Dark Brotherhood Babette Replacer -Dawnguard Supported-</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19169'>EDialog</a>\n* <a href='http://skyrim.2game.info/detail.php?id=8879'>Paarthurnax Choices plus3</a>\n* <a href='http://skyrim.2game.info/detail.php?id=15972'>Radiance</a>\n\nENBはRequested ENBをVer0.113のdllで使用。\n\nテクスチャ、体型は割と気分で変えてます。\n\n<img src='/img/attached/enb2012_10_27_9_51_11.jpg'>\n\nAlternate Startを入れてるのでまずは出自を選択します。適当にマーラ様にお任せしたら怒られました。\n\nともあれ、出自を決めたらベッドでお休みなさい・・・。\n\n<br />\n<br />\n\n/*/\n\n<br />\n<br />\n\n**「は！？」**\n\n<img src='/img/attached/enb2012_10_27_9_52_28.jpg'>\n\nまさかのシンデリオンの研究室からスタート。\n\n<img src='/img/attached/enb2012_10_27_9_55_25.jpg'>\n\nクエストログにドワーフ・スフィアがまだ居るかも知れないとか書いてるけどまあ、なんとかなるかと気にせず部屋から出たら瞬殺されました。普通に開始した方が楽だったかもしんない・・・。\n\n<img src='/img/attached/enb2012_10_27_10_0_26.jpg'>\n\n気を取り直して（金目の物を一通り拾ってから）なんとか脱出。シンデリオンの研究室からはアルフタンドの大リフトが目の前だったり意外とウィンドヘルムに近かったりとその辺は一応気を遣ってくれてる模様。\n\n晴れて自由の身（**ローブ一丁でスカイリムに放り出された**とも言う）になったドヴァキンの明日はどっちだ。（ていうか結局Hearthfireはじまってないし・・・。）","key":"20121027_1"},{"title":"メインクエスト開始","category":"skyrim","timestamp":"2012-11-10T15:53:16+09:00","thumbnail":"https://lh6.googleusercontent.com/-fxamLzy3Lr8/UJ4v7PMb5CI/AAAAAAAAA8c/YdMr9PlLZ2A/s800/playlog1_1.jpg","body":"Alternate Start - Live Another Lifeを導入しているため、アルフタンドの大リフトに放り出された我らがドヴァキンですが、なんとかメインクエストまで戻ってきました。\n\n意外と歩き回ることになってメインクエスト開始前にドラゴンブリッジ辺りまで足を伸ばす羽目になりました。（やっぱりそのまま進めた方が楽だったかもしれない）\n\nまあ、すぐ自由に動き回れるから良いか。\n\n<!-- more -->\n\n![](https://lh4.googleusercontent.com/-qmtc2sxxxFk/UJ4v7huzaxI/AAAAAAAAA8o/j_hV4QkyZp0/s800/playlog1_2.jpg)\n\nメインクエストに合流してリバーウッドに到着しましたが、リディアが居ない上にシャウトが使えないので戦力的にきつい。というわけで少なくともミルムルニルを倒しておこうというわけでリバーウッドからホワイトランへ直行。\n\nさっそく首長にヘルゲンでの出来事を報告。**その場に居なかったのに**見てきたように語るドヴァキン。\n\n![](https://lh5.googleusercontent.com/-2-dYk6H-UN0/UJ4v7rmoa4I/AAAAAAAAA8k/9JSs4GD22c0/s800/playlog1_3.jpg)\n\nここに来るまでにいくらか戦闘経験を積んでいるのでドラゴンストーンはさくっと入手。西の監視塔でミルムルニルと戦闘。\n\n<del>イリレスと愉快な仲間達が</del>さっくり退治します。\n\nミルムルニルを倒した事を首長に報告し、従士の資格をもらいリディアを仲間にします。\n\n![](https://lh4.googleusercontent.com/-PKWzDReLqQQ/UJ4v8s5PltI/AAAAAAAAA80/KUkswnmf3Uc/s800/playlog1_4.jpg)\n\nうちのリディアさん。ころころ顔が変わりますが現在はこんな感じです。\n\nいつもならここでブリーズホームを購入しますが今回は家を建てるので買わずにスルー。\n\nいまだDawnguardとHearthfireは影も形も見えません。","key":"playlog1"},{"title":"Hearthfireはじまりました - Skyrimプレイ日記","category":"skyrim","timestamp":"2013-01-26T21:24:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-gHcYGyZ6Ft8/UQPOexOKMjI/AAAAAAAABEg/ECqsnEaQlyc/s288/ScreenShot18.jpg","body":"というわけでしばらく間が空きましたが細々と続けてます。\n\nメインクエストの\"創始者の角笛\"でウステングラブに行く途中に立ち寄ったモーサルでのクエストを解決した報酬で土地が買えるようになったのでやっとこさHearthfireが始まりました。\n\n<!-- more -->\n\n# 建築風景\n\n![](https://lh4.googleusercontent.com/-Xln9piDf9ho/UQPOexYVOKI/AAAAAAAABEk/Tr3a9bev4U8/s800/ScreenShot3.jpg)\n\n購入した土地に設置されている建築ツールから家の建築を行います。\n\nまず最初は小さい家からスタート、ここに建てますよっと。\n\n![](https://lh4.googleusercontent.com/-6vt1nwPNZ0g/UQPOfMe4R8I/AAAAAAAABEw/UE8VIFmhFLA/s800/ScreenShot4.jpg)\n\n土台を設置。夜が深まって来て暗くて見づらいですが気にせず建築。＜まてや\n\n![](https://lh6.googleusercontent.com/-xc4ui7EdQog/UQPOfu-IH2I/AAAAAAAABFA/XVbyifq8tJQ/s800/ScreenShot7.jpg)\n\n壁まで作った段階であまりにも暗かったので時間を飛ばして朝に。\n\n何故かリディアさんが頬を赤らめながら映り込んできました。\n\nRemodeled Armorを入れてるので北国なのに本当に大丈夫かという格好になっていますが元気に活躍してくれています。\n\n![](https://lh6.googleusercontent.com/-jtHme-yB-g8/UQPOgHJ2AmI/AAAAAAAABFM/F2kblARwp1E/s800/ScreenShot9.jpg)\n\n気を取り直して建築続行、屋根の骨組みまでできあがりました。\n\n![](https://lh3.googleusercontent.com/-xMuhVQw2X0Q/UQPOeR5mfFI/AAAAAAAABEU/FxzpkaXxJIw/s800/ScreenShot11.jpg)\n\nドアと屋根を張って完成。\n\nドアを設置するまではシームレスなので途中で止めてみるのもそれはそれで面白いかも知れません。\n\n![](https://lh4.googleusercontent.com/-oXTj-JWzRBQ/UQPOeg-KtBI/AAAAAAAABEY/q9OeaD8XcRc/s800/ScreenShot12.jpg)\n\n内装は初期状態では荷物置き用の宝箱があるだけです。\n\nとりあえずベッドくらいは置きたいですね。\n\nちなみに窓が明るいのはMOD(名前忘れた)を入れたから。\n\n# 感想\n\nとりあえず最初の小さい家を作ってみましたがなんというかやっぱり自分で建てると愛着が沸くもんですねー。\n\n釘を作ってるうちに鍛冶スキルがぐんぐん上がるドヴァキン。材料の鉄インゴットは結構消費するので集めておいた方が良いです。\n\nとりあえずベッドと物置が出来て動きやすくなったので内装を作りながら再びメインクエストを進めていこうと思います。\n\n# Dawnguardは・・・？\n\n・・・いや、Dawnguard再編の噂は聞いてるんですがなかなかリフテンまで行く用事が無くて絶賛放置中です。\n\nPCで日本語版Dragonbornが出るまでにはなんとか・・・。","key":"playlog2"}],"diary":[{"title":"ジェットスターで札幌に行ってみた","category":"diary","timestamp":"2012-11-14T06:47:00+09:00","thumbnail":"http://www.lucnix.be/d/62183-2/DSC_2690.jpg","body":"先日、妹の結婚式のために札幌に行ったんですがその際に出来るだけ安く行こうということでジェットスターを利用してみました。\n\n<!-- more -->\n\n## 予約\n宿泊先は手配済みだったので航空券だけジェットスターのサイトで予約しました。\n\nこのサイトが地味にくせ者で、一部日本語ページが作りかけなのかページ遷移の設定がおかしいのかちょいちょい英語ページにリダイレクトされます。あと、私と相性が悪いのか説明がわかりにくい。\n\n出てくるのはだいたい操作ミスとか異常系のページ遷移みたいですがちょっと怖い。\n\n便数はそんなに多くない（し、成田までの移動時間を考えると選択肢はさらに絞られる）のですがまあ、出来るだけ手頃な便と座席を指定して予約します。\n\nここで他と違うのは手荷物が有料で出来るだけ早いタイミングで申し込んだ方が安く付くというくらいでしょうか。今回は手荷物は機内持ち込み範囲内なので無しで。\n\n予約が成立すると予約番号が発行されます。この番号はあとでチェックインに使います。\n\n## ウェブチェックイン\n支払い済みでかつ出発の48時間以内になるとウェブサイト上でチェックインを行い、搭乗券を受け取ることが出来ます。\n\nウェブチェックインを行うと搭乗券のPDFが生成されるのでこれをメールで受信するかその場で印刷します。PDF自体はカラーですがバーコードを読むだけなので印刷時は白黒で構いません。\n\n私の場合はプリンタを持ってないのでメールで受け取ってからセブンイレブンのネットプリントで印刷しました。\n\nちなみにQRコード搭乗券というのがあってそれならスマートフォンの画面表示で良いらしいんですが**例によってどうやったら出来るのかよく分かりませんでした**。\n\nチェックインは復路が一週間以内なら往復まとめてチェックインできますが、何故か私はまあ、良いかと往路だけチェックインしたため、後で復路のチェックインを行う際にWEBサイトでまた悩む羽目になりました。\n\n## 成田へ\nジェットスターは東京からだと成田発なので電車に揺られて成田空港まで移動。地味に全行程の中で一番時間がかかりました。\n\nちなみに初成田です。\n\n## 搭乗手続き\n搭乗手続き自体はウェブチェックインを済ましていて手荷物が無ければそのまま保安検査に向かえばOKです。\n\nチェックインがまだの場合は空港内の端末でチェックインを行います。\n\n保安検査では機内持ち込みの荷物の大きさもチェックされますがまあ、見た感じ明らかに逸脱していなければ止められることは無いんじゃないかなと思います。\n\n保安検査を終えたら時間まで待ってバスで移動。時間まではまあ、売店があるくらいで特にすることも無いのでぼーっと待ちます。\n\n荷物と時間に厳しい以外はこの辺の手続きは他と特に変わりません。\n\n居ない人は一応放送で呼び出してましたが、定刻になったらさっさと出発してしまいました。\n\n## 機内\n機体自体は同じですが座席がたくさん詰め込まれてて狭いです。\n\nただまあ、我慢できない狭さではないので乗ってしまえば機内サービスが有料なくらいで特に違いは感じませんでした。気圧変化で耳が痛くなるのも同じです。＜それは体質の問題。\n\n男性の添乗員を初めて見ました。\n\nその後は爆睡したので記憶無し。\n\n## 到着\n手荷物がないので特に何事も無く到着ゲートをくぐって空港内へ。\n\nジェットスターのゲートは新千歳空港の一番端だったので実家から来た他の家族と合流するのにとぼとぼ歩いて真ん中の方に移動。\n\n・・・が、何故かここで迷子スキルが発動。散々歩き回る羽目になりました。\n\n## 感想\n安いです。航空券に関しては予定の半額以下で収まりました。\n\nその分、機内サービスが無いとか狭いとか予約変更できないとかはありますが、今回の場合予定は既に決まってるし私自身、機内サービスがあろうが無かろうが気にならないので問題ありませんでした。\n\n従来のサービスが当たり前になっているくらい頻繁に飛行機に乗ってるとかあとは長距離とかだと辛いのかも知れませんがそうでもない国内の一人旅なら全然有りです。\n\nただ、成田空港までが遠かった・・・。","key":"jetstar"},{"title":"閏秒","category":"diary","timestamp":"2012-07-03T16:58:58+09:00","body":"このサーバーはさくらのVPSで運用しているんですが、そのさくらインターネットから「VPSのCPU利用率が以上に跳ね上がってるので調べてちょ（意訳）」とメールが来ました。\n\n<!-- more -->\n\n7/1に閏秒の挿入をしたのでそのタイミングで跳ね上がってたら日付の再設定を試して欲しいとのこと。\n\nsshでログインしてみるとどうもJenkinsのjavaプロセスが張り付いてる。特にジョブは走っていないのでジョブが走りまくって暴走してるわけではないらしい。\n\nで、コントロールパネルのログを見てみるとまさに上記のタイミングで急激に跳ね上がってる。\n\nというわけで閏秒が犯人らしいので下記のコマンドで日付の再設定。\n\n    # date `date +'%m%d%H%M%C%y.%S'`\n\n再設定したところでCPU利用率はがくっと下がり無事問題解決。\n\nいやー、当日は閏秒の存在をすっかり忘れてましたが影響あるもんですねー。","key":"leap_second"},{"title":"口裂け女 リターンズを観てきました","category":"diary","timestamp":"2012-07-13T23:55:26+09:00","body":"元々ホラー好きなのもあるんですが、主演の大堀さんが好きなので<cite><a href=\"http://manchikan.com/kuchisakereturns/\">口裂け女 リターンズ</a></cite>を観に行ってきました。\n\n<!-- more -->\n\nこの作品では口裂け女は山奥の村（口裂け女発祥ということから考えると岐阜？）で祭られてる生き神という設定で、民俗学を専攻している大学生の主人公とその友達がその村の祭りを取材に来て生け贄にされる。というストーリーです。\n\n詳しくは公式サイト参照。＜おい\n\nちなみに、都市伝説の方の口裂け女はこの村から逃げ出した生き神が噂として広まったということになってます。\n\n所々に笑い？あり、涙ありでそれなりに面白いんですがちょっと詰め込み過ぎな感じもしたのでもっとシンプルでも良かったんじゃないかと思います。\n\nあんまりシンプルにしすぎるとアクション映画になりそうですが。\n\nちなみに、駅に着いたとたんに迷子スキルが発動して映画館の場所が分からなくなったりふらっと本屋に寄ったら出る際に何故か万引き防止のセンサーに引っかかったりとかありましたが、おかげで道は覚えたので次からは大丈夫だと思います。","key":"kuchisake_returns"},{"title":"nasneが届いちゃった","category":"diary","timestamp":"2012-07-26T20:05:47+09:00","thumbnail":"https://lh4.googleusercontent.com/-i7vPZwPDlPc/UBEihVexT3I/AAAAAAAAAts/W8miONS2gvw/s800/A7C961FD-9622-4012-ADB1-ACFC506347CB.JPG","body":"7月19日の発売が延期されたnasneですが、予約していた分の取り消しが間に合わなかったようで届いちゃいました。(爆)\n\n<!-- more -->\n\n届いたからには使ってみなければなるまい(あまり後先考えない人)。ということで開封して接続して起動してみたところ、HDDから異音がすることもなく無事起動。ラッキー。\n\n自宅にはこれのためにひかりTVを解約してフレッツテレビを契約していたのでtorneを起動してnasneの登録とチャンネルスキャンを行ったらすぐBS/CSが観れるようになりました。\n\n番組表の表示や番組検索はまあ、torneでキャッシュしてると思いますが、チャンネルの切替や視聴はネットワーク越しなのにこれまでのtroneで観るのと殆ど変わらないくらいスムーズです。\n\nあとDLNAメディアサーバーとしての機能はマニュアルには記載されていますがVer1.5の配信が延期になったのでまだ使えません。\n\nともあれ、これでtorne+nasne+hulu+DMM.TVと動画コンテンツの視聴環境がほぼPS3に一本化できて大変便利になりました。ニコニコ動画は殆ど観ないのであとはYoutubeくらい？\n\n今のところ調子よく動いてるようなのでしばらくいじってみようと思います。","key":"nasne_01"}],"stationery":[{"title":"左利きのペン事情","category":"stationery","timestamp":"2015-07-19T21:00:00+09:00","thumbnail":"https://lh3.googleusercontent.com/-bHJjzQZNQnQ/Vaq3p0Jc2JI/AAAAAAAADs0/aPDbxEDpmwM/s800-Ic42/dce0b4c6d29dbcbb4dd4f86a3640306f_m.jpg","body":"特に手書きが必須な職業ではないので、一般的には普段使いのペンと言えばボールペンで良いとは思いますが、昔から私はボールペンだと字が上手く書けません。というかそもそもちゃんと線が引けません。\n\n右利きの人に渡すと普通に書けるのでペンが壊れてるわけでもなく、多分自分が左利きのせい。\n\n左利き全般がそうなのかは分かりませんが同じ悩みを抱えてる人もいるんじゃないかというわけで、備忘録も兼ねて普段使ってるペンについて書きたいと思います。\n\n<!-- more -->\n\n# 左利きがボールペンと相性が悪い理由\n\nボールペンの構造として軸にはさまれたボールが回転してインクが出る構造になっていますが、以下の理由で左利きの書き方と相性が悪いようです。\n\n* ボールペンはある程度傾けて書いたほうがボールの回転がよくなるが、手が汚れないようにペンを立てて書くため、ボールの回転が悪くなる。\n* かといって右手で持つのと同じように左手で書くと常に押し書きになり、ボールに圧力がかかり回転が悪くなる。\n\nあれ、詰んだ・・・。\n\n## なんとかして左利きでボールペンで書くなら\n\nボールの転がりやすさはペン先の太さやインクの粘性も関係があり、細字のゲルインキボールペンとか相性は最悪です。\n\n逆に何とかしてボールペンで書く場合、太字で油性インクのボールペンかタンクにある程度圧力がかかっていて押し書きでもインクが出るボールペンなら比較的書きやすいです。\n\n店頭で試し書きした感じだと、三菱鉛筆のJETSTREAMとかパワータンクの0.7mmとかが書きやすかったです。\n\nまあ、それでも字がかすれたりインクが玉になったりするのが皆無にはなりませんが、書けるだけでもだいぶストレスは違います。\n\n# ボールペン以外に解決策を求める\n\n書けなければ使わなければ良いじゃないという訳で、さくっとボールペンを捨てて別のペンに解決を求めることにしましょう。\n\nというわけで、ここからは私が使って書けたペンをつらつらと紹介します。\n\n## 鉛筆系\n\n恐らく説明不要ですが、顔料を固めた芯を紙にこすりつけ顔料の軌跡を残すことで筆記する筆記具です。\n\nペンの向きや持ち方の影響をあまり受けないので左利きでも問題無く書けます。\n\n### 鉛筆\n\nこれも恐らく説明不要ですが、芯を木で挟んだいわゆる一般的な鉛筆です。\n\n左利きでも書けますが、消せるということが利点でも欠点でもあるためこれだけで全てまかなうのは大変です。\n\nあと削らないと使えないのが微妙にめんどい。\n\n### シャープペン\n\n鉛筆より細い（0.5mmとか）芯を樹脂や金属の軸で固定して使う筆記具で、現在ではノック式で芯を繰り出して使うものが殆どです。（他にもノック式発明以前は主流だった回転式といってネジの回転で芯を繰り出す機構のものもあります。）\n\n削らずに使える鉛筆の代替として使われています。欠点は芯が細いので折れにくい芯を作ることを優先しているため書き味が悪い（気がする）こととそれでも細いので結局は筆圧が高いとボキボキ折れること。\n\n### 芯ホルダー\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>鉛筆系は今はこれを使ってます。作りはだいたいシャープペンと同じですが、2mmとかの太い芯を使うため、簡単には折れません。</p>\n<p>使用感もシャープペンというよりは鉛筆に近く、絵描きにお勧めです。</p>\n<p>私はステッドラー社のMARS 780Cというのを使ってます。</p>\n<p>工業デザイナーのジョルジェット・ジウジアーロ氏が愛用していることで有名で本来は製図用ですが、\n私は（今は製図はしないので）絵を描いたり思いつきをあーでもないこーでもないと書き殴ったり消したりとかいうのに使ってます。</p>\n<p>シャープペンと同じく芯を繰り出せば削らずに書けますが、シャープペンと違ってだんだん太くなるので、とがらせるには専用の芯削りで芯をとがらせる必要があります。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B000WL4WEC&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n## 万年筆系\n\n毛細管現象という仕組みでインクをペン先に送りこんで筆記する筆記具で、高級文具の代表格ですが安いのもあります。\n\n先端にペンポイントという耐摩耗性の高い玉が溶接されており、メンテナンスさえ怠らなければ名前の通り半永久的に使えます。\n\n左利き用もありますが、筆圧を殆どかけずに書く事が出来るため、ペン先の向きさえ気をつければ左利きでも問題無く書けます。（結構ペンの向きにシビアなので持ち方を間違えると書けないです。）\n\n欠点はメンテナンスを怠ったり、しばらく使わなかったりするとインクが固まってすぐ書けなくなります。\n\nまた、かつては公文書の筆記は化学反応で定着するブルーブラックインクを使うため、万年筆かローラーボール（ほぼボールペン、インクが違う）しか使えない時代がありましたが、\n現在の万年筆はほぼ染料インクで特別耐久性が高い訳ではないのでサインペンの仲間扱いで使えない役所もあるようです。\n\n### プラチナ万年筆 プレピー\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>200円台で買える格安万年筆で、見た目は値段相応に安っぽいですが、ちゃんと万年筆ぽい書き味です。</p>\n<p>キャップにも乾燥対策のための工夫がしてあり、キャップさえしてあれば少しくらい使わなくても書けなくなったりはしません。</p>\n<p>安いので書けなくなったり無くしたりしてもダメージが少ないのが良いところ。</p>\n<p>ちなみに、他の格安ペンにも言えることですが、うっかり1本単位で通販で買うと本体と変わらない金額の送料が付いてきたりするするので注意。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001H06N3K&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### 無印良品 丸軸アルミ万年筆\n\nこちらは無印良品で売っている1000円くらいの格安万年筆です。\n\n200円のプレピーよりは高級感のある外見で値段も手頃。ちなみにOHTOのOEMで値段の割に出来も良いです。\n\nペリカン等のヨーロッパ標準規格のコンバーターが使えるのでカートリッジだけでなくボトルインクを使うことも出来ます。\n\nペン先も海外規格なのか日本のペンよりも若干太字ですがインクフローもよく書きやすかったです。（ただし安いので個体差があるかも）\n\nこの辺使ってみて良いなと思ったらラミーのサファリとか3000円～のものに手を出すと良いと思います。\n\nこのクラス以上になると左利き用もありますし、お金を出して調整しようかという気分にもなってきます。\n\n## ファイバーチップペン系\n\n樹脂製のペン先にインクを送って書くタイプの筆記具です。\n\nペンの角度や向きにシビアでないペンが多く、左利きでも書きやすいですが、ペン先が弱く筆圧が強いと壊れたり、\nまたそうでなくても使っているうちに摩耗していくため使い捨てのペンが多いです。\n\n### ぺんてる プラマン\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>どちらかというと万年筆の仲間のような気もしますが、一応プラスチック（樹脂）製なのでこちらに。</p>\n<p>より安価で使いやすい万年筆をということで開発されたプラスチック製のペン先の万年筆です。</p>\n<p>結果、万年筆とはまた違った独特の書き味となっており、そのためファンも多いです。</p>\n<p>さすがに本家の万年筆と違ってプラスチックのペン先は書いているうちに摩耗するため使い捨てで、\n本体ごと使い捨てのプラマンと軸はそのままでペン先付きのインクカートリッジが交換できるトラディオプラマンの2種類があります。</p>\n<p>安価（使い捨てなら200円）で万年筆ほどペンの向きにシビアでなく、軽い筆圧でも書けるため、左利きでも非常に書きやすいのですが、\nインクの乾きが遅く手が汚れる上に手に付くと洗ってもなかなか落ちないのが困りどころ。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B0017OR05Q&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### Parker 5th\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>似てるので勢いでここに入れちゃいましたが、あんまり自信が無い・・・。</p>\n<p>鉛筆でもボールペンでもローラーボールでも万年筆でもない第5の筆記具ということで5thという名前なのだそうです。</p>\n<p>ペン軸もほどよく重く、引っかかり無くすらすらと書けますしインクの乾きも速いので書いてすぐ触ってもまず手が汚れることはありません。</p>\n<p>良いことずくめですがその分、値段もお高くペン自体が1万円～2万円くらいしますし、替え芯が1本1000円と高いためコストパフォーマンスは非常に悪いです。</p>\n<p>このペンもペン先が摩耗する（元々割と太字なため、最後の方は結構太くなります）ためインクはペン先ごと交換するようになっています。</p>\n<p>また、非常に紙を選び、普通の万年筆なら大丈夫な紙でもあっさり裏写りしたりします。</p>\n<p>以前は普段使いで使ってましたが何度か無くしそうになる上に無くすとダメージでかいため、今は何か気が乗らないときに気合い入れて書くために使ってます。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B00BY1EJY2&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### サクラクレパス PIGMA (ミリペン)\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>巡り巡って現在主に使用しているペン。</p>\n<p>ペンの太さがミリ単位で記載されていることから通称ミリペンと呼ばれているペンでいろんなメーカーが販売しています。</p>\n<p>コミックやイラストのペン入れに使う画材だったりしますが、細く一定の線が書けるのでメモ帳や手帳に書き込むのにも向いています。</p>\n<p>種類があってどれを買うか迷ったんですが、メジャーで評価が高いという噂のサクラクレパスのPIGMAシリーズを選びました太さは03の黒、青、赤を使ってます。</p>\n<p>耐水性の顔料インクで乾きも速く、乾くと水に濡れてもにじまないため、外でメモするのに向いてます。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001GR4C6Y&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n# 紙との相性\n\n鉛筆やボールペンで問題になることは少ないでが、殆どの筆記具は紙との相性があります。\n\nどうにもならないところでいうと、万年筆やファイバーチップペンは筆圧をかけて書く事が出来ないため、カーボン紙などの複写式の用紙に書くことが出来ません。\n\nまた、特に万年筆や、プラマン、Parker 5thなどは万年筆を想定した手帳用の紙でないとインクが裏に抜けて両面に書けなかったりします。\n\n機会があればノートやメモ帳、手帳などの話も書きたいと思います。\n\n# まとめ\n\n改めて書き出してみると、私の場合、最終的には芯ホルダーやミリペン等、筆記具というか画材寄りの道具に落ち着くようです。\n\nでも万年筆はまた使いたい。（ラミーのサファリ辺りを買おうかな。）","key":"left_handed_pen"},{"title":"トラベラーズノートのお手入れ","category":"stationery","timestamp":"2015-06-29T01:00:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG","body":"恐ろしいことにトラベラーズノート買った時の記事以降、まるでブログの記事を書いてない上にまたトラベラーズノートの記事になります。\n\nというわけで以前買ったトラベラーズノートですが、半年ほど手入れせずに使っていたのでここで一度手入れをしておこうということで、カバーの手入れをしました。\n\n<!-- more -->\n\n## 早速準備\n\n本当はミンクオイルとか革用のオイルやクリームを塗るらしいんですが、あいにくそんな物は持ってない＆買いに行くのも面倒なので手近な代用品がないか探したところ、結構あっさり見つかりました。\n\n<img src=\"https://lh3.googleusercontent.com/-bqFVyra29ys/VZAsssknaQI/AAAAAAAADpY/VvznF8CeZZA/s640/IMG_0105.JPG\" />\n\n安くて万能の呼び声高いニベアのスキンケアクリーム。\n\n肌だけでなく革製品も割とこれでいけるらしいです。\n\n缶だったりチューブだったりしますがコンビニでも普通に売ってるので入手性は抜群。\n\n## 手入れ前の状態\n\n<img src=\"https://lh3.googleusercontent.com/-D8HqpiIsRtU/VZAbYz6ObpI/AAAAAAAADoU/s3s4bXP9J9A/s640/IMG_0100.JPG\" />\n\n手入れ前のカバー。\n\n基本的にはロディアにメモを書いた後そのままデジタル化することも多いのでそんなに使い込んでいるわけではないのですが、それでも結構傷だらけですね。\n\nこれから汚れを拭き取ってクリームを塗っていきます。\n\n## ニベアを塗りたくる\n\n<img src=\"https://lh3.googleusercontent.com/-Yg4ur0tVQq0/VZAmJ1wpRBI/AAAAAAAADoo/q5IZaWm5vQ4/s640/IMG_0101.JPG\" />\n\nクリームを塗ったところ。なんかピンぼけしてますね。\n\nクリーム自体はどんどん吸収されていくので思い切って塗りたくります。\n\nただ半分は自分の手が吸収してるような気もする・・・。\n\n## 完成\n\n<img src=\"https://lh3.googleusercontent.com/-_Et8E9RGtkk/VZAmQ9QigsI/AAAAAAAADow/K0COgTZgFZY/s640/IMG_0104.JPG\" />\n\n最後に乾いた布で軽く拭いておしまい。\n\nだいぶ傷が目立たなくなって手触りも良くなった気がします。\n\nクリームにオイルも含まれているので若干防水効果もあるんじゃないかと思います。\n\n## 感想\n\nとりあえず思ったこと。<strong style=\"font-size:1.5em;color:red;\">ニベアすげー。</strong>","key":"tn_maintenance"},{"title":"システム手帳からトラベラーズノートに乗り換えてみた","category":"stationery","timestamp":"2014-10-19T16:17:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG","body":"少し前の話なんですが、これまで<a href=\"http://www.raymay.co.jp/davinci/contents/davinci/justrefill/lineup.html\">ダヴィンチのシステム手帳</a>(ジャストリフィルのバイブルサイズ)を使っていたのですが、<del>iPhone6もデカくなったしデカいのがこれから流行るんじゃないか・・・</del>今まで財布と兼用してたけど新しく財布を買ったりなんだりで、必ずしもポケットに入れなくても良くなったので前から気になってた<a href=\"http://www.midori-japan.co.jp/tr/trnotebook/products/\">トラベラーズノート</a>(茶・レギュラーサイズ)を買ってみました。\n\n<!-- more -->\n\n<img src=\"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s400/IMG_0066.JPG\" alt=\"トラベラーズノート\">\n\nチャームとか付けてみた。\n\n表面処理してないので傷はガンガン付きます。ちなみに、ハート型の傷は塚田農場でもらったシールを貼って剥がした痕です。\n\n中身はコクヨの<a href=\"http://www.kokuyo-st.co.jp/stationery/feature/jibun_techo/contents.html#idea\">ジブン手帳の中のIDEA</a>をカットして使ってます。(<a href=\"http://bungu.plus.co.jp/sta/product/note/cacrea/\">Ca.CreaのA4x1/3サイズ</a>にしたかったけどインクの裏写りが酷かったので使えず、残念。)\n\nまあ、殆どの場合、<a href=\"http://www.kokuyo-st.co.jp/stationery/tidbit/\">チビット</a>を貼る台紙と化しているのであんまり関係なかったりはしますが・・・。\n\nこのサイズになると、さすがにポケットには入らないのでメモ帳としてチビットのA7を使ってます。試しに今は横罫カットのものを使ってますが次はブロックのに変える予定。(やっぱりチビットはブロックのが楽しい。)\n\nところで、使ってるとメモ帳にもカバーが欲しくなってきたりするわけですが、チビットのA7ってトラベラーズノートのパスポートサイズに収まるんでしょうか。(チビットってちょっとサイズが変則的なので)\n\nとりあえず今度買って試してみようと思います。\n\n<br />\n<br />\n\n以上、<strong style=\"font-size:1.5em;color:red;\">たまにはプログラミング以外の記事も書くんだぜアピール</strong>でした。","key":"travelers_note"}]},"calendar":{"2012/06":[{"title":"Coffee-scriptでBlogツールもどき","timestamp":"2012-06-15T23:56:06+09:00","body":"せっかくなので練習がてら何かしようと言うことで作ってみました。\n\n    タイトル\n    以下、本文。\n\nという感じのMarkdown形式のテキストを保存するとHTMLに変換し、jadeテンプレートを当てて公開フォルダに保存するというだけの簡単なツールです。\n\n.mdファイルの保存先をDropboxにしてるのでローカルやiPhoneからテキストを保存するだけで勝手に同期されて定期的に変換するように処理しています。","key":"20120615"},{"title":"記事の追加","timestamp":"2012-06-18T19:40:22+09:00","body":"タイムスタンプを追加したのでソートされてると良いなと.","key":"20120618"},{"title":"テスト","timestamp":"2012-06-30T19:14:48+09:00","body":"VPSが再起動したぽいので投稿テスト。","key":"20120630"},{"title":"30分後にzenbackを入れてみた","timestamp":"2012-06-30T22:15:34+09:00","body":"色々入れ替えて検討中。\n\nソーシャルボタンをわざわざ自分で置かなくて良いからこっちのが楽かも。\n\nただ機能が多い分ちょっと重い？","key":"20120630_3"}],"2012/07":[{"title":"Facebookコメントも試す","timestamp":"2012-07-04T01:40:49+09:00","body":"というわけでコメントツールシリーズ第3弾。\n\n最近身の回りでやたらとFacebookが流行り始めたので実はこれでいいんじゃないかという説もあります。\n\n<!-- more -->\n使い方は簡単。\n\n[facebook DEVELOPERSサイト](https://developers.facebook.com/docs/reference/plugins/comments/)へアクセスして必要な項目を設定、Get Codeボタンを押して埋め込み用のコードを取得します。\n\n取得したコードをサイトのテンプレートに埋め込んでやれば使えるようになります。\n\nあ、BlogとかだとURLはちゃんと記事のURLを自動で埋めるようにしないと多分おかしげな事になると思います。\n\nというわけで、試しに貼り付けたのがこちら。\n\nさすがにzenbackと一緒に貼るとめちゃくちゃ重いですね。\n\n<div id=\"fb-root\"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/ja_JP/all.js#xfbml=1\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));</script>\n\n<div class=\"fb-comments\" data-href=\"http://www.sevenspirals.net/20120701.html\" data-num-posts=\"3\"></div>\n\n#### 追記\n何故か幅が100%にならなかったのでCSSで無理矢理100%にしてみた。","key":"20120701"},{"title":"ごっそり構造変えた","timestamp":"2012-07-02T21:23:52+09:00","body":"本体のスクリプト処理を変えてみました。\n\n本体の仕事は処理すべきファイルの一覧と設定の読み込みだけであとはプラグインにどんどん投げていって最終的にHTMLを吐き出すという形に変更。\n\n記事を作るのもテンプレートに当てるのもアーカイブするのもぜーんぶプラグインの仕事。・・・あれ、これ何のツールだっけ?＜待て\n\n何となく最終的に（好きだからとかそんな理由で）Blosxomみたいな形になりそうな気がしますが今のところ比較にならないくらいこっちのがダサいので順次直していきます。\n\n続きを読むプラグインとアーカイブプラグインを作ったので次はカテゴリとコメント欄をプラグイン化するかなー。\n\nあとCoffeepressという名前はあまりにもアレなのでちゃんとした名前を考えたい。","key":"20120702"},{"title":"DISQUSを追加してみた","timestamp":"2012-07-04T14:41:20+09:00","body":"コメントシステムにDISQUSを追加してみた。\nzenbackやfacebookコメントとかとも比較してみてどれを使うか決める。\n\nところで記事によっては文字化けするけど何でやろ。\n\n<!-- more -->\n\n<div id=\"disqus_thread\"></div>\n  <script type=\"text/javascript\">\n    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */\n    var disqus_shortname = 'sevenspiralsblog'; // required: replace example with your forum shortname\n\n    /* * * DON'T EDIT BELOW THIS LINE * * */\n    (function() {\n      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n      dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n    })();\n  </script>\n  <noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n  <a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>","key":"20120630_2"},{"title":"閏秒","category":"diary","timestamp":"2012-07-03T16:58:58+09:00","body":"このサーバーはさくらのVPSで運用しているんですが、そのさくらインターネットから「VPSのCPU利用率が以上に跳ね上がってるので調べてちょ（意訳）」とメールが来ました。\n\n<!-- more -->\n\n7/1に閏秒の挿入をしたのでそのタイミングで跳ね上がってたら日付の再設定を試して欲しいとのこと。\n\nsshでログインしてみるとどうもJenkinsのjavaプロセスが張り付いてる。特にジョブは走っていないのでジョブが走りまくって暴走してるわけではないらしい。\n\nで、コントロールパネルのログを見てみるとまさに上記のタイミングで急激に跳ね上がってる。\n\nというわけで閏秒が犯人らしいので下記のコマンドで日付の再設定。\n\n    # date `date +'%m%d%H%M%C%y.%S'`\n\n再設定したところでCPU利用率はがくっと下がり無事問題解決。\n\nいやー、当日は閏秒の存在をすっかり忘れてましたが影響あるもんですねー。","key":"leap_second"},{"title":"口裂け女 リターンズを観てきました","category":"diary","timestamp":"2012-07-13T23:55:26+09:00","body":"元々ホラー好きなのもあるんですが、主演の大堀さんが好きなので<cite><a href=\"http://manchikan.com/kuchisakereturns/\">口裂け女 リターンズ</a></cite>を観に行ってきました。\n\n<!-- more -->\n\nこの作品では口裂け女は山奥の村（口裂け女発祥ということから考えると岐阜？）で祭られてる生き神という設定で、民俗学を専攻している大学生の主人公とその友達がその村の祭りを取材に来て生け贄にされる。というストーリーです。\n\n詳しくは公式サイト参照。＜おい\n\nちなみに、都市伝説の方の口裂け女はこの村から逃げ出した生き神が噂として広まったということになってます。\n\n所々に笑い？あり、涙ありでそれなりに面白いんですがちょっと詰め込み過ぎな感じもしたのでもっとシンプルでも良かったんじゃないかと思います。\n\nあんまりシンプルにしすぎるとアクション映画になりそうですが。\n\nちなみに、駅に着いたとたんに迷子スキルが発動して映画館の場所が分からなくなったりふらっと本屋に寄ったら出る際に何故か万引き防止のセンサーに引っかかったりとかありましたが、おかげで道は覚えたので次からは大丈夫だと思います。","key":"kuchisake_returns"},{"title":"nasneが届いちゃった","category":"diary","timestamp":"2012-07-26T20:05:47+09:00","thumbnail":"https://lh4.googleusercontent.com/-i7vPZwPDlPc/UBEihVexT3I/AAAAAAAAAts/W8miONS2gvw/s800/A7C961FD-9622-4012-ADB1-ACFC506347CB.JPG","body":"7月19日の発売が延期されたnasneですが、予約していた分の取り消しが間に合わなかったようで届いちゃいました。(爆)\n\n<!-- more -->\n\n届いたからには使ってみなければなるまい(あまり後先考えない人)。ということで開封して接続して起動してみたところ、HDDから異音がすることもなく無事起動。ラッキー。\n\n自宅にはこれのためにひかりTVを解約してフレッツテレビを契約していたのでtorneを起動してnasneの登録とチャンネルスキャンを行ったらすぐBS/CSが観れるようになりました。\n\n番組表の表示や番組検索はまあ、torneでキャッシュしてると思いますが、チャンネルの切替や視聴はネットワーク越しなのにこれまでのtroneで観るのと殆ど変わらないくらいスムーズです。\n\nあとDLNAメディアサーバーとしての機能はマニュアルには記載されていますがVer1.5の配信が延期になったのでまだ使えません。\n\nともあれ、これでtorne+nasne+hulu+DMM.TVと動画コンテンツの視聴環境がほぼPS3に一本化できて大変便利になりました。ニコニコ動画は殆ど観ないのであとはYoutubeくらい？\n\n今のところ調子よく動いてるようなのでしばらくいじってみようと思います。","key":"nasne_01"},{"title":"SVNリポジトリの統合","category":"programming","timestamp":"2012-07-01T10:39:59+09:00","body":"歴史的経緯からSVNリポジトリそのものが分かれてしまっているものを統合したいことが希にあります。\n\nここでは、分散してしまっているSVNリポジトリをTracやJenkinsから参照しやすいように(できるだけ)履歴付きで統合する方法を書きます。（主にメモとして）\n\n<!-- more -->\n\n####1.旧リポジトリのダンプ\n\ndumpコマンドで旧リポジトリを履歴付きでファイルに書き出します。\n\n    svnadmin dump <旧repositoryパス> > repo_dump\n\n####2.インポートフォルダの作成\n\n旧リポジトリ用のフォルダを作成します。 既に存在している場合は飛ばして構いません。\n\nここではold_repositoriesというフォルダをroot直下に配置していますが、状況に応じて扱いやすい場所に配置して構いません。\n\n    svn mkdir -m \"old repositories.\" <新repositoryパス>/old_repositories <新repositoryパス>/old_repositories\n\nダンプしたリポジトリを読み込むフォルダを作成します。\n\n    svn mkdir -m \"create old repo directory.\" <新repositoryパス>/old_repositories <新repositoryパス>/old_repositories/repo\n\n####3.ダンプファイルのロード\n\nダンプしたファイルを以下のコマンドでロードします。\n\nロード先のフォルダが存在しないと失敗します。 また、svn mkdirとはパスの指定の仕方が違うので注意して下さい。\n\n    svnadmin load <repositoryパス> --parent-dir old_repositories/repo < repo_dump\n\n以上の操作を統合したいフォルダの数だけ実施します。\n\n####4.ロード後の整形\n\n上記の作業が終われば、old_repositories以下にフォルダ別に旧リポジトリがロードされているはずです。\n\nTortoiseSVN等から履歴がきちんと見られるか確認してみて下さい。\n\n無事統合出来ていたら各リポジトリから必要なフォルダやツリーをtrunk,tags,branchesにコピーしてリポジトリの整形を行います。\n\nこの際に移動しても履歴は残りますが、後で思い出した際にtags等を過去のリビジョンから作成することができなくなります。\n\nコピーしても履歴は追跡できますので特に理由がなければ移動ではなくコピーを使って整形して下さい。","key":"svn_integration"},{"title":"zenbackタグを入れてみた","timestamp":"2012-07-21T02:47:25+09:00","body":"zenbackの関連記事の挙動が安定しないので識別用のタグを入れてみた。\n\n<!-- more -->\n\nさしあたって\n\n    <!--zenback_title_begin-->\n    ....\n    <!--zenback_title_end-->\n\nと\n\n    <!--zenback_body_begin-->\n    ....\n    <!--zenback_body_end-->\n\nを設定。これで関連記事のタイトルがちゃんと反映されるかどうか試す。\n\n設定以降の記事について反映になるらしいのでちゃんと反映されるかどうかテスト投稿。","key":"zenback_tag"}],"2012/10":[{"title":"XLSX.jsをnode.jsから使えるようにした","category":"programming","timestamp":"2012-10-19T09:35:48+09:00","body":"javascriptから.xlsxファイルを読み書きできるXLSX.jsをnode.jsから簡単に使えるようにWrapp(?)してみました。\n\n\n<!-- more -->\n\n\nXLSX.jsについては以下を参照。\n\n[JavaScriptでXLSX形式を扱う「XLSX.js」 - MOONGIFT](http://www.moongift.jp/2012/10/20121017-3/)\n\n導入は、node.jsとnpmが入っている前提で以下のコマンド。\n\n    npm install https://github.com/syaku/node-xlsx/tarball/master\n\n使い方は元のXLSX.jsと同じで例えば以下のようにするとA1:100, B1:200と記入されたoutput.xlsxが生成されます。\n\nここまでnode.jsと言っときながらまさかのCoffeeScriptです。\n\n    xlsx = require 'node-xlsx'\n    fs = require \"fs\"\n\n    file =\n      worksheets: [[]]\n      creator: 'syaku'\n      activeWorksheet: 0\n\n    w = file.worksheets[0]\n    r = w.push([]) - 1\n    w[r].push 100\n    w[r].push 200\n\n    bin = new Buffer(xlsx(file).base64, \"base64\")\n    fs.writeFileSync(\"output.xlsx\", bin)\n\n罫線や細かい属性は指定できないようですがnode.jsで作成したWEBアプリ等でお手軽にExcelに出力したいという用途には十分使えるのではないでしょうか。\n\n今回作ったソースのリポジトリは以下にアップロードしてあります。\n\n[https://github.com/syaku/node-xlsx/](https://github.com/syaku/node-xlsx/)\n\nというわけで、読み込みについては次の記事で。","key":"20121019_1"},{"title":"SparkleShareをさくらVPS上のGitoliteで利用する","category":"tools","timestamp":"2012-10-31T23:52:59+09:00","thumbnail":"https://lh3.googleusercontent.com/-2v5ozfDRdnU/UJ4v5n49YoI/AAAAAAAAA8M/_cxaKYy1pYM/s800-Ic42/Sparkleshare-gnome.png","body":"新プランに移行してから大幅にストレージの容量が増えましたが特に使い道も無く盛大に余っていたのでどうにかしてこれを有効利用出来ないか、というわけで導入済みのGitoliteを使ってSparkleShareをインストールしてみました。\n\nまだ使い始めなのでどのくらい安定しているかは分かりませんが、Gitリポジトリなので履歴が見れますしDropboxのように冗長化はされませんが、ローカルリポジトリに分散することを考えるとまあ、普通の用途なら問題無いかなと。\n\n何より大容量で安価に使えるのが良いです。\n\n<!-- more -->\n\n# SparkleShareって?\n\nGitリポジトリを経由してファイルを共有するDropboxみたいなツールです。\n\nリポジトリフォルダを監視してファイルの追加、削除、編集が行われると片っ端からコミット・プッシュします。\n\nsshで接続できるGitリポジトリなら何でも使えるのでGitHub上のリポジトリを使って共有することも出来ますが、さすがにフルオープンはあれなのでさくらVPS上に構築したGitolite環境にリポジトリを作って使います。\n\n# SparkleShareクライアントのインストール\n\n![](/img/attached/sparkleshare1.png)\n\nインストーラからクライアントソフトをインストールします。ここでは特に分岐はありませんがインストール後に名前とメールアドレスを入力します。\n\n（多分）お一人様だと余り関係ありませんがリポジトリを共有した際に誰が編集したか識別するためと、Gravatarからアバターの取得を行っているようです。\n\nここまで終わると公開キーが生成されます。これは後で使いますので控えておいて下さい。\n\n# Gitリポジトリの用意\n\nGitoliteのインストールから書くと結構複雑で大変なのでそれは導入済みということで進めます。\n\ngitolite-adminの設定を編集してSparkleShare用のリポジトリを作成し、先ほど生成されたキーをkeydirに追加し、SparkleShareからアクセス出来るようにして下さい。\n\n# SparkleShare側の設定\n\n![](/img/attached/sparkleshare2.png)\n\nリポジトリを用意したらSparkleShareに登録します。\n\nタスクトレイアイコンのメニューから、*Add hosted project...*を選択すると上のようなダイアログが開きます。\n\n自前のリポジトリを使う場合は一番上の*On my own server*を選択し、*Address*と*Remote Path*を入力します。\n\n*Address*はGitoliteのアカウントがgitだとすると、*git@example.com*、*Remote Path*には先ほど作成したリポジトリ名を入力し、Addボタンで追加します。\n\n上手くいくとユーザープロファイル直下のSparkleShareフォルダ内にリポジトリがクローンされますので適当なファイルを書き込んで自動的にプッシュされれば成功です。\n\n公式サイト: <a href='http://sparkleshare.org/'>sparkleshare.org</a>","key":"20121031_1"},{"title":"Hearthfireはじめました","category":"skyrim","timestamp":"2012-10-27T20:06:08+09:00","thumbnail":"https://lh3.googleusercontent.com/-0FAmLJRKDME/UJ4v5mSZmcI/AAAAAAAAA8E/OywZvxCXc3A/s800-Ic42/enb2012_10_27_9_50_11.jpg","body":"というわけで日本語版も配信されたのでDawnguard共々購入しました。\n\nメインクエストはクリアしていますが、せっかくなのでmodも色々詰め替えて新規にプレイしようと思います。\n\n<!-- more -->\n\nちなみに現在のmodの構成はこんな感じです。\n\n* Dawnguard\n* Hearthfire\n* <a href='http://skyrim.2game.info/detail.php?id=19'>Unofficial Skyrim Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=23491'>Unofficial Dawnguard Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=25127'>Unofficial Hearthfire Patch</a>\n* <a href='http://skyrim.2game.info/detail.php?id=3863'>SkyUI\n* <a href='http://skyrim.2game.info/detail.php?id=16178'>1080 Smaller ipHUD</a>\n* <a href='http://skyrim.2game.info/detail.php?id=3222'>Immersive HUD - iHUD</a>\n* <a href='http://skyrim.2game.info/detail.php?id=1177'>Xbox360 Controller KeyRemap</a>\n* <a href='http://skyrim.2game.info/detail.php?id=25501'>Warburgs Detailed Paper World Map</a>\n* <a href='http://skyrim.2game.info/detail.php?id=20228'>Materialbox - auto storage</a>\n* <a href='http://skyrim.2game.info/detail.php?id=60'>Enhanced Blood Textures</a>\n* <a href='http://skyrim.2game.info/detail.php?id=9557'>Alternate Start - Live Another Life</a>\n* <a href='http://skyrim.2game.info/detail.php?id=10168'>ApachiiSkyHair</a>\n* <a href='http://skyrim.2game.info/detail.php?id=6953'>BFG - Better FaceGen (Male Facegen Type1)</a>\n* <a href='http://skyrim.2game.info/detail.php?id=4141'>High Res Face Maps for Men by Geonox</a>\n* <a href='http://skyrim.2game.info/detail.php?id=12951'>Enhanced Character Edit</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7127'>RANs HeadMesh Variants (TypeB)</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7897'>envision Face</a>\n* <a href='http://skyrim.2game.info/detail.php?id=6709'>UNP+TBBP</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19666'>Fair Skin Complexion Sweaty Body-ADEC-CBBE-UNP-UNPB</a>\n* <a href='http://skyrim.2game.info/detail.php?id=7305'>UNP Female Armors</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19772'>Remodeled Armors - UNP version - Originally by Mak07 for CBBEv3M</a>\n* <a href='http://skyrim.2game.info/detail.php?id=1002'>JaySus Swords</a>\n* <a href='http://skyrim.2game.info/detail.php?id=14443'>Decent Women - improve female npcs face</a>\n* <a href='http://skyrim.2game.info/detail.php?id=20460'>Dark Brotherhood Babette Replacer -Dawnguard Supported-</a>\n* <a href='http://skyrim.2game.info/detail.php?id=19169'>EDialog</a>\n* <a href='http://skyrim.2game.info/detail.php?id=8879'>Paarthurnax Choices plus3</a>\n* <a href='http://skyrim.2game.info/detail.php?id=15972'>Radiance</a>\n\nENBはRequested ENBをVer0.113のdllで使用。\n\nテクスチャ、体型は割と気分で変えてます。\n\n<img src='/img/attached/enb2012_10_27_9_51_11.jpg'>\n\nAlternate Startを入れてるのでまずは出自を選択します。適当にマーラ様にお任せしたら怒られました。\n\nともあれ、出自を決めたらベッドでお休みなさい・・・。\n\n<br />\n<br />\n\n/*/\n\n<br />\n<br />\n\n**「は！？」**\n\n<img src='/img/attached/enb2012_10_27_9_52_28.jpg'>\n\nまさかのシンデリオンの研究室からスタート。\n\n<img src='/img/attached/enb2012_10_27_9_55_25.jpg'>\n\nクエストログにドワーフ・スフィアがまだ居るかも知れないとか書いてるけどまあ、なんとかなるかと気にせず部屋から出たら瞬殺されました。普通に開始した方が楽だったかもしんない・・・。\n\n<img src='/img/attached/enb2012_10_27_10_0_26.jpg'>\n\n気を取り直して（金目の物を一通り拾ってから）なんとか脱出。シンデリオンの研究室からはアルフタンドの大リフトが目の前だったり意外とウィンドヘルムに近かったりとその辺は一応気を遣ってくれてる模様。\n\n晴れて自由の身（**ローブ一丁でスカイリムに放り出された**とも言う）になったドヴァキンの明日はどっちだ。（ていうか結局Hearthfireはじまってないし・・・。）","key":"20121027_1"},{"title":"MOGOK上にRailsアプリを構築する(Windows編)","category":"programming","timestamp":"2012-10-31T12:47:11+09:00","thumbnail":"https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png","body":"IIJが提供するRuby PaaSのMOGOKがオープンβサービスを開始したので早速MOGOK上にアプリケーションを構築してみたいと思います。\n\n最初ということで基本的にはMOGOKのサイトのチュートリアルをなぞる形で進めていきます。\n\nで、何を作るかですが、こういうのはコンソールアプリはHello World、WEBサービスはToDoリストを作るのが伝統らしい(嘘)のでその伝統に従って今回はToDoリストを作ってみたいと思います。\n\n<!-- more -->\n\n#### SDKインストール\n\nまず何はなくとも開発環境をインストールしないといけないんですが、Windowsに関して言えばインストーラを実行するだけでRubyからRailsからMySQLからコマンドラインツールまで全部入ります。簡単ですね。\n\nSDKのインストールが完了すると、スタートメニューに\"MOGOK Windows Client Packages\"というのが追加されているのでその中の\"msys.bat\"を実行するとツール等にパスが通った状態のコンソールが立ち上がります。作業は基本的にこのコンソール上で行います。\n\n#### Railsアプリのひな形を作る\n\nコンソールを立ち上げるといきなり/binフォルダだったりするんでまずは適当な場所に作業用のフォルダを作成します。\n\n日本語ユーザー名でもちゃんと動くかは試してませんがわかりやすいところと言うことで今回はDocumentsフォルダの配下にrails_appsフォルダを作成してその中で作業することにします。\n\n    $ mkdir rails_apps\n    $ cd rails_apps\n\n作業フォルダに入ったらまずRailsアプリケーションのひな形を作ります。アプリケーション名は今回はmogok-todoとします。\n\n    $ rails new mogok-todo -d mysql\n    ～大量の出力～\n    is installed.\n\nコンソールにどばーっと出力されますが、特にエラーっぽい表示がなければひな形の作成は成功です。＜おおざっぱ\nひな形を作成したら次はGemfileを編集します。18行目辺りの、\n\n    # gem 'therubyracer', :platforms => :ruby\n\n上記のコメントアウトを外します。\n\nMOGOKサイトのチュートリアルではさらっと流していますが**therubyracer**はV8のJavaScriptインタプリタをrubyの中に突っ込んじまおうというライブラリらしいです。\n\nMOGOKで使われているRailsは3.2.8なので3.1から採用されたcoffee-scriptとかの為かなーと思いますがすいません、Rails自体久々に触ったのでまだよく分かってません。（爆）\n\n*:platforms => :ruby*はC Rubyの場合のみインストールという指定ですね。JRubyとかではちゃんと動かないらしい。\n\nGemfileを書き換えたらインストールをしないといけないので以下のコマンドでインストールします。が、その前にMySQLのサービスを起動します。私の環境ではSDKインストール直後ではサービスは起動していませんでした。\n\nただし、これまた私の環境ではサービスが動いていても*#&lt;Mysql2::Error: Can't connect to MySQL server on 'localhost' (10061)&gt;*というエラーが出たので**database.yml**のhost指定を*localhost*から*127.0.0.1*へ書き換えました。\n\n無事MySQLが動いていれば以下のコマンドを実行。\n\n    $ cd mogok-todo\n    $ bundle install\n    $ rake db:create:all\n\nここでエラーが出なければひな形の作成は終了です。\n\n#### アプリケーションを作り込む\n\nここからはRailsアプリを作り込んでいきますが、あんまり複雑なのを作っても仕方ないので単純にタイトルと終了フラグを持つだけのモデルを作成します。\n\nまずは*rails generate*コマンドでモデル、コントロール、ビューのひな形を作成します。\n\n    $ rails generate scaffold task titie:string done:boolean\n    $ rake db.migrate\n\n基本的なCRUDの処理はこれで出来てしまう&amp;余りにも公式チュートリアルそのままだとまずいので<a href='http://twitter.github.com/bootstrap/'>Twitter Bootstrap</a>を使ってViewをもう少しかっこよくしましょう。\n\n公式サイトから*bootstrap.zip*をダウンロードしてきてその中の*cssフォルダ*と*imgフォルダ*をpublicフォルダにコピーします。\n\nそして、BootstrapのCSSを使うために*app/views/layouts/application.html.erb*を以下のように書き換えます。\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>ToDoリスト</title>\n        <%= stylesheet_link_tag    \"/css/bootstrap.min.css\" %>\n        <%= stylesheet_link_tag    \"application\", :media => \"all\" %>\n        <%= javascript_include_tag \"application\" %>\n        <%= csrf_meta_tags %>\n      </head>\n      <body>\n        <div class='container'>\n          <%= yield %>\n        </div>\n      </body>\n    </html>\n\nただ、標準でsass-railsが入ってるので実際にはsass-rails-bootstrapとか使った方がカスタマイズもやりやすいと思います。\n\nあとはBootstrapの書式に従ってビューを順次書き換えや細かな機能を実装していきます。\n\nそうしてできあがったのが<a href='http://mogok-todo-007.ruby.iijgio.com/tasks'>こちら</a>になります。\n\n完了は削除というワイルド仕様です。\n\nいくらRailsアプリの作成自体は本題じゃないと言ってももうちょっと真面目に作れと自分でも思います。はい。\n\n最後にproduction環境でstaticなファイルを扱うために*config/environments/production.rb*の以下の値を*false*から*true*に書き換えます。\n\n    config.server_static_assets = true\n\n#### Gitリポジトリの作成\n\nMOGOKにデプロイするためにGitリポジトリを作成します。\n\nこの段階ではまだローカルリポジトリの操作なので普通にgitコマンドでリポジトリを作成します。\n\n    $ git init\n    $ git add .\n    $ git commit -m \"first commit\"\n\n特にここでエラーが出ることはないと思いますが以下のコマンドでリポジトリのステータスを確認します。\n\n    $ git status\n\n正常なら下記のような表示がコンソールに出力されます。\n\n    # On branch master\n    nothing to commit (working directory clean)\n\n#### MOGOKにデプロイする\n\nいよいよクラウドにデプロイします。\n\nコンソール上でMOGOKの操作を行うには<code>mogok</code>コマンドを使用します。\n\nとりあえずおもむろに<code>$ mogok -v</code>でバージョン確認。\n\n現時点では1.0.0となっているはずです。\n\n<code>$ mogok list</code>でアプリケーションの一覧が取得できます。まだ何も登録していなければ何も表示されません。\n\n初回実行時はログインIDとパスワードを聞かれるはずなのでユーザー登録の際に登録したIDとパスワードを入力して下さい。\n\nで、本番。下記のコマンドでMOGOKクラウド上にアプリケーションを登録します。\n\n    $ mogok create mogok-todo-XXXX\n\nアプリケーション名は全体でユニークな必要があるのでXXXXの部分を適当な文字列にするなり全く違う名前を付けるなりして下さい。\n\n成功するとGitのリモートリポジトリが登録されるので、<code>$ git remote -v</code>でちゃんと登録されているか確認して下さい。上手くいっているようであれば<code>$ git push mogok master</code>でリモートリポジトリにプッシュ。\n\n#### ビルドして実行する\n\nプッシュが成功したら、<code>$ mogok build</code>でビルドして実行します。\n\n\n割と時間がかかりますが、ビルドが終わったら普通のRailsアプリと同じようにdb:migrateを行います。\n\nコマンドは以下のようにmogokコマンドから呼び出します。\n\n    $ mogok rake db:migrate\n\nmigrateも正常に終わったら<code>$ mogok start</code>でアプリケーションを開始します。\n\n正常に起動したら、<code>$ mogok info</code>を実行して表示されるURLにアクセスして動作を確認します。\n\n#### 使ってみての感想\n\n開発環境の構築やデプロイが一発で出来るのはさすがに楽です。\n\n作ってる途中のはまりどころは、単純に私がRailsに慣れてないからですがrails newの際に-d mysqlを付け忘れてはまったり、config.server_static_assetsを書き換え忘れてはまったりしました。\n\n個人的にはマイブームはCoffeeScriptなのでHerokuのある状況でRailsしかないのはどうなのとか少しは思いますが、日本語の情報やサポートもありますし、正式版の価格次第ですがRails使うつもりなら選択肢としては良いんじゃないかと思います。","key":"20121030_1"},{"title":"XLSX.jsでnode.jsからxlsxファイルを読む","category":"programming","timestamp":"2012-10-28T11:17:43+09:00","body":"というわけで前回の続きです。\n\n今回は既にあるxlsxファイルを読み込んでnode.jsから操作します。\n\n<!-- more -->\n\n内容としては前回の出力処理の逆をやれば良いだけです。\n\nここでは前回作成したxlsxファイルを\"input.xlsx\"として読み込んでみます。\n\nXLSX.js単体でxlsxファイルを読み込むときは、\n\n    new xlsx(&lt;base64文字列&gt;)\n\nとなるので、node.jsではfs.readFileで読み込んだBufferオブジェクトをtoString(\"base64\")で変換して渡してやります。\n\n    xlsx = require 'node-xlsx'\n\n    fs = require \"fs\"\n\n    buf = fs.readFileSync(\"input.xlsx\")\n\n    # base64にエンコードしてから読み込み\n    book = new xlsx(buf.toString(\"base64\"))\n\n    console.log JSON.stringify(book)\n\nこのサンプルを実行すると以下のような出力が得られます。\n\n    {\"worksheets\":[[[100,200]]],\"zipTime\":17,\"creator\":\"syaku\",\"lastModifiedBy\":\"XLSX.js\",\"created\":\"2012-10-27T14:05:56.857Z\",\"modified\":\"2012-10-27T14:05:56.857Z\",\"activeWorksheet\":0,\"processTime\":0}\n\nちゃんとJSONオブジェクトになっていますね。\n\nあとはこれを好きなように操作して画面に表示するもよし、ファイルに書き出したい時は前回の手順でファイルに出力します。","key":"20121027_2"}],"2012/11":[{"title":"node.jsからTracを操作する(ための下準備)","category":"programming","timestamp":"2012-11-02T12:01:00+09:00","thumbnail":"http://www.lucnix.be/d/121732-2/Bouteilles+de+couleurs.jpg","body":"しばらく前の話になりますが、Trac Lightningのバージョン3あたりからTraMが同梱されなくなりました。\n\n個人で使う分には別に問題無いんですが、会社で使う場合だと大抵複数のプロジェクトが同時に走っており、それに応じて1人が関わっているプロジェクトも複数あるという場合が珍しくありません。\n\nで、各プロジェクトが完全に独立していれば良いんですがまあ、そんなわけもなくプロジェクトを横断してチケットを集計したレポートが欲しいという話が出てきます。\n\n<!-- more -->\n\nそういうときにTracのプラグインを作ってもいいんですが、出来れば慣れた（というかマイブームの）CoffeeScriptで書きたい。\n\n特にチケットの集計だけで良いならTrac Lightningには最初からXMLRPCプラグインが入っているのでそいつ経由でデータを抽出することが出来ます。\n\nそこで、node.jsでXMLRPCが扱えるライブラリはないかと探したところ、*node-xmlrpc*というそのものずばりな物があったので使ってみたのですがBASIC認証には対応している物のDigest認証に対応していませんでした。\n\nTrac Lightningは普通に入れるとDigest認証なのでこのままでは接続できません。\n\nで、(探せば見つかりそうな気もするけど)ない物は作れというわけでnode-xmlrpcをDigest認証に対応させました。\n\nかなりざっくりな上にTracとの接続しか試してませんが以下のようにすることでTracのXMLRPCメソッドが呼び出せます。\n\n    xmlrpc = require 'xmlrpc'\n    options =\n      host: \"example.com\"\n      port: 80\n      path: \"/trac/hogehoge/login/xmlrpc\"\n      digest_auth:\n        user: \"foo\"\n        pass: \"bar\"\n\n    client = xmlrpc.createClient(options)\n    client.methodCall 'ticket.get', [id], (err, ticket)->\n      console.log ticket\n\nこれでチケットの情報は一通り抜けるのであとはプロジェクト毎に定期的に取得してDBに格納するなりして集計を行います。\n\n今回改造を加えたソースは以下のリポジトリにアップしてあります。\n\n<a href='https://github.com/syaku/node-xmlrpc'>https://github.com/syaku/node-xmlrpc</a>","key":"20121102_1"},{"title":"ジェットスターで札幌に行ってみた","category":"diary","timestamp":"2012-11-14T06:47:00+09:00","thumbnail":"http://www.lucnix.be/d/62183-2/DSC_2690.jpg","body":"先日、妹の結婚式のために札幌に行ったんですがその際に出来るだけ安く行こうということでジェットスターを利用してみました。\n\n<!-- more -->\n\n## 予約\n宿泊先は手配済みだったので航空券だけジェットスターのサイトで予約しました。\n\nこのサイトが地味にくせ者で、一部日本語ページが作りかけなのかページ遷移の設定がおかしいのかちょいちょい英語ページにリダイレクトされます。あと、私と相性が悪いのか説明がわかりにくい。\n\n出てくるのはだいたい操作ミスとか異常系のページ遷移みたいですがちょっと怖い。\n\n便数はそんなに多くない（し、成田までの移動時間を考えると選択肢はさらに絞られる）のですがまあ、出来るだけ手頃な便と座席を指定して予約します。\n\nここで他と違うのは手荷物が有料で出来るだけ早いタイミングで申し込んだ方が安く付くというくらいでしょうか。今回は手荷物は機内持ち込み範囲内なので無しで。\n\n予約が成立すると予約番号が発行されます。この番号はあとでチェックインに使います。\n\n## ウェブチェックイン\n支払い済みでかつ出発の48時間以内になるとウェブサイト上でチェックインを行い、搭乗券を受け取ることが出来ます。\n\nウェブチェックインを行うと搭乗券のPDFが生成されるのでこれをメールで受信するかその場で印刷します。PDF自体はカラーですがバーコードを読むだけなので印刷時は白黒で構いません。\n\n私の場合はプリンタを持ってないのでメールで受け取ってからセブンイレブンのネットプリントで印刷しました。\n\nちなみにQRコード搭乗券というのがあってそれならスマートフォンの画面表示で良いらしいんですが**例によってどうやったら出来るのかよく分かりませんでした**。\n\nチェックインは復路が一週間以内なら往復まとめてチェックインできますが、何故か私はまあ、良いかと往路だけチェックインしたため、後で復路のチェックインを行う際にWEBサイトでまた悩む羽目になりました。\n\n## 成田へ\nジェットスターは東京からだと成田発なので電車に揺られて成田空港まで移動。地味に全行程の中で一番時間がかかりました。\n\nちなみに初成田です。\n\n## 搭乗手続き\n搭乗手続き自体はウェブチェックインを済ましていて手荷物が無ければそのまま保安検査に向かえばOKです。\n\nチェックインがまだの場合は空港内の端末でチェックインを行います。\n\n保安検査では機内持ち込みの荷物の大きさもチェックされますがまあ、見た感じ明らかに逸脱していなければ止められることは無いんじゃないかなと思います。\n\n保安検査を終えたら時間まで待ってバスで移動。時間まではまあ、売店があるくらいで特にすることも無いのでぼーっと待ちます。\n\n荷物と時間に厳しい以外はこの辺の手続きは他と特に変わりません。\n\n居ない人は一応放送で呼び出してましたが、定刻になったらさっさと出発してしまいました。\n\n## 機内\n機体自体は同じですが座席がたくさん詰め込まれてて狭いです。\n\nただまあ、我慢できない狭さではないので乗ってしまえば機内サービスが有料なくらいで特に違いは感じませんでした。気圧変化で耳が痛くなるのも同じです。＜それは体質の問題。\n\n男性の添乗員を初めて見ました。\n\nその後は爆睡したので記憶無し。\n\n## 到着\n手荷物がないので特に何事も無く到着ゲートをくぐって空港内へ。\n\nジェットスターのゲートは新千歳空港の一番端だったので実家から来た他の家族と合流するのにとぼとぼ歩いて真ん中の方に移動。\n\n・・・が、何故かここで迷子スキルが発動。散々歩き回る羽目になりました。\n\n## 感想\n安いです。航空券に関しては予定の半額以下で収まりました。\n\nその分、機内サービスが無いとか狭いとか予約変更できないとかはありますが、今回の場合予定は既に決まってるし私自身、機内サービスがあろうが無かろうが気にならないので問題ありませんでした。\n\n従来のサービスが当たり前になっているくらい頻繁に飛行機に乗ってるとかあとは長距離とかだと辛いのかも知れませんがそうでもない国内の一人旅なら全然有りです。\n\nただ、成田空港までが遠かった・・・。","key":"jetstar"},{"title":"メインクエスト開始","category":"skyrim","timestamp":"2012-11-10T15:53:16+09:00","thumbnail":"https://lh6.googleusercontent.com/-fxamLzy3Lr8/UJ4v7PMb5CI/AAAAAAAAA8c/YdMr9PlLZ2A/s800/playlog1_1.jpg","body":"Alternate Start - Live Another Lifeを導入しているため、アルフタンドの大リフトに放り出された我らがドヴァキンですが、なんとかメインクエストまで戻ってきました。\n\n意外と歩き回ることになってメインクエスト開始前にドラゴンブリッジ辺りまで足を伸ばす羽目になりました。（やっぱりそのまま進めた方が楽だったかもしれない）\n\nまあ、すぐ自由に動き回れるから良いか。\n\n<!-- more -->\n\n![](https://lh4.googleusercontent.com/-qmtc2sxxxFk/UJ4v7huzaxI/AAAAAAAAA8o/j_hV4QkyZp0/s800/playlog1_2.jpg)\n\nメインクエストに合流してリバーウッドに到着しましたが、リディアが居ない上にシャウトが使えないので戦力的にきつい。というわけで少なくともミルムルニルを倒しておこうというわけでリバーウッドからホワイトランへ直行。\n\nさっそく首長にヘルゲンでの出来事を報告。**その場に居なかったのに**見てきたように語るドヴァキン。\n\n![](https://lh5.googleusercontent.com/-2-dYk6H-UN0/UJ4v7rmoa4I/AAAAAAAAA8k/9JSs4GD22c0/s800/playlog1_3.jpg)\n\nここに来るまでにいくらか戦闘経験を積んでいるのでドラゴンストーンはさくっと入手。西の監視塔でミルムルニルと戦闘。\n\n<del>イリレスと愉快な仲間達が</del>さっくり退治します。\n\nミルムルニルを倒した事を首長に報告し、従士の資格をもらいリディアを仲間にします。\n\n![](https://lh4.googleusercontent.com/-PKWzDReLqQQ/UJ4v8s5PltI/AAAAAAAAA80/KUkswnmf3Uc/s800/playlog1_4.jpg)\n\nうちのリディアさん。ころころ顔が変わりますが現在はこんな感じです。\n\nいつもならここでブリーズホームを購入しますが今回は家を建てるので買わずにスルー。\n\nいまだDawnguardとHearthfireは影も形も見えません。","key":"playlog1"},{"title":"The Semantic Grid System","category":"programming","timestamp":"2012-11-23T18:57:31+09:00","thumbnail":"http://farm6.staticflickr.com/5217/5420762245_548a535ffd_z.jpg","body":"[Bootstrap](http://twitter.github.com/bootstrap/)は私のようなセンスいまいちな開発者でも簡単に見栄えの良いサイトが作れる素晴らしいフレームワークなんですが1点だけ気になって夜も眠れないところがあります。(昨夜は熟睡でした)\n\n<!-- more -->\n\n# 気になるところって?\n気になるところというのは段組を表現するためのGridシステムで、例えばBootstrapで左右に分割したレイアウトにしようと思ったら、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div id=\"navigation\" class=\"span6\"&gt;\n      ～ナビゲーション～\n    &lt;/div&gt;\n    &lt;div id=\"content\" class=\"span6\"&gt;\n      ～コンテンツ～\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\nのようにします。\n\nclass属性に<code>.row</code>とか<code>.span*</code>とか付けてGrid構造を記述していますが、これではHTML内にGridのレイアウトが記述されているため、レイアウトを変えようと思ったらHTMLを変更しないといけません。\n\nまた、特に<code>.row</code>は純粋にGridの行を記述するためのものなので出来れば書きたくありません。\n\nただ、これはCSSを直接使った場合であってGitHubリポジトリから取得すればlessファイルが同梱されています。\n\nこの中に記述されたMixinを使えば任意のCSSセレクタを使ってGridレイアウトを定義できます。\n\n<pre>\n@import \"bootstrap/variables\";\n@import \"bootstrap/mixins\";\n\n.side {\n  .makeColumn(6);\n}\n.main {\n  .makeColumn(6);\n}\n</pre>\n\nこんな感じで記述したlessファイルを<code>lessc</code>コマンドでコンパイルすると<code>.side</code>と<code>.main</code>を指定した要素が<code>.span6</code>を指定したのと同じになります。\n\nで、このスタイルを使用するように書き換えたHTMLは以下のように、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div id=\"navigation\" class=\"side\"&gt;\n      ～ナビゲーション～\n    &lt;/div&gt;\n    &lt;div id=\"content\" class=\"main\"&gt;\n      ～コンテンツ～\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<code>.span6</code>という決め打ちがなくなったので例えば<code>.side</code>の幅を減らして<code>.main</code>を広く取りたいとなったときにスタイルシートを変更するだけで対応できるようになります。\n\n<code>.container</code>や<code>.row</code>についても<code>.container-fixed();</code>、<code>.makeRow();</code>というMixinが定義されているので置き換える事が可能ですが、今回の例では**特に例を思いつかなかったので**そのままです。\n\n<code>.row</code>の存在が何となく気に入らない（おい）以外は固定幅ならこれで問題無く使えるんですがResponsiveな場合や、複雑なレイアウトだと**計算が面倒なので**<code>.row-fluid</code>を使いたいんですが何故か上手くいかずに挫折。\n\nResponsiveな場合はメディアクエリの内容にに応じて<code>@gridColumnWidth</code>と<code>@gridGutterWidth</code>の値を定義してやればいけそうなんですがfluidだけはどうもこれらを%指定にするだけでは駄目らしく上手く動いてくれません。(やり方知ってるよという方是非教えて下さい。)\n\n# ここから本題\nで、これを解決するために何か無いかと探していたら今回のタイトルの[The Semantic Grid System](http://semantic.gs)(以下長いのでURLからsemantic.gs)が見つかったので使ってみました。\n\nこれは何かというと、先ほど出てきた<code>.makeRow();</code>や<code>.makeColumn();</code>のようなGridレイアウトのためのMixin定義で、less, scss, stylの3形式で提供されています。\n\n提供されるMixinは、それぞれ<code>.makeRow();</code>と<code>makeColumn();</code>に対応する<code>.row();</code>と<code>.column();</code>、offsetのための<code>.push();</code>と<code>.pull();</code>です。\n\n<code>.container</code>に相当する物はないので自分で定義する必要がありますが、初期設定では(固定幅なら)Bootstrapの<code>.container</code>がそのまま使えます。\n\nこれを使って先ほどのHTMLとスタイルシートを書き換えてみます。\n\nまずlessファイルから、\n\n<pre>\n@import \"grid\"\n\n.side {\n  .column(6);\n}\n.main {\n  .column(6);\n}\n</pre>\n\nあんまり変わりませんね。次はHTML、\n\n<pre>\n&lt;div class=\"container\"&gt;\n  &lt;div id=\"navigation\" class=\"side\"&gt;\n    ～ナビゲーション～\n  &lt;/div&gt;\n  &lt;div id=\"content\" class=\"main\"&gt;\n    ～コンテンツ～\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<code>.row</code>が消せました、やったね。サイトのサンプルにあるように複雑なレイアウトだと<code>.row();</code>を使う必要がありますが、簡単なレイアウトなら無くても動作します。\n\nまた、デフォルトでは固定幅ですが、<code>@total-width</code>に<code>100%</code>を指定するとfluid layoutとして動作します。\n\n先ほどのようにBootstrapの<code>.container</code>を使う場合、Responsive\nだと、コンテナの幅がウィンドウ(画面)のサイズによって変わるので、fluid layoutにして追従するようにした方が何かと楽です。\n\n注意点としては、BootstrapではSmartphone向けの表示になると全ての<code>.span*</code>の幅が100%になりますが、semantic.gsではそういう指定は特に入っていないので必要なら自分で指定します。\n\n最初、Bootstrapと競合しないか不安だったんですがある程度考慮して作られているらしく、特に問題無く動いています。\n\nというわけで、<code>.container</code>こそ残っていますが、それ以外はほぼ満足のいく結果になったのでこれからは安眠できそうです。(繰り返しますが昨夜は熟睡でした)","key":"semantic_grid_system"},{"title":"ズルいデザインテクニックを取り入れてみた","category":"programming","timestamp":"2012-11-21T19:33:15+09:00","thumbnail":"http://www.lucnix.be/d/169479-2/Pont+du+Gard-+03.jpg","body":"※画像に特に意味はありません。\n\n最近、[ズルいデザインテクニック](https://speakerdeck.com/ken_c_lo/zurui-design)というのが流行っているらしいので流行に便乗してこのブログにも取り入れてみました。ズルいですね。\n\n<!-- more -->\n\n## ズルい付箋\n基本は[こちらのサイト](http://www.paulund.co.uk/creating-different-css3-box-shadows-effects)のCSSと同じ構造ですが背景に単色でなくズルいグラデーションを使用しています。\n\nあとは立体感を出すためにぼけ足の長い影を足しています。これは先ほどのサイトのEffect6～8で使われていますね。スライドでも紹介されています。\n## ズルい背景\n背景画像はスライドにある[Subtle Patterns](http://subtlepatterns.com/)の画像を使用しています。\n\n記事の背景になっている紙のスタイルは付箋と同じテクニックで影付け+ここでも立体感を出すために画像の上からぼけ足の長い影を足しています。\n\n## ズルい線、ズルい影\nその他、ズルい線やズルい影は色々なところで使われています。\n\n使ってる箇所が多いのでスライドにもあるようにMixin化して使っています。(私はbootstrap+lessを使ってるのでbootstrap+lessで作りました)\n\n## ズルい感想&larr;?\nやって見ると思いの外簡単に見栄えを良くすることが出来ました。ズルいですね。\n\n個人的に好みなのはズルい線とズルいグラデーションです。特にグラデーションは言われないと入ってるか入ってないか微妙なくらい薄くてもいざ削ると印象が大きく変わります。\n\nというわけで今回はブログのCSSを更新した事をネタに記事を更新するというズルい回をお送りしました。","key":"zurui-design"}],"2013/12":[{"title":"AWS SDK for JavaScriptでS3でファイル操作","category":"programming","timestamp":"2013-12-01T15:15:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"ブラウザ単体でAmazon AWSのS3やDynamoDBやSQSなんかを操作できるAWS SDK for Javascriptが公開されたので使ってみました。\n\n<!-- more -->\n\n# 基本はNode.js用SDKと同じ\n扱い方は基本的にNode.js用のSDKと同じで対応していないサービスはクラスが実装されていないので扱えないという感じです。\n\nなのでどっちか覚えてればサーバーサイドの実装もブラウザ側での実装も両方割と簡単に対応出来ます。\n\n# 誰でも読み書きできるコメント欄的な物を作ってみる\n\n本当はGoogle+やFacebook認証を使ったりするんでしょうが今回は認証のないコメント欄的なものをS3を使って作りたいと思います。\n\n## IAMコンソールでユーザーを作成する\n\nまず、IAMコンソールでアプリに使うユーザーを作成します。\n\nここで作成したユーザーの<code>ARN</code>と<code>Access Key ID</code>と<code>Secret Access Key</code>は後でアプリから使うのでコピーしておきます。\n\n![](https://lh5.googleusercontent.com/-dz4YJ6Z1ZVM/UpJIKQw517I/AAAAAAAABu8/zwUUBGJQYok/s640/capture1.png)\n\nユーザーを作成したらS3のバケットを操作できるようにパーミッションを設定します。\n\n設定内容は以下のような感じ。<code>BUCKET_NAME</code>はアプリで使用するバケット名を記述します。\n\nここでは指定バケットに対してS3の全てのアクションを許可しています。\n\nここで例えばReadだけ不許可にすることで外部からファイルを受け取るためのアップローダーを作るということも出来そうです。\n\n    {\n      \"Version\": \"2013-11-24\",\n      \"Statement\": [\n        {\n          \"Action\": [\n            \"s3:*\"\n          ],\n          \"Resource\": [\n            \"arn:aws:s3:::BUCKET_NAME\"\n          ],\n          \"Effect\": \"Allow\"\n        }\n      ]\n    }\n\n## バケットを作成する\n\nS3のコンソールでバケットを作成します。\n\nここでもパーミッションを設定しますが基本的にユーザー作成時に指定した内容と同じです。\n\n先ほどコピーしておいた<code>ARN</code>をここで記述します。\n\n    {\n      \"Version\": \"2013-11-24\",\n      \"Statement\": [\n        {\n          \"Sid\": \"\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"AWS\": \"<IAMで作ったユーザーのARN>\"\n          },\n          \"Action\": \"s3:*\",\n          \"Resource\": \"arn:aws:s3:::BUCKET_NAME/*\"\n        }\n      ]\n    }\n\nパーミッションを設定したら次はCORS(Cross-Origin Resource Sharing)の設定をします。\n\n初期値ではGETしか許可されていないのでPUTも許可するようにします。\n\nまた、今回の場合、Access KeyとSecretをソースに埋め込むので<code>AllowedOrigin</code>を指定しないとどこからでも操作できて多分えらい目に遭います。\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n        <CORSRule>\n            <AllowedOrigin>http://www.exmaple.com/</AllowedOrigin>\n            <AllowedMethod>GET</AllowedMethod>\n            <AllowedMethod>PUT</AllowedMethod>\n            <MaxAgeSeconds>3000</MaxAgeSeconds>\n            <AllowedHeader>*</AllowedHeader>\n            <AllowedHeader>Authorization</AllowedHeader>\n        </CORSRule>\n    </CORSConfiguration>\n\n\n## サンプルコード\n\nとりあえず初期化処理です。\n先ほど作成したAccess KeyとSecretを設定し、S3クラスを初期化します。\n\n    var messageGet, messagePost, s3;\n\n    AWS.config.update({\n      accessKeyId: '***********************',\n      secretAccessKey: '**********************************'\n    });\n\n    s3 = new AWS.S3({\n      region: 'ap-northeast-1',\n      maxRetries: 15\n    });\n\nAWSへのリクエストは非同期で行われるので同期処理するためにJsDeferredも初期化。\n\n    Deferred.define();\n\nで、実際の初期化処理がこちら。\nバケット名とKey(ファイル名みたいなもの)とContentTypeとBody(ファイルの中身)を設定して<code>putObject</code>を呼び出します。\n\n呼び出し後は非同期で実行され、何らかの理由で失敗したらerrが成功したらresultが指定されてコールバックされます。\n\n    messagePost = function() {\n      var key, params;\n      key = new Date().getTime().toString();\n      params = {\n        Bucket: 'BUCKET_NAME'\n        Key: key,\n        ContentType: 'text/plain',\n        Body: $(\"#message\").val()\n      };\n      return s3.putObject(params, function(err, result) {\n        if (err) {\n          return console.log(err);\n        } else {\n          return console.log(data);\n        }\n      });\n    };\n\n読み込みも簡単です。\nバケット名とKeyを指定して<code>getObject</code>関数を呼び出します。\nコールバックは書き込みと同じで失敗すればerrが成功すればdataにファイルの情報がセットされ返ってきます。\n\nここではBodyの中身を文字列化してJsDeferredに渡しています。\n\n    messageGet = function(key) {\n      var deferred;\n      deferred = new Deferred();\n      s3.getObject({\n        Bucket: 'BUCKET_NAME',\n        Key: key\n      }, function(err, data) {\n        return deferred.call(data.Body.toString());\n      });\n      return deferred;\n    };\n\n起動時処理。\n<code>listObjects</code>関数でバケット内のファイルの一覧を取得し順番に<code>messageGet</code>関数を呼んでファイルの中身を取得してリストに詰めています。\n\n全部取り終わってからコンソールに吐き出すようにJsDeferredを使っています。(実際にはloopじゃなくてparallelのがいいと思う)\n\n    $(function() {\n      return s3.listObjects({\n        Bucket: 'BUCKET_NAME'\n      }, function(error, data) {\n        var result;\n        if (error) {\n          return console.log(error);\n        } else {\n          result = [];\n          return Deferred.loop(data.Contents.length, function(i) {\n            return messageGet(data.Contents[i].Key).next(function(data) {\n              return result.push(data);\n            });\n          }).next(function() {\n            // 実際には投稿日順で並び替えたりする\n            return console.log(result);\n          });\n        }\n      });\n    });\n\n## 感想のような物\n\nこのブログは静的HTMLを吐いてS3に配置していますがこんな感じのちょっとしたツールに簡単にDBやファイル保存の機能を付加できるのは大変夢が広がって面白いです。\n\nただ、出来る事がすごく増えるわけではないので別に既存のサーバーサイド処理を置き換えるものではなく、別の要件でサーバーを立てるならサーバーサイドでやった方が良いんじゃないかと思います。\n\n逆に全くの新造なら全部これを使ってサーバーを立てないというサービスもあっても良いんじゃ無いかとも思ったのでとりあえずこのブログを実験台に色々試してみたいと思います。(まずはzenbackに頼ってる機能の置き換えかな)","key":"aws_javascript_sdk"}],"2014/08":[{"title":"さくらVPS上のCentOSにDockerをインストールした","category":"tools","timestamp":"2014-08-14T00:14:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"Dockerというコンテナ型の仮想化ソフトがありまして、以前(確かまだポートが固定出来なかった頃)にVirtualBox上で試したんですが、色々バージョンアップを重ね1.0も(割と前に)出たので実際に使おうということで(本当はUbuntuが推奨環境のはずですが)さくらVPSのCentOS上にインストールしてみました。\n\n<!-- more -->\n\n# まずEPELのインストール\n\nDockerのパッケージはEPELリポジトリにあるのでまずEPELをインストールします。\n\n既にインストールしていることも多いと思いますので導入済みならスキップしても構いません。\n\n    $ wget http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm\n    $ sudo rpm -ivh epel-release-6-8.noarch.rpm\n\n特に問題無く成功すると思います。\n\n標準のリポジトリと追加リポジトリの優先順位を細かく設定したい場合は<code>yum-priorities</code>をインストールすることで優先順位の制御が出来ます。\n\n# docker-ioのインストール\n\n無事EPELのインストールが終わったら次はDocker本体のインストールを行います。\n\nパッケージ名はdocker-ioになるので、yumコマンドでインストールします。\n\n    $ sudo yum install docker-io\n\nまた、起動時に自動で立ち上がるように設定しておきます。\n\n    $ sudo service docker start\n    $ sudo chkconfig docker on\n\nインストールそのものはこれで完了です。\n\n# イメージの作成\n\n準備は整ったので仮想環境のイメージを作りたいと思います。\n\nとりあえず、CentOS上で動かしてるサービスを移設したいのでCentOSのイメージを作ります。\n\n既にCentOSのベースになるイメージは存在してるので<code>docker pull</code>コマンドでダウンロードします。\n\n    $ sudo docker pull centos:latest\n\nダウンロードが終わったら<code>docker images</code>コマンドで実際に作成されていることを確認します。\n\n    $ sudo docker images centos\n    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n    centos              latest              b157b77b1a65        2 weeks ago         243.7 MB\n\n上記のような感じになってたら成功です。\n\n\n# 実行\n\nイメージが作られたのでおもむろに実行。\n\nとりあえず今回はコンテナ名は特に指定せずに実行します。\n\n    $ sudo docker run -i -t centos /bin/bash\n\nするとこんなエラーが出てしまいました。\n\n<pre><samp>2014/08/10 14:38:36 Error: Cannot start container 6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a: write /cgroup/devices/docker/6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a/cgroup.procs: invalid argument</samp></pre>\n\n調べたところ、CentOS6の場合、Kernelのバージョンが2.6.32-431以上でないと動かない模様。\n\nというか普通に見落としてました。すいません。\n\nというわけで<code>sudo yum update</code>でまとめて更新。\n\n    $ sudo yum update\n\n更新が終わったら再び実行。仮想環境上のbashに入れれば成功です。\n\n初回なのでコンテナ作成も同時に行っていますがそれでも一瞬で起動します。\n\nここがDockerの良いところ。\n\nというわけで、入れ物は出来たので次からは今動いているサーバーをどんどんDocker上に移行していきます。","key":"docker_install"},{"title":"CentOS6上のDockerにCentOS7を入れたらはまった","category":"tools","timestamp":"2014-08-16T22:45:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"前回、さくらVPS上のCentOS6にDockerをインストールしましたが、その際にコンテナイメージを<code>centos:latest</code>から作ったため、ホストはCentOS6、ゲスト(っていうのか?)はCentOS7という状態になってました。\n\nそのまま、その環境でhttpdやらを入れてたんですが、サービスが起動できずにドはまりしました。\n\n<!-- more -->\n\nRHEL7系からはサービスの起動がsystemdとsystemctlが採用されておりそのため起動方法が/etc/rc.d/init.d/配下の起動スクリプトじゃなくなってます。\n\nなので<code>systemctl</code>コマンドで有効化して起動しようとすると下記のようなエラーが出てしまいます。\n\n    bash-4.2# systemctl enable httpd.service\n    ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'\n    bash-4.2# systemctl start httpd.service\n    Failed to get D-Bus connection: No connection to service manager.\n\nGoogle先生で調べるが、よく分からない・・・。ホスト側がsystemdで管理されていないのがまずいぽい?\n\nまあ、そもそもホスト側がCentOS6なのがアカン気がするし、その後の移行作業でも問題が出そうな気がするので元にするイメージを<code>centos:centos6</code>と指定してコンテナ上もCentOS6になるようにして逃げました。","key":"docker_install2"},{"title":"VPS内のLAMP環境をDockerコンテナに移行する","category":"tools","timestamp":"2014-08-18T01:32:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png","body":"[前回](/2014/08/14/docker_install/ \"さくらVPS上のCentOSにDockerをインストールした\")、Dockerをインストールしコンテナを作れることを確認したので実際にVPSに入っているLAMP環境をDockerコンテナに移行したいと思います。\n\n<!-- more -->\n\n# Dockerfileの作成\n\n[Docker Hub](https://registry.hub.docker.com/ \"Docker Hub\")を探せばいろんな人が作ったLAMP環境のイメージがあるんですが、Chefとかと同じで自前で作った方が良いということでDockerfileからイメージを作ることにします。\n\n今回作ったのは下記の通り、\n\n    FROM centos:centos6\n\n    MAINTAINER syaku\n\n    RUN yum install -y initscripts MAKEDEV sudo\n\n    RUN yum check\n\n    RUN yum update -y\n\n    RUN yum install -y openssh-server\n\n    RUN useradd -d /home/vagrant -m -s /bin/bash vagrant\n    RUN echo vagrant:{パスワード}| chpasswd\n    RUN echo 'vagrant ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n    RUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\n    RUN sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config\n\n    RUN yum install -y tar gzip\n\n    RUN yum install -y gcc make\n    RUN yum install -y perl perl-CPAN perl-CGI\n    RUN rpm -Uvh ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/csbuild:/Perl/CentOS_CentOS-6/noarch/perl-Jcode-2.07-1.4.noarch.rpm\n\n    RUN yum install -y httpd\n    RUN yum install -y mysql-server\n    RUN yum install -y php php-mysql php-mbstring\n\n    RUN chkconfig sshd on\n    RUN chkconfig httpd on\n    RUN chkconfig mysqld on\n\n    RUN /etc/init.d/sshd start\n    RUN /etc/init.d/mysqld start\n    RUN /etc/init.d/httpd start\n\n    EXPOSE 80\n\n    CMD [\"/sbin/init\"]\n\n通常のLAMP環境に加え、perlのCGIをいくつか動かしていたのでperlを、既存環境のファイルをやりとりするためtarとgzipをインストールしています。\n\nそのほかには、コンテナ管理にVagrantを使うことにしたので、<code>vagrant ssh</code>するためにsshをインストールしています。\n\nこうやっておくと<code>vagrant ssh</code>した際にパスワードを入力するだけでコンテナにアクセスすることが出来るのでIP調べなくていい分、若干楽です。\n\n# コンテナ管理にVagrantを使ってみる\n\nコンテナ管理には(個人的に慣れてるので)Vagrantを使用しますが、VagrantからDockerを操作するにはVer1.6以上が必要なのでインストールしていない場合はインストールします。\n\nインストールはrpmコマンド一発です。\n\n    $ sudo rpm -Uvh https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.rpm\n\nインストールが終わったらDockerfileと同じ場所にVagrantfileを作ります。\n\n今回作ったVagrantfileはこんな感じ、\n\n    Vagrant.configure(\"2\") do |config|\n        config.vm.provider \"docker\" do |d|\n            d.build_dir = \".\"\n        end\n        config.vm.network :forwarded_port, guest: 80, host: 8080\n    end\n\n内容としてはカレントディレクトリのDockerfileをビルドして80番ポートをホスト側の8080ポートに紐付けます。\n\nで、両方整ったらコマンド叩いて起動します。\n\n    $ vagrant up --provider=docker\n\n最初はイメージのビルドを行うので結構時間がかかります。\n\n正常に終わったら、\n\n    $ vagrant ssh\n\nと叩いてログインできるか確認します。\n\nログインできたらついでにちゃんとサービスが起動しているか確認します。\n\n# せっせと移行する\n\n入れ物ができあがったらあとは既存の環境からファイルやらDBのダンプやらをコンテナ環境に持ってきて移行作業を行います。\nVagrantを使っている関係でVagrantfileがあるディレクトリが/vagrant/として共有されているのでそこに放り込んでおけば作業が楽です。\n\n移行作業そのものはケースバイケースなのと基本的に移行元と同じ環境なので移行元と同じようにすれば良いので割愛。\nIPとポートは変わってるのでその辺設定ファイルを書き換える必要があります。\n\n移行が終わったら8080番ポートにアクセスしてコンテナ上のサービスにアクセス出来ることを確認します。(紛らわしいのでホスト側のサービスは止めておきます)\n\n上手く動いたらホスト側のnginxでリバースプロキシの設定をして移行は終わりです。","key":"docker_lamp"}],"2013/09":[{"title":"Node.jsとMongoDBとElasticsearchで日本語全文検索","category":"programming","timestamp":"2013-09-16T05:45:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"MongoDBのver2.4から全文検索が導入されたので使ってみようと思ったんですが、やっぱりというか日本語には対応していなかった・・・。\n\n何か悔しいのでElasticsearchでMongoDBのコレクションを日本語全文検索する環境を構築してみました。\n\n<!-- more -->\n\n# Elasticsearchのインストール\n\n何はともあれElasticsearchのインストールですが、Macならbrewで簡単にインストールできます。\n\nちなみにWindowsでも適当な場所にzipを展開するだけです。\n\n    $ brew install elasticsearch\n\nで、起動。今回は試しながらなので-fオプションを付けてフォアグラウンドで起動します。\n\n    $ elasticsearch -f\n\n特にエラーが出なければ実際にアクセスしてみます。\n\nelasticsearchはREST APIでやりとりするのでcurlコマンドでリクエストを投げます。\n\nまずはテスト用のIndexを作成します。\n\n    $ curl -XPUT 'http://localhost:9200/test'\n\n実行した結果、<code>{\"ok\":true,\"acknowledged\":true}</code>のようなレスポンスが返ってくれば成功です。\n\nついでに分析リクエストも投げてみますがこの時点では日本語は正しく分析できません。\n\n    $ curl -XGET 'http://localhost:9200/test/_analyze?pretty' -d '東京都渋谷区'\n    /*{\n      \"tokens\" : [ {\n        \"token\" : \"東\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 1,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 1\n      }, {\n        \"token\" : \"京\",\n        \"start_offset\" : 1,\n        \"end_offset\" : 2,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 2\n      }, {\n        \"token\" : \"都\",\n        \"start_offset\" : 2,\n        \"end_offset\" : 3,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 3\n      }, {\n        \"token\" : \"渋\",\n        \"start_offset\" : 3,\n        \"end_offset\" : 4,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 4\n      }, {\n        \"token\" : \"谷\",\n        \"start_offset\" : 4,\n        \"end_offset\" : 5,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 5\n      }, {\n        \"token\" : \"区\",\n        \"start_offset\" : 5,\n        \"end_offset\" : 6,\n        \"type\" : \"<IDEOGRAPHIC>\",\n        \"position\" : 6\n      } ]\n    }*/\n\n## プラグインの追加\n\nまずは日本語の全文検索ができるようにkuromojiの分析プラグインをインストールします。\n\nインストールはコマンド一発で簡単にできます。\n\n    $ plugin -install elasticsearch/elasticsearch-analysis-kuromoji/1.5.0\n\nで、今回はMongoDBのCollectionを全文検索したいのでそれ用のプラグインもインストールします。\n\nelasticsearch-river-mongodbプラグインのインストールは他と同じような書き方にするとURLが見つからずインストールできなかったので直接githubを指定しました。\n\n    $ plugin -install elasticsearch/elasticsearch-mapper-attachments/1.8.0\n    $ plugin -i com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/1.7.0\n\n特にエラーが出なければインストールは完了です。\n\n## kuromojiのテスト\n\nまずアナライザにkuromojiを指定して日本語の構文解析が出来るようになっているか確認します。\n\n    $ curl -XGET 'http://localhost:9200/test/_analyze?analyzer=kuromoji&pretty' -d '東京都渋谷区'\n    /*{\n      \"tokens\" : [ {\n        \"token\" : \"東京\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 2,\n        \"type\" : \"word\",\n        \"position\" : 1\n      }, {\n        \"token\" : \"都\",\n        \"start_offset\" : 2,\n        \"end_offset\" : 3,\n        \"type\" : \"word\",\n        \"position\" : 2\n      }, {\n        \"token\" : \"渋谷\",\n        \"start_offset\" : 3,\n        \"end_offset\" : 5,\n        \"type\" : \"word\",\n        \"position\" : 3\n      }, {\n        \"token\" : \"区\",\n        \"start_offset\" : 5,\n        \"end_offset\" : 6,\n        \"type\" : \"word\",\n        \"position\" : 4\n      } ]\n    }*/\n\n最後にデフォルトでkuromojiを使うようにelasticsearch.ymlに以下の行を追加します。\n\n    index.analysis.analyzer.default.type: custom\n    index.analysis.analyzer.default.tokenizer: kuromoji_tokenizer\n\n# MongoDBの設定\n\nMongoDBからIndexを作成するelasticsearch-river-mongodbプラグインはReplicaSetを構築した際に作成されるoplog.rsコレクションを利用するのでReplicaSetを構築する必要があります。\n\n構築自体は1台構成でもいいのでmongoのコンソールから<code>rs.initiate()</code>を実行します\n\nしばらく待つと構築が終わるので<code>rs.config()</code>で結果を確認します。\n\n最後にElasticsearch側でCollectionとIndexの関連付けを行います。(DB名やIndex名は実際に使う名前を指定します)\n\n    $ curl -XPUT 'http://localhost:9200/_river/mongodb/_meta' -d '{\n      \"type\": \"mongodb\",\n      \"mongodb\": {\n        \"db\": \"DATABASE_NAME\",\n        \"collection\": \"COLLECTION\",\n        \"gridfs\": true\n      },\n      \"index\": {\n        \"name\": \"ES_INDEX_NAME\",\n        \"type\": \"ES_TYPE_NAME\"\n      }\n    }'\n\nこの時点でElasticsearchを再起動すると<code>NoShardAvailableActionException</code>という例外が出るんですが何故出るのか分からず調査中。検索自体は普通に出来ます。\n\n# Node.jsから呼び出す\n\n設定が終わってしまえばあとはMongoose等で普通にデータの追加や削除を行えばほぼタイムラグ無しにElasticsearch側に反映されます。\n\nElasticsearch側のインタフェースはREST APIなので普通にNode.jsからHTTPリクエストを投げれば良いんですがその辺をラップしてくれるライブラリがあります。\n\nまずはインストール\n\n    $ npm install elasticsearch\n\nサンプルとして以下のようなSchemaのコレクションを検索する処理を書きます。\n\n    {\n      subject: String\n      body: String\n    }\n\n例によってCoffeeScriptですがsubjectとbodyに対してキーワード検索するにはこんな感じで書きます。\n\n    log4js = require 'log4js'\n    logger = log4js.getLogger()\n    elasticsearch = require 'elasticsearch';\n    es = elasticsearch {_index: 'index_name', _type: 'type_name'}\n\n    search = (keyword, callback)->\n      es.search {query:{multi_match:{query: keyword, fields:['subject', 'body']}}}, callback\n\n    search('日本語全文検索', (err, data)->\n      if err\n        logger.error err\n      else\n        logger.debug data\n    )\n\nという感じで日本語全文検索出来るようにしただけで力尽きたので今日はここまで。\n\nそのうちこれを使って何か作ってみたいと思います。\n\n# 今日使った諸々のリンク\n\n* [Elasticsearch](http://www.elasticsearch.org/)\n  * [elasticsearch-analysis-kuromoji](https://github.com/elasticsearch/elasticsearch-analysis-kuromoji)\n  * [elasticsearch-river-mongodb](https://github.com/richardwilly98/elasticsearch-river-mongodb)\n* [MongoDB](http://www.mongodb.org/)\n* [Node.js](http://nodejs.org/)\n  * [node-elasticsearch](https://github.com/ncb000gt/node-elasticsearch)","key":"elastic_search"}],"2013/05":[{"title":"Google Readerが終わるそうなので","category":"programming","timestamp":"2013-05-01T10:10:15+09:00","thumbnail":"//farm4.staticflickr.com/3365/3541653049_a3e8534a8e_o.jpg","body":"7月にGoogle Readerがサービス終了とのことですが、個人的には使いまくってるのでちょっと困ります。\n\nそこで一念発起して**ちょうどGW入ったし今から作り始めれば自分が使いよいのが作れるだろう**ということで大まかに作ってみました。\n\n<!-- more -->\n\nというわけで、作りかけのサイトが[こちら](http://www.sevenspirals.net:3001/)。\n\n開発中なので常時動かしてるわけではありませんが。\n\nちなみにport3000にアクセスするとちょっとしたホラーが。\n\nあとは既読の記事は非表示にする機能と登録したFeedの変更削除が出来れば自分が最低限使いたい機能は揃うのでGoogle Readerから離脱しつつこっちの機能追加をしていこうと思います。\n\n・・・というかなんで個人用なのに認証機能付けたんだ。＜自分","key":"feed_reader"}],"2013/01":[{"title":"WPFでMVVMパターン(1)","category":"programming","timestamp":"2013-01-26T13:03:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"今更という感じはかなりしますが、[今こそWPF!](http://www.slideshare.net/Yamaki/wpfwpf)というわけでWPFとMVVMのお勉強を始めました。\n\n今回は第1回ということでMVVMについて勉強したことのまとめです。\n\n<!-- more -->\n\n## WPFって？\n.NET Framework3.0から追加されたUIシステムで、Direct3Dを介して描画することでGPU支援が受けられます。\n\nまた、ベクトルグラフィックスで拡大縮小が出来たりXPSフォーマットをサポートしており、画面に表示されている内容そのまま印刷出来るらしいです。(印刷はまだ試したことないっす)\n\nそしてWPFのUIはXAMLで記述され、ロジックが記述されたソースコードと完全に切り離すことが出来ます。また、コントロールの見た目を大きくカスタマイズ出来るため、見た目を変えるためにわざわざユーザーコントロールを作って、と言うことは殆どしなくてよくなります。\n\nこのロジックとUIを切り離せるというのが今回の肝ですね。\n\n## MVVMって？\nMVCパターンの派生パターンの一種で、元々はViewとロジックの分離というMVCの思想をWPFやSilverlightで実現するために生まれた考え方です。(直接の親はPresentation Modelパターンですけど)\n\n従来のMVCパターンではControllerはViewへの入力をイベントとして受け取ってModelのメソッドを呼んでロジックを実行していました。\n\n図にすると以下のような感じ。\n\n---\n\n![](http://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/ModelViewControllerDiagram2.svg/313px-ModelViewControllerDiagram2.svg.png)\n\nImage By [Wikipedia](http://ja.wikipedia.org/wiki/Model_View_Controller)\n\nただ、Controllerは入力に対する応答としてViewを操作することはありますが、ロジックの実行で変更されたModelの状態については関知しないのでViewはModelの変更を監視(イベントで通知する事もありますが)し、自身の描画を更新する必要がありました。\n\nここで問題になるのがViewがModelの変更を監視して自身の描画を更新するというところで、例えば\"金額がマイナスになったら文字を赤くする\"等のロジックをどうするかです。\n\n画面に依存する問題なのでModelに持たせるのは変なのでまあ、Viewに持たせるわけですが、Viewにロジックを持たせてしまうとテストが大変です。\n\nそこで、画面に表示する状態を持つPresentation Modelという役割を追加してViewは文字の色もModelのプロパティもボタンを操作した際のイベントすらもデータバインディングで自動的に反映するだけで済むようにすればModelを監視しなくて良いしViewとロジックを完全に分離できるよね。というのがMVVMの親になったPresentation Modelパターンの考え方です。\n\nMVVMを図にするとこんな感じ。(Presentation Modelもほぼ同じ)\n\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png\">\n\nImage By [Wikipedia](http://ja.wikipedia.org/wiki/Model_View_ViewModel)\n\nデータバインディングで自動的にというのが重要でこの仕組みを全部手書きで実現すると手間がかかりすぎてViewとロジックは分離できるかも知れませんが肝心のロジックを書く時間等大事な物を失ってしまいそうです。なのでWPFというかMVVMに手を出すときはデータバインディング(或いはその類似技術)重要。\n\nMVVMとPresentation Modelの違いは、MVVMはそこからさらに進んでWPFやSilverlightはViewを完全にXAMLだけで記述することでViewを完全に抽象化出来る(ViewModelに対して複数のViewを切り替えられる)ことで、なのでXAMLのような技術が無く、Viewを完全に抽象化出来ないMVVMパターンはPresentation Modelパターンと変わらないらしいです。\n\n---\n\n## まとめ\n* MVVMはMVCの一種てPresentation Modelの子供\n* MVCではView絡みのロジックの受け入れ先がないという問題を解決するためにPresentation Model(他の派生パターンも)が生まれた\n* プロパティもイベントも状態も自動的に反映する。データバインディング重要\n* MVVMとPresentation Modelはほぼ一緒だけどWPFのMVVMはViewを抽象化できる\n\nWPFが見当たりませんが(おい)、まとめるとこんな感じでしょうか、次回からは実際にVisualStudioでModel、View、ViewModelを作っていこうと思います。\n\n## 参考\n* [今さらWPF？いいえ、今こそWPF！](http://www.slideshare.net/Yamaki/wpfwpf)\n* [「MVVMパターンが必要な理由」啓蒙用資料公開](http://ugaya40.net/mvvm/mvvm_document.html)\n* [MVCパターン@Wikipedia](http://ja.wikipedia.org/wiki/Model_View_Controller)\n* [MVVMパターン@Wikipedia](http://ja.wikipedia.org/wiki/Model_View_ViewModel)","key":"mvvm_1"},{"title":"Hearthfireはじまりました - Skyrimプレイ日記","category":"skyrim","timestamp":"2013-01-26T21:24:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-gHcYGyZ6Ft8/UQPOexOKMjI/AAAAAAAABEg/ECqsnEaQlyc/s288/ScreenShot18.jpg","body":"というわけでしばらく間が空きましたが細々と続けてます。\n\nメインクエストの\"創始者の角笛\"でウステングラブに行く途中に立ち寄ったモーサルでのクエストを解決した報酬で土地が買えるようになったのでやっとこさHearthfireが始まりました。\n\n<!-- more -->\n\n# 建築風景\n\n![](https://lh4.googleusercontent.com/-Xln9piDf9ho/UQPOexYVOKI/AAAAAAAABEk/Tr3a9bev4U8/s800/ScreenShot3.jpg)\n\n購入した土地に設置されている建築ツールから家の建築を行います。\n\nまず最初は小さい家からスタート、ここに建てますよっと。\n\n![](https://lh4.googleusercontent.com/-6vt1nwPNZ0g/UQPOfMe4R8I/AAAAAAAABEw/UE8VIFmhFLA/s800/ScreenShot4.jpg)\n\n土台を設置。夜が深まって来て暗くて見づらいですが気にせず建築。＜まてや\n\n![](https://lh6.googleusercontent.com/-xc4ui7EdQog/UQPOfu-IH2I/AAAAAAAABFA/XVbyifq8tJQ/s800/ScreenShot7.jpg)\n\n壁まで作った段階であまりにも暗かったので時間を飛ばして朝に。\n\n何故かリディアさんが頬を赤らめながら映り込んできました。\n\nRemodeled Armorを入れてるので北国なのに本当に大丈夫かという格好になっていますが元気に活躍してくれています。\n\n![](https://lh6.googleusercontent.com/-jtHme-yB-g8/UQPOgHJ2AmI/AAAAAAAABFM/F2kblARwp1E/s800/ScreenShot9.jpg)\n\n気を取り直して建築続行、屋根の骨組みまでできあがりました。\n\n![](https://lh3.googleusercontent.com/-xMuhVQw2X0Q/UQPOeR5mfFI/AAAAAAAABEU/FxzpkaXxJIw/s800/ScreenShot11.jpg)\n\nドアと屋根を張って完成。\n\nドアを設置するまではシームレスなので途中で止めてみるのもそれはそれで面白いかも知れません。\n\n![](https://lh4.googleusercontent.com/-oXTj-JWzRBQ/UQPOeg-KtBI/AAAAAAAABEY/q9OeaD8XcRc/s800/ScreenShot12.jpg)\n\n内装は初期状態では荷物置き用の宝箱があるだけです。\n\nとりあえずベッドくらいは置きたいですね。\n\nちなみに窓が明るいのはMOD(名前忘れた)を入れたから。\n\n# 感想\n\nとりあえず最初の小さい家を作ってみましたがなんというかやっぱり自分で建てると愛着が沸くもんですねー。\n\n釘を作ってるうちに鍛冶スキルがぐんぐん上がるドヴァキン。材料の鉄インゴットは結構消費するので集めておいた方が良いです。\n\nとりあえずベッドと物置が出来て動きやすくなったので内装を作りながら再びメインクエストを進めていこうと思います。\n\n# Dawnguardは・・・？\n\n・・・いや、Dawnguard再編の噂は聞いてるんですがなかなかリフテンまで行く用事が無くて絶賛放置中です。\n\nPCで日本語版Dragonbornが出るまでにはなんとか・・・。","key":"playlog2"},{"title":"プログラムでプログラムを自動生成する","category":"programming","timestamp":"2013-01-25T19:11:00+09:00","thumbnail":"http://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg/300px-Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg","body":"タイトルと写真でT4 Text Templateの話なんだなと一発で分かりますね。\n\nどうしてこうなったと思わなくもないですが、仕事でプログラムを書いていると時々同じような処理を繰り返し書くという事態に遭遇することがあります。\n\n大抵はスタブやプロパティの転記、Excel定義書からのエンティティクラスの書き起こし等々、元ネタも決まってるので基本的に怠惰(爆)なプログラマーは速攻で自動生成しようとします。\n\nが、周りを見渡すと私のような怠惰な人間はあんまりいないのか結構な頻度で手書きで書いてたりします。\n\nなので何番煎じか分かったもんじゃありませんが、プログラムでプログラムを自動生成する方法について書きたいと思います。\n\n※ちなみに個人的にはExcel定義書に関してはこっちをコードから自動生成したいですが、今回は置いときます。\n\n<!-- more -->\n\n## 基本的な考え方\n例えばExcel定義書からエンティティを書き起こす場合だと、以下のような定義を延々書く羽目になると思います。\n\n※今回はCoffeeScriptじゃなくてC#です。\n\n    /// <summary>\n    /// 社員コード\n    /// </summary>\n    public int EmployeeCode{ get; set; }\n\nこの場合ですとおそらくExcel定義書には名前と型とIDくらいは最低限書いてあるんだと思いますが、項目が100も200もあった日にはC#の自動プロパティで少し楽になった程度では割に合わないくらい手間がかかります。\n\nというか私の場合手で書いたら途中で絶対ミスる。\n\nこの例の場合、\"社員コード\"、\"int\"、\"EmployeeCode\"以外は定型です。\n\nですので、何らかの手段でExcelの中身を読み込めば以下のような処理で出力できます。\n\n※今回Excelのデータを読み込む処理自体は割愛します。\n\n    foreach(Field field in fields){\n      Console.WriteLine(\"/// <summary>\");\n      Console.WriteLine(\"/// {0}\", field.Name);\n      Console.WriteLine(\"/// </summary>\");\n      Console.WriteLine(\"public {0} {1}{{ get; set; }}\", field.Type, field.Id);\n    }\n\nこのように定型の部分を抽出してプログラムで出力しようというのが基本の考え方です。\n\n## T4 Text Template\nで、上記のようにプログラムを書いてもいいんですが、書式が変わる度にいちいちプログラムを再コンパイルするのも面倒です。\n\nなので面倒でないようにVisual Studioにはそのための仕組みが用意されています。それがT4 Text Template。\n\n使い方は簡単。プロジェクトに<code>新しい項目の追加</code>から<code>テキストテンプレート</code>を選んで新規作成します。ちなみに拡張子は.ttです。\n\nT4 Templateに先ほどのプログラムを移植すると以下のようになります。\n\nせっかくなのでクラス定義丸ごと生成するようにしてみました。\n\n    <#@ template debug=\"false\" hostspecific=\"false\" language=\"C#\" #>\n    <#@ assembly name=\"System.Core\" #>\n    <#@ import namespace=\"System.Linq\" #>\n    <#@ import namespace=\"System.Text\" #>\n    <#@ import namespace=\"System.Collections.Generic\" #>\n    <#@ output extension=\".cs\" #>\n    <#\n      /* 項目の定義を取得する */\n    #>\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace foo.dto {\n      public class <#= className#>\n      {\n    <#  Generate(fields, (field)=>{#>\n        /// <summary>\n        /// <#= field.Name #>\n        /// </summary>\n        public <#= field.Type #> <#= field.Id #>{ get; set; }\n    <#});#>\n      }\n    }\n    <#+\n    void Generate<T>( IEnumerable<T> seq, Action<T> action )\n    {\n      foreach( var item in seq ) { action(item); }\n    }\n    #>\n\nざっくり解説すると地の文はそのまま出力され、<code><#= #></code>は変数の中身に置換されます。\n\nまた、<code>&lt;# #&gt;</code>で囲まれた部分はC#のプログラムとして実行されるのでこれを駆使してコードを生成します。\n\n<code><#+ #></code>で囲まれた部分はクラス定義としてメソッド等が定義できます。ここでは<code>Generate</code>という要素の集合を出力するためのメソッドを定義しています。\n\nこの手法は[こちら](http://kazuktnd.wordpress.com/2010/08/13/csproj-user-%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE-t4-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/)で紹介されていて便利なのでそのまま使っています。\n\n<code><#@ assembly name=\"\"#></code>はその名の通りアセンブリでTemplate内でロードするクラスライブラリを指定します。GACに登録されていれば名前を指定するだけで読み込めます。\n\n<code><#@ import namespace=\"\"#></code>は<code>using</code>と同じ意味です。\n\n基本的にC#で出来ることは全部出来るので例えば<code><#@ assembly name=\"\"#></code>で外部のライブラリを使ってExcelファイルを読み込む等々かなり複雑なことまで出来ます。\n\n## まとめ\n\nなかなか日々の作業に追われていると、とにかく数をこなそうと頑張りがちです。\n\nただ、あまりに効率が悪いうえに頑張ったあげくにミスとか悲しすぎるので、**楽しようよ**。(魂の叫び)","key":"t4_tamplate"}],"2015/07":[{"title":"左利きのペン事情","category":"stationery","timestamp":"2015-07-19T21:00:00+09:00","thumbnail":"https://lh3.googleusercontent.com/-bHJjzQZNQnQ/Vaq3p0Jc2JI/AAAAAAAADs0/aPDbxEDpmwM/s800-Ic42/dce0b4c6d29dbcbb4dd4f86a3640306f_m.jpg","body":"特に手書きが必須な職業ではないので、一般的には普段使いのペンと言えばボールペンで良いとは思いますが、昔から私はボールペンだと字が上手く書けません。というかそもそもちゃんと線が引けません。\n\n右利きの人に渡すと普通に書けるのでペンが壊れてるわけでもなく、多分自分が左利きのせい。\n\n左利き全般がそうなのかは分かりませんが同じ悩みを抱えてる人もいるんじゃないかというわけで、備忘録も兼ねて普段使ってるペンについて書きたいと思います。\n\n<!-- more -->\n\n# 左利きがボールペンと相性が悪い理由\n\nボールペンの構造として軸にはさまれたボールが回転してインクが出る構造になっていますが、以下の理由で左利きの書き方と相性が悪いようです。\n\n* ボールペンはある程度傾けて書いたほうがボールの回転がよくなるが、手が汚れないようにペンを立てて書くため、ボールの回転が悪くなる。\n* かといって右手で持つのと同じように左手で書くと常に押し書きになり、ボールに圧力がかかり回転が悪くなる。\n\nあれ、詰んだ・・・。\n\n## なんとかして左利きでボールペンで書くなら\n\nボールの転がりやすさはペン先の太さやインクの粘性も関係があり、細字のゲルインキボールペンとか相性は最悪です。\n\n逆に何とかしてボールペンで書く場合、太字で油性インクのボールペンかタンクにある程度圧力がかかっていて押し書きでもインクが出るボールペンなら比較的書きやすいです。\n\n店頭で試し書きした感じだと、三菱鉛筆のJETSTREAMとかパワータンクの0.7mmとかが書きやすかったです。\n\nまあ、それでも字がかすれたりインクが玉になったりするのが皆無にはなりませんが、書けるだけでもだいぶストレスは違います。\n\n# ボールペン以外に解決策を求める\n\n書けなければ使わなければ良いじゃないという訳で、さくっとボールペンを捨てて別のペンに解決を求めることにしましょう。\n\nというわけで、ここからは私が使って書けたペンをつらつらと紹介します。\n\n## 鉛筆系\n\n恐らく説明不要ですが、顔料を固めた芯を紙にこすりつけ顔料の軌跡を残すことで筆記する筆記具です。\n\nペンの向きや持ち方の影響をあまり受けないので左利きでも問題無く書けます。\n\n### 鉛筆\n\nこれも恐らく説明不要ですが、芯を木で挟んだいわゆる一般的な鉛筆です。\n\n左利きでも書けますが、消せるということが利点でも欠点でもあるためこれだけで全てまかなうのは大変です。\n\nあと削らないと使えないのが微妙にめんどい。\n\n### シャープペン\n\n鉛筆より細い（0.5mmとか）芯を樹脂や金属の軸で固定して使う筆記具で、現在ではノック式で芯を繰り出して使うものが殆どです。（他にもノック式発明以前は主流だった回転式といってネジの回転で芯を繰り出す機構のものもあります。）\n\n削らずに使える鉛筆の代替として使われています。欠点は芯が細いので折れにくい芯を作ることを優先しているため書き味が悪い（気がする）こととそれでも細いので結局は筆圧が高いとボキボキ折れること。\n\n### 芯ホルダー\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>鉛筆系は今はこれを使ってます。作りはだいたいシャープペンと同じですが、2mmとかの太い芯を使うため、簡単には折れません。</p>\n<p>使用感もシャープペンというよりは鉛筆に近く、絵描きにお勧めです。</p>\n<p>私はステッドラー社のMARS 780Cというのを使ってます。</p>\n<p>工業デザイナーのジョルジェット・ジウジアーロ氏が愛用していることで有名で本来は製図用ですが、\n私は（今は製図はしないので）絵を描いたり思いつきをあーでもないこーでもないと書き殴ったり消したりとかいうのに使ってます。</p>\n<p>シャープペンと同じく芯を繰り出せば削らずに書けますが、シャープペンと違ってだんだん太くなるので、とがらせるには専用の芯削りで芯をとがらせる必要があります。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B000WL4WEC&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n## 万年筆系\n\n毛細管現象という仕組みでインクをペン先に送りこんで筆記する筆記具で、高級文具の代表格ですが安いのもあります。\n\n先端にペンポイントという耐摩耗性の高い玉が溶接されており、メンテナンスさえ怠らなければ名前の通り半永久的に使えます。\n\n左利き用もありますが、筆圧を殆どかけずに書く事が出来るため、ペン先の向きさえ気をつければ左利きでも問題無く書けます。（結構ペンの向きにシビアなので持ち方を間違えると書けないです。）\n\n欠点はメンテナンスを怠ったり、しばらく使わなかったりするとインクが固まってすぐ書けなくなります。\n\nまた、かつては公文書の筆記は化学反応で定着するブルーブラックインクを使うため、万年筆かローラーボール（ほぼボールペン、インクが違う）しか使えない時代がありましたが、\n現在の万年筆はほぼ染料インクで特別耐久性が高い訳ではないのでサインペンの仲間扱いで使えない役所もあるようです。\n\n### プラチナ万年筆 プレピー\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>200円台で買える格安万年筆で、見た目は値段相応に安っぽいですが、ちゃんと万年筆ぽい書き味です。</p>\n<p>キャップにも乾燥対策のための工夫がしてあり、キャップさえしてあれば少しくらい使わなくても書けなくなったりはしません。</p>\n<p>安いので書けなくなったり無くしたりしてもダメージが少ないのが良いところ。</p>\n<p>ちなみに、他の格安ペンにも言えることですが、うっかり1本単位で通販で買うと本体と変わらない金額の送料が付いてきたりするするので注意。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001H06N3K&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### 無印良品 丸軸アルミ万年筆\n\nこちらは無印良品で売っている1000円くらいの格安万年筆です。\n\n200円のプレピーよりは高級感のある外見で値段も手頃。ちなみにOHTOのOEMで値段の割に出来も良いです。\n\nペリカン等のヨーロッパ標準規格のコンバーターが使えるのでカートリッジだけでなくボトルインクを使うことも出来ます。\n\nペン先も海外規格なのか日本のペンよりも若干太字ですがインクフローもよく書きやすかったです。（ただし安いので個体差があるかも）\n\nこの辺使ってみて良いなと思ったらラミーのサファリとか3000円～のものに手を出すと良いと思います。\n\nこのクラス以上になると左利き用もありますし、お金を出して調整しようかという気分にもなってきます。\n\n## ファイバーチップペン系\n\n樹脂製のペン先にインクを送って書くタイプの筆記具です。\n\nペンの角度や向きにシビアでないペンが多く、左利きでも書きやすいですが、ペン先が弱く筆圧が強いと壊れたり、\nまたそうでなくても使っているうちに摩耗していくため使い捨てのペンが多いです。\n\n### ぺんてる プラマン\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>どちらかというと万年筆の仲間のような気もしますが、一応プラスチック（樹脂）製なのでこちらに。</p>\n<p>より安価で使いやすい万年筆をということで開発されたプラスチック製のペン先の万年筆です。</p>\n<p>結果、万年筆とはまた違った独特の書き味となっており、そのためファンも多いです。</p>\n<p>さすがに本家の万年筆と違ってプラスチックのペン先は書いているうちに摩耗するため使い捨てで、\n本体ごと使い捨てのプラマンと軸はそのままでペン先付きのインクカートリッジが交換できるトラディオプラマンの2種類があります。</p>\n<p>安価（使い捨てなら200円）で万年筆ほどペンの向きにシビアでなく、軽い筆圧でも書けるため、左利きでも非常に書きやすいのですが、\nインクの乾きが遅く手が汚れる上に手に付くと洗ってもなかなか落ちないのが困りどころ。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B0017OR05Q&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### Parker 5th\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>似てるので勢いでここに入れちゃいましたが、あんまり自信が無い・・・。</p>\n<p>鉛筆でもボールペンでもローラーボールでも万年筆でもない第5の筆記具ということで5thという名前なのだそうです。</p>\n<p>ペン軸もほどよく重く、引っかかり無くすらすらと書けますしインクの乾きも速いので書いてすぐ触ってもまず手が汚れることはありません。</p>\n<p>良いことずくめですがその分、値段もお高くペン自体が1万円～2万円くらいしますし、替え芯が1本1000円と高いためコストパフォーマンスは非常に悪いです。</p>\n<p>このペンもペン先が摩耗する（元々割と太字なため、最後の方は結構太くなります）ためインクはペン先ごと交換するようになっています。</p>\n<p>また、非常に紙を選び、普通の万年筆なら大丈夫な紙でもあっさり裏写りしたりします。</p>\n<p>以前は普段使いで使ってましたが何度か無くしそうになる上に無くすとダメージでかいため、今は何か気が乗らないときに気合い入れて書くために使ってます。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B00BY1EJY2&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n### サクラクレパス PIGMA (ミリペン)\n\n<div class=\"row\">\n<div class=\"col-md-9\">\n<p>巡り巡って現在主に使用しているペン。</p>\n<p>ペンの太さがミリ単位で記載されていることから通称ミリペンと呼ばれているペンでいろんなメーカーが販売しています。</p>\n<p>コミックやイラストのペン入れに使う画材だったりしますが、細く一定の線が書けるのでメモ帳や手帳に書き込むのにも向いています。</p>\n<p>種類があってどれを買うか迷ったんですが、メジャーで評価が高いという噂のサクラクレパスのPIGMAシリーズを選びました太さは03の黒、青、赤を使ってます。</p>\n<p>耐水性の顔料インクで乾きも速く、乾くと水に濡れてもにじまないため、外でメモするのに向いてます。</p>\n</div>\n<div class=\"col-md-3\">\n<iframe src=\"https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001GR4C6Y&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>\n</div>\n</div>\n\n# 紙との相性\n\n鉛筆やボールペンで問題になることは少ないでが、殆どの筆記具は紙との相性があります。\n\nどうにもならないところでいうと、万年筆やファイバーチップペンは筆圧をかけて書く事が出来ないため、カーボン紙などの複写式の用紙に書くことが出来ません。\n\nまた、特に万年筆や、プラマン、Parker 5thなどは万年筆を想定した手帳用の紙でないとインクが裏に抜けて両面に書けなかったりします。\n\n機会があればノートやメモ帳、手帳などの話も書きたいと思います。\n\n# まとめ\n\n改めて書き出してみると、私の場合、最終的には芯ホルダーやミリペン等、筆記具というか画材寄りの道具に落ち着くようです。\n\nでも万年筆はまた使いたい。（ラミーのサファリ辺りを買おうかな。）","key":"left_handed_pen"}],"2013/02":[{"title":"WPFでMVVMパターン(2) - Model編","category":"programming","timestamp":"2013-02-17T13:26:00+09:00","thumbnail":"https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png","body":"というわけで[前回](/2013/01/26/mvvm_1/)に引き続いてMVVMネタです。\n\n今回はModelを作ります。\n\n<!-- more -->\n\n# とりあえずModelから\n\nどういう順番で作るのが正解なのかよく分かりませんが、私はだいたいModelから作り始めます。\n\n理由は単純で**Modelは絶対必要だから**。\n\n他の要素、ViewModelだけで無く(GUI的な)Viewも絶対必要とは考えません。この時点ではConsoleアプリケーションから呼び出して使うつもりで作りはじめます。その方がテストが書きやすい(気がする)ので。\n\nだいたい、それ以外の機能はView作ってみて機能が足りなかったらViewModelに押しつけりゃいいというのが私の考えです。(いい加減)\n\n# さくっとコーディング\n\nModel作成の時点では特にMVVMパターンだからどうという作法はあまりないので好きに作ります。＜おい\n\nというわけでVisual StudioでWPFアプリケーションを作成して下記のクラスを追加しました。\n\n## Model.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.ComponentModel;\n    using System.Collections.ObjectModel;\n\n    namespace MVVM\n    {\n        public class Model : INotifyPropertyChanged\n        {\n            ObservableCollection<DetailModel> _details;\n            public ObservableCollection<DetailModel> Details\n            {\n                get { return _details; }\n            }\n\n            public event PropertyChangedEventHandler PropertyChanged;\n\n            public Model()\n            {\n                _details = new ObservableCollection<DetailModel>();\n            }\n\n            public void Order()\n            {\n                /* なんらかの注文ぽい処理をするのだと思われる */\n\n                foreach (DetailModel detail in _details)\n                {\n                    Console.WriteLine(\"Key:{0}\\\\tCode:{1}\\\\tName:{2}\\\\tPrice:{3}\\\\tCount:{4}\", detail.Key, detail.Code, detail.Name, detail.Price, detail.Count);\n                }\n            }\n        }\n    }\n\n## DetailModel.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.ComponentModel;\n\n    namespace MVVM\n    {\n        public class DetailModel :INotifyPropertyChanged\n        {\n            public Guid _key;\n            public Guid Key\n            {\n                get\n                {\n                    return _key;\n                }\n            }\n\n            public string _code;\n            public string Code\n            {\n                get\n                {\n                    return _code;\n                }\n                set\n                {\n                    if (!string.IsNullOrEmpty(value) && !value.Equals(_code))\n                    {\n                        _code = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Code\"));\n                    }\n                }\n            }\n\n            public string _name;\n            public string Name\n            {\n                get\n                {\n                    return _name;\n                }\n                set\n                {\n                    if (!string.IsNullOrEmpty(value) && !value.Equals(_name))\n                    {\n                        _name = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Name\"));\n                    }\n                }\n            }\n\n            public decimal _price;\n            public decimal Price\n            {\n                get\n                {\n                    return _price;\n                }\n                set\n                {\n                    if (_price != value)\n                    {\n                        _price = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Price\"));\n                    }\n                }\n            }\n\n            public uint _count;\n            public uint Count\n            {\n                get\n                {\n                    return _count;\n                }\n                set\n                {\n                    if (_count != value)\n                    {\n                        _count = value;\n                        if (PropertyChanged != null)\n                            PropertyChanged(this, new PropertyChangedEventArgs(\"Count\"));\n                    }\n                }\n            }\n\n            public event PropertyChangedEventHandler PropertyChanged;\n\n            public DetailModel()\n            {\n                _key = Guid.NewGuid();\n                _code = \"\";\n                _name = \"\";\n                _price = 0;\n                _count = 0;\n            }\n\n            public DetailModel(string code, string name, decimal price, uint count)\n            {\n                _key = Guid.NewGuid();\n                this.Code = code;\n                this.Name = name;\n                this.Price = price;\n                this.Count = count;\n            }\n        }\n    }\n\n明細モデル（ただのデータオブジェクトですが）のコレクションと注文の操作を持つModelですけど長いよ・・・。\n\n普通に何も考えずに書くときとの違いは、Modelの操作によってプロパティが更新された際にViewModelに通知する事を考えて、<code>INotifyPropertyChanged</code>を継承していることと同じくコレクションの変更を通知できるように<code>List&lt;T&gt;</code>ではなく、<code>ObservableCollection&lt;T&gt;</code>を使っているところでしょうか。\n\nただまあ、このパターンだと操作した結果、値が変わるような事は無さそうなのでアレですが。\n\n# Consoleアプリで実行\nModel単体では実行できないのでConsoleアプリを作って実行してみます。\n\nソリューションにConsoleアプリケーションのプロジェクトを追加して、先ほど作ったWPFプロジェクトを参照に追加します。\n\nそこに先ほど作ったModelを呼び出すコードを追加します。こんな感じ。\n\n## Program.cs\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace TestConsole\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                var model = new MVVM.Model();\n\n                model.Details.Add(new MVVM.DetailModel(\"A001\", \"リンゴ\", 100, 1));\n                model.Details.Add(new MVVM.DetailModel(\"A002\", \"みかん\", 80, 3));\n\n                model.Order();\n\n                Console.Read();\n            }\n        }\n    }\n\nで、おもむろに実行。出力は以下のようになりました。\n\n    Key:e2c9eec2-5b90-4072-a646-c1136ee458b9       Code:A001      Name:リンゴ      Price:100      Count:1\n    Key:1e28e2fe-9574-4238-bb16-c7013ab698ec       Code:A002      Name:みかん      Price:80       Count:3\n\nまあ、さすがにちゃんと動いてるようですね。\n\n今回は単純なModel&amp;手を抜いてConsoleアプリで実行してますが、実際にはNUnit等でちゃんとしたテストを書いてJenkinsで実行するといいと思います。というかしましょう。私含めて。＜やってないのかよ\n\n特にリグレッションテストってある日突然情熱に目覚めて、やろう。と思ってもいざやると機能を追加する度にやることが加速度的に増えて心が折れがちです。\n\nなのでロジックの部分をあらかじめテストしやすいように作るのが大事なんだと思います。\n\n<br/>\n\nというところで今回はここまで。次回はViewModel・・・をすっ飛ばしてViewを作ろうと思います。","key":"mvvm_2"},{"title":"Ruby2.0リリース&amp;20周年おめでとうございます","category":"programming","timestamp":"2013-02-24T23:43:00+09:00","thumbnail":"https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png","body":"えーっとタイトルだけ言いたかっただけです。(爆)\n\nRuby2.0についてはRails4.0の推奨が速くも（というかリリース前から）2.0推奨なので今度インストールしてみようと思います。\n\nというわけで、おやすみなさい。","key":"ruby_2_0_0"}],"2015/06":[{"title":"トラベラーズノートのお手入れ","category":"stationery","timestamp":"2015-06-29T01:00:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG","body":"恐ろしいことにトラベラーズノート買った時の記事以降、まるでブログの記事を書いてない上にまたトラベラーズノートの記事になります。\n\nというわけで以前買ったトラベラーズノートですが、半年ほど手入れせずに使っていたのでここで一度手入れをしておこうということで、カバーの手入れをしました。\n\n<!-- more -->\n\n## 早速準備\n\n本当はミンクオイルとか革用のオイルやクリームを塗るらしいんですが、あいにくそんな物は持ってない＆買いに行くのも面倒なので手近な代用品がないか探したところ、結構あっさり見つかりました。\n\n<img src=\"https://lh3.googleusercontent.com/-bqFVyra29ys/VZAsssknaQI/AAAAAAAADpY/VvznF8CeZZA/s640/IMG_0105.JPG\" />\n\n安くて万能の呼び声高いニベアのスキンケアクリーム。\n\n肌だけでなく革製品も割とこれでいけるらしいです。\n\n缶だったりチューブだったりしますがコンビニでも普通に売ってるので入手性は抜群。\n\n## 手入れ前の状態\n\n<img src=\"https://lh3.googleusercontent.com/-D8HqpiIsRtU/VZAbYz6ObpI/AAAAAAAADoU/s3s4bXP9J9A/s640/IMG_0100.JPG\" />\n\n手入れ前のカバー。\n\n基本的にはロディアにメモを書いた後そのままデジタル化することも多いのでそんなに使い込んでいるわけではないのですが、それでも結構傷だらけですね。\n\nこれから汚れを拭き取ってクリームを塗っていきます。\n\n## ニベアを塗りたくる\n\n<img src=\"https://lh3.googleusercontent.com/-Yg4ur0tVQq0/VZAmJ1wpRBI/AAAAAAAADoo/q5IZaWm5vQ4/s640/IMG_0101.JPG\" />\n\nクリームを塗ったところ。なんかピンぼけしてますね。\n\nクリーム自体はどんどん吸収されていくので思い切って塗りたくります。\n\nただ半分は自分の手が吸収してるような気もする・・・。\n\n## 完成\n\n<img src=\"https://lh3.googleusercontent.com/-_Et8E9RGtkk/VZAmQ9QigsI/AAAAAAAADow/K0COgTZgFZY/s640/IMG_0104.JPG\" />\n\n最後に乾いた布で軽く拭いておしまい。\n\nだいぶ傷が目立たなくなって手触りも良くなった気がします。\n\nクリームにオイルも含まれているので若干防水効果もあるんじゃないかと思います。\n\n## 感想\n\nとりあえず思ったこと。<strong style=\"font-size:1.5em;color:red;\">ニベアすげー。</strong>","key":"tn_maintenance"}],"2014/10":[{"title":"システム手帳からトラベラーズノートに乗り換えてみた","category":"stationery","timestamp":"2014-10-19T16:17:00+09:00","thumbnail":"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG","body":"少し前の話なんですが、これまで<a href=\"http://www.raymay.co.jp/davinci/contents/davinci/justrefill/lineup.html\">ダヴィンチのシステム手帳</a>(ジャストリフィルのバイブルサイズ)を使っていたのですが、<del>iPhone6もデカくなったしデカいのがこれから流行るんじゃないか・・・</del>今まで財布と兼用してたけど新しく財布を買ったりなんだりで、必ずしもポケットに入れなくても良くなったので前から気になってた<a href=\"http://www.midori-japan.co.jp/tr/trnotebook/products/\">トラベラーズノート</a>(茶・レギュラーサイズ)を買ってみました。\n\n<!-- more -->\n\n<img src=\"https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s400/IMG_0066.JPG\" alt=\"トラベラーズノート\">\n\nチャームとか付けてみた。\n\n表面処理してないので傷はガンガン付きます。ちなみに、ハート型の傷は塚田農場でもらったシールを貼って剥がした痕です。\n\n中身はコクヨの<a href=\"http://www.kokuyo-st.co.jp/stationery/feature/jibun_techo/contents.html#idea\">ジブン手帳の中のIDEA</a>をカットして使ってます。(<a href=\"http://bungu.plus.co.jp/sta/product/note/cacrea/\">Ca.CreaのA4x1/3サイズ</a>にしたかったけどインクの裏写りが酷かったので使えず、残念。)\n\nまあ、殆どの場合、<a href=\"http://www.kokuyo-st.co.jp/stationery/tidbit/\">チビット</a>を貼る台紙と化しているのであんまり関係なかったりはしますが・・・。\n\nこのサイズになると、さすがにポケットには入らないのでメモ帳としてチビットのA7を使ってます。試しに今は横罫カットのものを使ってますが次はブロックのに変える予定。(やっぱりチビットはブロックのが楽しい。)\n\nところで、使ってるとメモ帳にもカバーが欲しくなってきたりするわけですが、チビットのA7ってトラベラーズノートのパスポートサイズに収まるんでしょうか。(チビットってちょっとサイズが変則的なので)\n\nとりあえず今度買って試してみようと思います。\n\n<br />\n<br />\n\n以上、<strong style=\"font-size:1.5em;color:red;\">たまにはプログラミング以外の記事も書くんだぜアピール</strong>でした。","key":"travelers_note"}]}}