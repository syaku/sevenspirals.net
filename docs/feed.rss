<!DOCTYPE xml>
<rss version="2.0">
    <channel>
       <title>SEVENSPIRALS</title>
       <link>https://www.sevenspirals.net/</link>
       <description>日々思いついたことをつらつらと書いているブログ</description>
       
           <item>
               <title>左利きのペン事情</title>
               <guid>https://www.sevenspirals.net/2015/07/19/left_handed_pen/</guid>
               <link>https://www.sevenspirals.net/2015/07/19/left_handed_pen/</link>
               <description><![CDATA[<img src='https://lh3.googleusercontent.com/-bHJjzQZNQnQ/Vaq3p0Jc2JI/AAAAAAAADs0/aPDbxEDpmwM/s800-Ic42/dce0b4c6d29dbcbb4dd4f86a3640306f_m.jpg'><p>特に手書きが必須な職業ではないので、一般的には普段使いのペンと言えばボールペンで良いとは思いますが、昔から私はボールペンだと字が上手く書けません。というかそもそもちゃんと線が引けません。</p>
<p>右利きの人に渡すと普通に書けるのでペンが壊れてるわけでもなく、多分自分が左利きのせい。</p>
<p>左利き全般がそうなのかは分かりませんが同じ悩みを抱えてる人もいるんじゃないかというわけで、備忘録も兼ねて普段使ってるペンについて書きたいと思います。</p>
<!-- more -->
<h1 id="-">左利きがボールペンと相性が悪い理由</h1>
<p>ボールペンの構造として軸にはさまれたボールが回転してインクが出る構造になっていますが、以下の理由で左利きの書き方と相性が悪いようです。</p>
<ul>
<li>ボールペンはある程度傾けて書いたほうがボールの回転がよくなるが、手が汚れないようにペンを立てて書くため、ボールの回転が悪くなる。</li>
<li>かといって右手で持つのと同じように左手で書くと常に押し書きになり、ボールに圧力がかかり回転が悪くなる。</li>
</ul>
<p>あれ、詰んだ・・・。</p>
<h2 id="-">なんとかして左利きでボールペンで書くなら</h2>
<p>ボールの転がりやすさはペン先の太さやインクの粘性も関係があり、細字のゲルインキボールペンとか相性は最悪です。</p>
<p>逆に何とかしてボールペンで書く場合、太字で油性インクのボールペンかタンクにある程度圧力がかかっていて押し書きでもインクが出るボールペンなら比較的書きやすいです。</p>
<p>店頭で試し書きした感じだと、三菱鉛筆のJETSTREAMとかパワータンクの0.7mmとかが書きやすかったです。</p>
<p>まあ、それでも字がかすれたりインクが玉になったりするのが皆無にはなりませんが、書けるだけでもだいぶストレスは違います。</p>
<h1 id="-">ボールペン以外に解決策を求める</h1>
<p>書けなければ使わなければ良いじゃないという訳で、さくっとボールペンを捨てて別のペンに解決を求めることにしましょう。</p>
<p>というわけで、ここからは私が使って書けたペンをつらつらと紹介します。</p>
<h2 id="-">鉛筆系</h2>
<p>恐らく説明不要ですが、顔料を固めた芯を紙にこすりつけ顔料の軌跡を残すことで筆記する筆記具です。</p>
<p>ペンの向きや持ち方の影響をあまり受けないので左利きでも問題無く書けます。</p>
<h3 id="-">鉛筆</h3>
<p>これも恐らく説明不要ですが、芯を木で挟んだいわゆる一般的な鉛筆です。</p>
<p>左利きでも書けますが、消せるということが利点でも欠点でもあるためこれだけで全てまかなうのは大変です。</p>
<p>あと削らないと使えないのが微妙にめんどい。</p>
<h3 id="-">シャープペン</h3>
<p>鉛筆より細い（0.5mmとか）芯を樹脂や金属の軸で固定して使う筆記具で、現在ではノック式で芯を繰り出して使うものが殆どです。（他にもノック式発明以前は主流だった回転式といってネジの回転で芯を繰り出す機構のものもあります。）</p>
<p>削らずに使える鉛筆の代替として使われています。欠点は芯が細いので折れにくい芯を作ることを優先しているため書き味が悪い（気がする）こととそれでも細いので結局は筆圧が高いとボキボキ折れること。</p>
<h3 id="-">芯ホルダー</h3>
<div class="row">
<div class="col-md-9">
<p>鉛筆系は今はこれを使ってます。作りはだいたいシャープペンと同じですが、2mmとかの太い芯を使うため、簡単には折れません。</p>
<p>使用感もシャープペンというよりは鉛筆に近く、絵描きにお勧めです。</p>
<p>私はステッドラー社のMARS 780Cというのを使ってます。</p>
<p>工業デザイナーのジョルジェット・ジウジアーロ氏が愛用していることで有名で本来は製図用ですが、
私は（今は製図はしないので）絵を描いたり思いつきをあーでもないこーでもないと書き殴ったり消したりとかいうのに使ってます。</p>
<p>シャープペンと同じく芯を繰り出せば削らずに書けますが、シャープペンと違ってだんだん太くなるので、とがらせるには専用の芯削りで芯をとがらせる必要があります。</p>
</div>
<div class="col-md-3">
<iframe src="https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B000WL4WEC&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>
</div>

<h2 id="-">万年筆系</h2>
<p>毛細管現象という仕組みでインクをペン先に送りこんで筆記する筆記具で、高級文具の代表格ですが安いのもあります。</p>
<p>先端にペンポイントという耐摩耗性の高い玉が溶接されており、メンテナンスさえ怠らなければ名前の通り半永久的に使えます。</p>
<p>左利き用もありますが、筆圧を殆どかけずに書く事が出来るため、ペン先の向きさえ気をつければ左利きでも問題無く書けます。（結構ペンの向きにシビアなので持ち方を間違えると書けないです。）</p>
<p>欠点はメンテナンスを怠ったり、しばらく使わなかったりするとインクが固まってすぐ書けなくなります。</p>
<p>また、かつては公文書の筆記は化学反応で定着するブルーブラックインクを使うため、万年筆かローラーボール（ほぼボールペン、インクが違う）しか使えない時代がありましたが、
現在の万年筆はほぼ染料インクで特別耐久性が高い訳ではないのでサインペンの仲間扱いで使えない役所もあるようです。</p>
<h3 id="-">プラチナ万年筆 プレピー</h3>
<div class="row">
<div class="col-md-9">
<p>200円台で買える格安万年筆で、見た目は値段相応に安っぽいですが、ちゃんと万年筆ぽい書き味です。</p>
<p>キャップにも乾燥対策のための工夫がしてあり、キャップさえしてあれば少しくらい使わなくても書けなくなったりはしません。</p>
<p>安いので書けなくなったり無くしたりしてもダメージが少ないのが良いところ。</p>
<p>ちなみに、他の格安ペンにも言えることですが、うっかり1本単位で通販で買うと本体と変わらない金額の送料が付いてきたりするするので注意。</p>
</div>
<div class="col-md-3">
<iframe src="https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001H06N3K&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>
</div>

<h3 id="-">無印良品 丸軸アルミ万年筆</h3>
<p>こちらは無印良品で売っている1000円くらいの格安万年筆です。</p>
<p>200円のプレピーよりは高級感のある外見で値段も手頃。ちなみにOHTOのOEMで値段の割に出来も良いです。</p>
<p>ペリカン等のヨーロッパ標準規格のコンバーターが使えるのでカートリッジだけでなくボトルインクを使うことも出来ます。</p>
<p>ペン先も海外規格なのか日本のペンよりも若干太字ですがインクフローもよく書きやすかったです。（ただし安いので個体差があるかも）</p>
<p>この辺使ってみて良いなと思ったらラミーのサファリとか3000円～のものに手を出すと良いと思います。</p>
<p>このクラス以上になると左利き用もありますし、お金を出して調整しようかという気分にもなってきます。</p>
<h2 id="-">ファイバーチップペン系</h2>
<p>樹脂製のペン先にインクを送って書くタイプの筆記具です。</p>
<p>ペンの角度や向きにシビアでないペンが多く、左利きでも書きやすいですが、ペン先が弱く筆圧が強いと壊れたり、
またそうでなくても使っているうちに摩耗していくため使い捨てのペンが多いです。</p>
<h3 id="-">ぺんてる プラマン</h3>
<div class="row">
<div class="col-md-9">
<p>どちらかというと万年筆の仲間のような気もしますが、一応プラスチック（樹脂）製なのでこちらに。</p>
<p>より安価で使いやすい万年筆をということで開発されたプラスチック製のペン先の万年筆です。</p>
<p>結果、万年筆とはまた違った独特の書き味となっており、そのためファンも多いです。</p>
<p>さすがに本家の万年筆と違ってプラスチックのペン先は書いているうちに摩耗するため使い捨てで、
本体ごと使い捨てのプラマンと軸はそのままでペン先付きのインクカートリッジが交換できるトラディオプラマンの2種類があります。</p>
<p>安価（使い捨てなら200円）で万年筆ほどペンの向きにシビアでなく、軽い筆圧でも書けるため、左利きでも非常に書きやすいのですが、
インクの乾きが遅く手が汚れる上に手に付くと洗ってもなかなか落ちないのが困りどころ。</p>
</div>
<div class="col-md-3">
<iframe src="https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B0017OR05Q&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>
</div>

<h3 id="parker-5th">Parker 5th</h3>
<div class="row">
<div class="col-md-9">
<p>似てるので勢いでここに入れちゃいましたが、あんまり自信が無い・・・。</p>
<p>鉛筆でもボールペンでもローラーボールでも万年筆でもない第5の筆記具ということで5thという名前なのだそうです。</p>
<p>ペン軸もほどよく重く、引っかかり無くすらすらと書けますしインクの乾きも速いので書いてすぐ触ってもまず手が汚れることはありません。</p>
<p>良いことずくめですがその分、値段もお高くペン自体が1万円～2万円くらいしますし、替え芯が1本1000円と高いためコストパフォーマンスは非常に悪いです。</p>
<p>このペンもペン先が摩耗する（元々割と太字なため、最後の方は結構太くなります）ためインクはペン先ごと交換するようになっています。</p>
<p>また、非常に紙を選び、普通の万年筆なら大丈夫な紙でもあっさり裏写りしたりします。</p>
<p>以前は普段使いで使ってましたが何度か無くしそうになる上に無くすとダメージでかいため、今は何か気が乗らないときに気合い入れて書くために使ってます。</p>
</div>
<div class="col-md-3">
<iframe src="https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B00BY1EJY2&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>
</div>

<h3 id="-pigma-">サクラクレパス PIGMA (ミリペン)</h3>
<div class="row">
<div class="col-md-9">
<p>巡り巡って現在主に使用しているペン。</p>
<p>ペンの太さがミリ単位で記載されていることから通称ミリペンと呼ばれているペンでいろんなメーカーが販売しています。</p>
<p>コミックやイラストのペン入れに使う画材だったりしますが、細く一定の線が書けるのでメモ帳や手帳に書き込むのにも向いています。</p>
<p>種類があってどれを買うか迷ったんですが、メジャーで評価が高いという噂のサクラクレパスのPIGMAシリーズを選びました太さは03の黒、青、赤を使ってます。</p>
<p>耐水性の顔料インクで乾きも速く、乾くと水に濡れてもにじまないため、外でメモするのに向いてます。</p>
</div>
<div class="col-md-3">
<iframe src="https://rcm-fe.amazon-adsystem.com/e/cm?t=syaku007-22&o=9&p=8&l=as1&asins=B001GR4C6Y&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>
</div>

<h1 id="-">紙との相性</h1>
<p>鉛筆やボールペンで問題になることは少ないでが、殆どの筆記具は紙との相性があります。</p>
<p>どうにもならないところでいうと、万年筆やファイバーチップペンは筆圧をかけて書く事が出来ないため、カーボン紙などの複写式の用紙に書くことが出来ません。</p>
<p>また、特に万年筆や、プラマン、Parker 5thなどは万年筆を想定した手帳用の紙でないとインクが裏に抜けて両面に書けなかったりします。</p>
<p>機会があればノートやメモ帳、手帳などの話も書きたいと思います。</p>
<h1 id="-">まとめ</h1>
<p>改めて書き出してみると、私の場合、最終的には芯ホルダーやミリペン等、筆記具というか画材寄りの道具に落ち着くようです。</p>
<p>でも万年筆はまた使いたい。（ラミーのサファリ辺りを買おうかな。）</p>
]]></description>
               <pubDate>2015-07-19T21:00:00+09:00</pubDate>
           </item>
       
           <item>
               <title>トラベラーズノートのお手入れ</title>
               <guid>https://www.sevenspirals.net/2015/06/29/tn_maintenance/</guid>
               <link>https://www.sevenspirals.net/2015/06/29/tn_maintenance/</link>
               <description><![CDATA[<img src='https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG'><p>恐ろしいことにトラベラーズノート買った時の記事以降、まるでブログの記事を書いてない上にまたトラベラーズノートの記事になります。</p>
<p>というわけで以前買ったトラベラーズノートですが、半年ほど手入れせずに使っていたのでここで一度手入れをしておこうということで、カバーの手入れをしました。</p>
<!-- more -->
<h2 id="-">早速準備</h2>
<p>本当はミンクオイルとか革用のオイルやクリームを塗るらしいんですが、あいにくそんな物は持ってない＆買いに行くのも面倒なので手近な代用品がないか探したところ、結構あっさり見つかりました。</p>
<p><img src="https://lh3.googleusercontent.com/-bqFVyra29ys/VZAsssknaQI/AAAAAAAADpY/VvznF8CeZZA/s640/IMG_0105.JPG" /></p>
<p>安くて万能の呼び声高いニベアのスキンケアクリーム。</p>
<p>肌だけでなく革製品も割とこれでいけるらしいです。</p>
<p>缶だったりチューブだったりしますがコンビニでも普通に売ってるので入手性は抜群。</p>
<h2 id="-">手入れ前の状態</h2>
<p><img src="https://lh3.googleusercontent.com/-D8HqpiIsRtU/VZAbYz6ObpI/AAAAAAAADoU/s3s4bXP9J9A/s640/IMG_0100.JPG" /></p>
<p>手入れ前のカバー。</p>
<p>基本的にはロディアにメモを書いた後そのままデジタル化することも多いのでそんなに使い込んでいるわけではないのですが、それでも結構傷だらけですね。</p>
<p>これから汚れを拭き取ってクリームを塗っていきます。</p>
<h2 id="-">ニベアを塗りたくる</h2>
<p><img src="https://lh3.googleusercontent.com/-Yg4ur0tVQq0/VZAmJ1wpRBI/AAAAAAAADoo/q5IZaWm5vQ4/s640/IMG_0101.JPG" /></p>
<p>クリームを塗ったところ。なんかピンぼけしてますね。</p>
<p>クリーム自体はどんどん吸収されていくので思い切って塗りたくります。</p>
<p>ただ半分は自分の手が吸収してるような気もする・・・。</p>
<h2 id="-">完成</h2>
<p><img src="https://lh3.googleusercontent.com/-_Et8E9RGtkk/VZAmQ9QigsI/AAAAAAAADow/K0COgTZgFZY/s640/IMG_0104.JPG" /></p>
<p>最後に乾いた布で軽く拭いておしまい。</p>
<p>だいぶ傷が目立たなくなって手触りも良くなった気がします。</p>
<p>クリームにオイルも含まれているので若干防水効果もあるんじゃないかと思います。</p>
<h2 id="-">感想</h2>
<p>とりあえず思ったこと。<strong style="font-size:1.5em;color:red;">ニベアすげー。</strong></p>
]]></description>
               <pubDate>2015-06-29T01:00:00+09:00</pubDate>
           </item>
       
           <item>
               <title>システム手帳からトラベラーズノートに乗り換えてみた</title>
               <guid>https://www.sevenspirals.net/2014/10/19/travelers_note/</guid>
               <link>https://www.sevenspirals.net/2014/10/19/travelers_note/</link>
               <description><![CDATA[<img src='https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s640/IMG_0066.JPG'><p>少し前の話なんですが、これまで<a href="http://www.raymay.co.jp/davinci/contents/davinci/justrefill/lineup.html">ダヴィンチのシステム手帳</a>(ジャストリフィルのバイブルサイズ)を使っていたのですが、<del>iPhone6もデカくなったしデカいのがこれから流行るんじゃないか・・・</del>今まで財布と兼用してたけど新しく財布を買ったりなんだりで、必ずしもポケットに入れなくても良くなったので前から気になってた<a href="http://www.midori-japan.co.jp/tr/trnotebook/products/">トラベラーズノート</a>(茶・レギュラーサイズ)を買ってみました。</p>
<!-- more -->
<p><img src="https://lh5.googleusercontent.com/-xsnEW_SjyFI/VENtxeHg9mI/AAAAAAAACxo/UdnnjBVf-fw/s400/IMG_0066.JPG" alt="トラベラーズノート"></p>
<p>チャームとか付けてみた。</p>
<p>表面処理してないので傷はガンガン付きます。ちなみに、ハート型の傷は塚田農場でもらったシールを貼って剥がした痕です。</p>
<p>中身はコクヨの<a href="http://www.kokuyo-st.co.jp/stationery/feature/jibun_techo/contents.html#idea">ジブン手帳の中のIDEA</a>をカットして使ってます。(<a href="http://bungu.plus.co.jp/sta/product/note/cacrea/">Ca.CreaのA4x1/3サイズ</a>にしたかったけどインクの裏写りが酷かったので使えず、残念。)</p>
<p>まあ、殆どの場合、<a href="http://www.kokuyo-st.co.jp/stationery/tidbit/">チビット</a>を貼る台紙と化しているのであんまり関係なかったりはしますが・・・。</p>
<p>このサイズになると、さすがにポケットには入らないのでメモ帳としてチビットのA7を使ってます。試しに今は横罫カットのものを使ってますが次はブロックのに変える予定。(やっぱりチビットはブロックのが楽しい。)</p>
<p>ところで、使ってるとメモ帳にもカバーが欲しくなってきたりするわけですが、チビットのA7ってトラベラーズノートのパスポートサイズに収まるんでしょうか。(チビットってちょっとサイズが変則的なので)</p>
<p>とりあえず今度買って試してみようと思います。</p>
<p><br />
<br /></p>
<p>以上、<strong style="font-size:1.5em;color:red;">たまにはプログラミング以外の記事も書くんだぜアピール</strong>でした。</p>
]]></description>
               <pubDate>2014-10-19T16:17:00+09:00</pubDate>
           </item>
       
           <item>
               <title>VPS内のLAMP環境をDockerコンテナに移行する</title>
               <guid>https://www.sevenspirals.net/2014/08/18/docker_lamp/</guid>
               <link>https://www.sevenspirals.net/2014/08/18/docker_lamp/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png'><p><a href="/2014/08/14/docker_install/" title="さくらVPS上のCentOSにDockerをインストールした">前回</a>、Dockerをインストールしコンテナを作れることを確認したので実際にVPSに入っているLAMP環境をDockerコンテナに移行したいと思います。</p>
<!-- more -->
<h1 id="dockerfile-">Dockerfileの作成</h1>
<p><a href="https://registry.hub.docker.com/" title="Docker Hub">Docker Hub</a>を探せばいろんな人が作ったLAMP環境のイメージがあるんですが、Chefとかと同じで自前で作った方が良いということでDockerfileからイメージを作ることにします。</p>
<p>今回作ったのは下記の通り、</p>
<pre><code>FROM centos:centos6

MAINTAINER syaku

RUN yum install -y initscripts MAKEDEV sudo

RUN yum check

RUN yum update -y

RUN yum install -y openssh-server

RUN useradd -d /home/vagrant -m -s /bin/bash vagrant
RUN echo vagrant:{パスワード}| chpasswd
RUN echo &#39;vagrant ALL=(ALL) NOPASSWD:ALL&#39; &gt;&gt; /etc/sudoers

RUN sed -ri &#39;s/UsePAM yes/#UsePAM yes/g&#39; /etc/ssh/sshd_config
RUN sed -ri &#39;s/#UsePAM no/UsePAM no/g&#39; /etc/ssh/sshd_config

RUN yum install -y tar gzip

RUN yum install -y gcc make
RUN yum install -y perl perl-CPAN perl-CGI
RUN rpm -Uvh ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/csbuild:/Perl/CentOS_CentOS-6/noarch/perl-Jcode-2.07-1.4.noarch.rpm

RUN yum install -y httpd
RUN yum install -y mysql-server
RUN yum install -y php php-mysql php-mbstring

RUN chkconfig sshd on
RUN chkconfig httpd on
RUN chkconfig mysqld on

RUN /etc/init.d/sshd start
RUN /etc/init.d/mysqld start
RUN /etc/init.d/httpd start

EXPOSE 80

CMD [&quot;/sbin/init&quot;]
</code></pre><p>通常のLAMP環境に加え、perlのCGIをいくつか動かしていたのでperlを、既存環境のファイルをやりとりするためtarとgzipをインストールしています。</p>
<p>そのほかには、コンテナ管理にVagrantを使うことにしたので、<code>vagrant ssh</code>するためにsshをインストールしています。</p>
<p>こうやっておくと<code>vagrant ssh</code>した際にパスワードを入力するだけでコンテナにアクセスすることが出来るのでIP調べなくていい分、若干楽です。</p>
<h1 id="-vagrant-">コンテナ管理にVagrantを使ってみる</h1>
<p>コンテナ管理には(個人的に慣れてるので)Vagrantを使用しますが、VagrantからDockerを操作するにはVer1.6以上が必要なのでインストールしていない場合はインストールします。</p>
<p>インストールはrpmコマンド一発です。</p>
<pre><code>$ sudo rpm -Uvh https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.rpm
</code></pre><p>インストールが終わったらDockerfileと同じ場所にVagrantfileを作ります。</p>
<p>今回作ったVagrantfileはこんな感じ、</p>
<pre><code>Vagrant.configure(&quot;2&quot;) do |config|
    config.vm.provider &quot;docker&quot; do |d|
        d.build_dir = &quot;.&quot;
    end
    config.vm.network :forwarded_port, guest: 80, host: 8080
end
</code></pre><p>内容としてはカレントディレクトリのDockerfileをビルドして80番ポートをホスト側の8080ポートに紐付けます。</p>
<p>で、両方整ったらコマンド叩いて起動します。</p>
<pre><code>$ vagrant up --provider=docker
</code></pre><p>最初はイメージのビルドを行うので結構時間がかかります。</p>
<p>正常に終わったら、</p>
<pre><code>$ vagrant ssh
</code></pre><p>と叩いてログインできるか確認します。</p>
<p>ログインできたらついでにちゃんとサービスが起動しているか確認します。</p>
<h1 id="-">せっせと移行する</h1>
<p>入れ物ができあがったらあとは既存の環境からファイルやらDBのダンプやらをコンテナ環境に持ってきて移行作業を行います。
Vagrantを使っている関係でVagrantfileがあるディレクトリが/vagrant/として共有されているのでそこに放り込んでおけば作業が楽です。</p>
<p>移行作業そのものはケースバイケースなのと基本的に移行元と同じ環境なので移行元と同じようにすれば良いので割愛。
IPとポートは変わってるのでその辺設定ファイルを書き換える必要があります。</p>
<p>移行が終わったら8080番ポートにアクセスしてコンテナ上のサービスにアクセス出来ることを確認します。(紛らわしいのでホスト側のサービスは止めておきます)</p>
<p>上手く動いたらホスト側のnginxでリバースプロキシの設定をして移行は終わりです。</p>
]]></description>
               <pubDate>2014-08-18T01:32:00+09:00</pubDate>
           </item>
       
           <item>
               <title>CentOS6上のDockerにCentOS7を入れたらはまった</title>
               <guid>https://www.sevenspirals.net/2014/08/16/docker_install2/</guid>
               <link>https://www.sevenspirals.net/2014/08/16/docker_install2/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png'><p>前回、さくらVPS上のCentOS6にDockerをインストールしましたが、その際にコンテナイメージを<code>centos:latest</code>から作ったため、ホストはCentOS6、ゲスト(っていうのか?)はCentOS7という状態になってました。</p>
<p>そのまま、その環境でhttpdやらを入れてたんですが、サービスが起動できずにドはまりしました。</p>
<!-- more -->
<p>RHEL7系からはサービスの起動がsystemdとsystemctlが採用されておりそのため起動方法が/etc/rc.d/init.d/配下の起動スクリプトじゃなくなってます。</p>
<p>なので<code>systemctl</code>コマンドで有効化して起動しようとすると下記のようなエラーが出てしまいます。</p>
<pre><code>bash-4.2# systemctl enable httpd.service
ln -s &#39;/usr/lib/systemd/system/httpd.service&#39; &#39;/etc/systemd/system/multi-user.target.wants/httpd.service&#39;
bash-4.2# systemctl start httpd.service
Failed to get D-Bus connection: No connection to service manager.
</code></pre><p>Google先生で調べるが、よく分からない・・・。ホスト側がsystemdで管理されていないのがまずいぽい?</p>
<p>まあ、そもそもホスト側がCentOS6なのがアカン気がするし、その後の移行作業でも問題が出そうな気がするので元にするイメージを<code>centos:centos6</code>と指定してコンテナ上もCentOS6になるようにして逃げました。</p>
]]></description>
               <pubDate>2014-08-16T22:45:00+09:00</pubDate>
           </item>
       
           <item>
               <title>さくらVPS上のCentOSにDockerをインストールした</title>
               <guid>https://www.sevenspirals.net/2014/08/14/docker_install/</guid>
               <link>https://www.sevenspirals.net/2014/08/14/docker_install/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-GhrtwXQtb7s/U-uCTk_-FOI/AAAAAAAACZ8/JnW0y2UER3M/s800/small_v-dark.png'><p>Dockerというコンテナ型の仮想化ソフトがありまして、以前(確かまだポートが固定出来なかった頃)にVirtualBox上で試したんですが、色々バージョンアップを重ね1.0も(割と前に)出たので実際に使おうということで(本当はUbuntuが推奨環境のはずですが)さくらVPSのCentOS上にインストールしてみました。</p>
<!-- more -->
<h1 id="-epel-">まずEPELのインストール</h1>
<p>DockerのパッケージはEPELリポジトリにあるのでまずEPELをインストールします。</p>
<p>既にインストールしていることも多いと思いますので導入済みならスキップしても構いません。</p>
<pre><code>$ wget http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
$ sudo rpm -ivh epel-release-6-8.noarch.rpm
</code></pre><p>特に問題無く成功すると思います。</p>
<p>標準のリポジトリと追加リポジトリの優先順位を細かく設定したい場合は<code>yum-priorities</code>をインストールすることで優先順位の制御が出来ます。</p>
<h1 id="docker-io-">docker-ioのインストール</h1>
<p>無事EPELのインストールが終わったら次はDocker本体のインストールを行います。</p>
<p>パッケージ名はdocker-ioになるので、yumコマンドでインストールします。</p>
<pre><code>$ sudo yum install docker-io
</code></pre><p>また、起動時に自動で立ち上がるように設定しておきます。</p>
<pre><code>$ sudo service docker start
$ sudo chkconfig docker on
</code></pre><p>インストールそのものはこれで完了です。</p>
<h1 id="-">イメージの作成</h1>
<p>準備は整ったので仮想環境のイメージを作りたいと思います。</p>
<p>とりあえず、CentOS上で動かしてるサービスを移設したいのでCentOSのイメージを作ります。</p>
<p>既にCentOSのベースになるイメージは存在してるので<code>docker pull</code>コマンドでダウンロードします。</p>
<pre><code>$ sudo docker pull centos:latest
</code></pre><p>ダウンロードが終わったら<code>docker images</code>コマンドで実際に作成されていることを確認します。</p>
<pre><code>$ sudo docker images centos
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              latest              b157b77b1a65        2 weeks ago         243.7 MB
</code></pre><p>上記のような感じになってたら成功です。</p>
<h1 id="-">実行</h1>
<p>イメージが作られたのでおもむろに実行。</p>
<p>とりあえず今回はコンテナ名は特に指定せずに実行します。</p>
<pre><code>$ sudo docker run -i -t centos /bin/bash
</code></pre><p>するとこんなエラーが出てしまいました。</p>
<pre><samp>2014/08/10 14:38:36 Error: Cannot start container 6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a: write /cgroup/devices/docker/6a8679e8f09d2ef4a52408008287a0efcef37b904914b27687064dae25081c2a/cgroup.procs: invalid argument</samp></pre>

<p>調べたところ、CentOS6の場合、Kernelのバージョンが2.6.32-431以上でないと動かない模様。</p>
<p>というか普通に見落としてました。すいません。</p>
<p>というわけで<code>sudo yum update</code>でまとめて更新。</p>
<pre><code>$ sudo yum update
</code></pre><p>更新が終わったら再び実行。仮想環境上のbashに入れれば成功です。</p>
<p>初回なのでコンテナ作成も同時に行っていますがそれでも一瞬で起動します。</p>
<p>ここがDockerの良いところ。</p>
<p>というわけで、入れ物は出来たので次からは今動いているサーバーをどんどんDocker上に移行していきます。</p>
]]></description>
               <pubDate>2014-08-14T00:14:00+09:00</pubDate>
           </item>
       
           <item>
               <title>AWS SDK for JavaScriptでS3でファイル操作</title>
               <guid>https://www.sevenspirals.net/2013/12/01/aws_javascript_sdk/</guid>
               <link>https://www.sevenspirals.net/2013/12/01/aws_javascript_sdk/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png'><p>ブラウザ単体でAmazon AWSのS3やDynamoDBやSQSなんかを操作できるAWS SDK for Javascriptが公開されたので使ってみました。</p>
<!-- more -->
<h1 id="-node-js-sdk-">基本はNode.js用SDKと同じ</h1>
<p>扱い方は基本的にNode.js用のSDKと同じで対応していないサービスはクラスが実装されていないので扱えないという感じです。</p>
<p>なのでどっちか覚えてればサーバーサイドの実装もブラウザ側での実装も両方割と簡単に対応出来ます。</p>
<h1 id="-">誰でも読み書きできるコメント欄的な物を作ってみる</h1>
<p>本当はGoogle+やFacebook認証を使ったりするんでしょうが今回は認証のないコメント欄的なものをS3を使って作りたいと思います。</p>
<h2 id="iam-">IAMコンソールでユーザーを作成する</h2>
<p>まず、IAMコンソールでアプリに使うユーザーを作成します。</p>
<p>ここで作成したユーザーの<code>ARN</code>と<code>Access Key ID</code>と<code>Secret Access Key</code>は後でアプリから使うのでコピーしておきます。</p>
<p><img src="https://lh5.googleusercontent.com/-dz4YJ6Z1ZVM/UpJIKQw517I/AAAAAAAABu8/zwUUBGJQYok/s640/capture1.png" alt=""></p>
<p>ユーザーを作成したらS3のバケットを操作できるようにパーミッションを設定します。</p>
<p>設定内容は以下のような感じ。<code>BUCKET_NAME</code>はアプリで使用するバケット名を記述します。</p>
<p>ここでは指定バケットに対してS3の全てのアクションを許可しています。</p>
<p>ここで例えばReadだけ不許可にすることで外部からファイルを受け取るためのアップローダーを作るということも出来そうです。</p>
<pre><code>{
  &quot;Version&quot;: &quot;2013-11-24&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Action&quot;: [
        &quot;s3:*&quot;
      ],
      &quot;Resource&quot;: [
        &quot;arn:aws:s3:::BUCKET_NAME&quot;
      ],
      &quot;Effect&quot;: &quot;Allow&quot;
    }
  ]
}
</code></pre><h2 id="-">バケットを作成する</h2>
<p>S3のコンソールでバケットを作成します。</p>
<p>ここでもパーミッションを設定しますが基本的にユーザー作成時に指定した内容と同じです。</p>
<p>先ほどコピーしておいた<code>ARN</code>をここで記述します。</p>
<pre><code>{
  &quot;Version&quot;: &quot;2013-11-24&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Sid&quot;: &quot;&quot;,
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Principal&quot;: {
        &quot;AWS&quot;: &quot;&lt;IAMで作ったユーザーのARN&gt;&quot;
      },
      &quot;Action&quot;: &quot;s3:*&quot;,
      &quot;Resource&quot;: &quot;arn:aws:s3:::BUCKET_NAME/*&quot;
    }
  ]
}
</code></pre><p>パーミッションを設定したら次はCORS(Cross-Origin Resource Sharing)の設定をします。</p>
<p>初期値ではGETしか許可されていないのでPUTも許可するようにします。</p>
<p>また、今回の場合、Access KeyとSecretをソースに埋め込むので<code>AllowedOrigin</code>を指定しないとどこからでも操作できて多分えらい目に遭います。</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;CORSConfiguration xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;
    &lt;CORSRule&gt;
        &lt;AllowedOrigin&gt;http://www.exmaple.com/&lt;/AllowedOrigin&gt;
        &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;
        &lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;
        &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;
        &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;
        &lt;AllowedHeader&gt;Authorization&lt;/AllowedHeader&gt;
    &lt;/CORSRule&gt;
&lt;/CORSConfiguration&gt;
</code></pre><h2 id="-">サンプルコード</h2>
<p>とりあえず初期化処理です。
先ほど作成したAccess KeyとSecretを設定し、S3クラスを初期化します。</p>
<pre><code>var messageGet, messagePost, s3;

AWS.config.update({
  accessKeyId: &#39;***********************&#39;,
  secretAccessKey: &#39;**********************************&#39;
});

s3 = new AWS.S3({
  region: &#39;ap-northeast-1&#39;,
  maxRetries: 15
});
</code></pre><p>AWSへのリクエストは非同期で行われるので同期処理するためにJsDeferredも初期化。</p>
<pre><code>Deferred.define();
</code></pre><p>で、実際の初期化処理がこちら。
バケット名とKey(ファイル名みたいなもの)とContentTypeとBody(ファイルの中身)を設定して<code>putObject</code>を呼び出します。</p>
<p>呼び出し後は非同期で実行され、何らかの理由で失敗したらerrが成功したらresultが指定されてコールバックされます。</p>
<pre><code>messagePost = function() {
  var key, params;
  key = new Date().getTime().toString();
  params = {
    Bucket: &#39;BUCKET_NAME&#39;
    Key: key,
    ContentType: &#39;text/plain&#39;,
    Body: $(&quot;#message&quot;).val()
  };
  return s3.putObject(params, function(err, result) {
    if (err) {
      return console.log(err);
    } else {
      return console.log(data);
    }
  });
};
</code></pre><p>読み込みも簡単です。
バケット名とKeyを指定して<code>getObject</code>関数を呼び出します。
コールバックは書き込みと同じで失敗すればerrが成功すればdataにファイルの情報がセットされ返ってきます。</p>
<p>ここではBodyの中身を文字列化してJsDeferredに渡しています。</p>
<pre><code>messageGet = function(key) {
  var deferred;
  deferred = new Deferred();
  s3.getObject({
    Bucket: &#39;BUCKET_NAME&#39;,
    Key: key
  }, function(err, data) {
    return deferred.call(data.Body.toString());
  });
  return deferred;
};
</code></pre><p>起動時処理。
<code>listObjects</code>関数でバケット内のファイルの一覧を取得し順番に<code>messageGet</code>関数を呼んでファイルの中身を取得してリストに詰めています。</p>
<p>全部取り終わってからコンソールに吐き出すようにJsDeferredを使っています。(実際にはloopじゃなくてparallelのがいいと思う)</p>
<pre><code>$(function() {
  return s3.listObjects({
    Bucket: &#39;BUCKET_NAME&#39;
  }, function(error, data) {
    var result;
    if (error) {
      return console.log(error);
    } else {
      result = [];
      return Deferred.loop(data.Contents.length, function(i) {
        return messageGet(data.Contents[i].Key).next(function(data) {
          return result.push(data);
        });
      }).next(function() {
        // 実際には投稿日順で並び替えたりする
        return console.log(result);
      });
    }
  });
});
</code></pre><h2 id="-">感想のような物</h2>
<p>このブログは静的HTMLを吐いてS3に配置していますがこんな感じのちょっとしたツールに簡単にDBやファイル保存の機能を付加できるのは大変夢が広がって面白いです。</p>
<p>ただ、出来る事がすごく増えるわけではないので別に既存のサーバーサイド処理を置き換えるものではなく、別の要件でサーバーを立てるならサーバーサイドでやった方が良いんじゃないかと思います。</p>
<p>逆に全くの新造なら全部これを使ってサーバーを立てないというサービスもあっても良いんじゃ無いかとも思ったのでとりあえずこのブログを実験台に色々試してみたいと思います。(まずはzenbackに頼ってる機能の置き換えかな)</p>
]]></description>
               <pubDate>2013-12-01T15:15:00+09:00</pubDate>
           </item>
       
           <item>
               <title>Node.jsとMongoDBとElasticsearchで日本語全文検索</title>
               <guid>https://www.sevenspirals.net/2013/09/16/elastic_search/</guid>
               <link>https://www.sevenspirals.net/2013/09/16/elastic_search/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png'><p>MongoDBのver2.4から全文検索が導入されたので使ってみようと思ったんですが、やっぱりというか日本語には対応していなかった・・・。</p>
<p>何か悔しいのでElasticsearchでMongoDBのコレクションを日本語全文検索する環境を構築してみました。</p>
<!-- more -->
<h1 id="elasticsearch-">Elasticsearchのインストール</h1>
<p>何はともあれElasticsearchのインストールですが、Macならbrewで簡単にインストールできます。</p>
<p>ちなみにWindowsでも適当な場所にzipを展開するだけです。</p>
<pre><code>$ brew install elasticsearch
</code></pre><p>で、起動。今回は試しながらなので-fオプションを付けてフォアグラウンドで起動します。</p>
<pre><code>$ elasticsearch -f
</code></pre><p>特にエラーが出なければ実際にアクセスしてみます。</p>
<p>elasticsearchはREST APIでやりとりするのでcurlコマンドでリクエストを投げます。</p>
<p>まずはテスト用のIndexを作成します。</p>
<pre><code>$ curl -XPUT &#39;http://localhost:9200/test&#39;
</code></pre><p>実行した結果、<code>{&quot;ok&quot;:true,&quot;acknowledged&quot;:true}</code>のようなレスポンスが返ってくれば成功です。</p>
<p>ついでに分析リクエストも投げてみますがこの時点では日本語は正しく分析できません。</p>
<pre><code>$ curl -XGET &#39;http://localhost:9200/test/_analyze?pretty&#39; -d &#39;東京都渋谷区&#39;
/*{
  &quot;tokens&quot; : [ {
    &quot;token&quot; : &quot;東&quot;,
    &quot;start_offset&quot; : 0,
    &quot;end_offset&quot; : 1,
    &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
    &quot;position&quot; : 1
  }, {
    &quot;token&quot; : &quot;京&quot;,
    &quot;start_offset&quot; : 1,
    &quot;end_offset&quot; : 2,
    &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
    &quot;position&quot; : 2
  }, {
    &quot;token&quot; : &quot;都&quot;,
    &quot;start_offset&quot; : 2,
    &quot;end_offset&quot; : 3,
    &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
    &quot;position&quot; : 3
  }, {
    &quot;token&quot; : &quot;渋&quot;,
    &quot;start_offset&quot; : 3,
    &quot;end_offset&quot; : 4,
    &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
    &quot;position&quot; : 4
  }, {
    &quot;token&quot; : &quot;谷&quot;,
    &quot;start_offset&quot; : 4,
    &quot;end_offset&quot; : 5,
    &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
    &quot;position&quot; : 5
  }, {
    &quot;token&quot; : &quot;区&quot;,
    &quot;start_offset&quot; : 5,
    &quot;end_offset&quot; : 6,
    &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
    &quot;position&quot; : 6
  } ]
}*/
</code></pre><h2 id="-">プラグインの追加</h2>
<p>まずは日本語の全文検索ができるようにkuromojiの分析プラグインをインストールします。</p>
<p>インストールはコマンド一発で簡単にできます。</p>
<pre><code>$ plugin -install elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
</code></pre><p>で、今回はMongoDBのCollectionを全文検索したいのでそれ用のプラグインもインストールします。</p>
<p>elasticsearch-river-mongodbプラグインのインストールは他と同じような書き方にするとURLが見つからずインストールできなかったので直接githubを指定しました。</p>
<pre><code>$ plugin -install elasticsearch/elasticsearch-mapper-attachments/1.8.0
$ plugin -i com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/1.7.0
</code></pre><p>特にエラーが出なければインストールは完了です。</p>
<h2 id="kuromoji-">kuromojiのテスト</h2>
<p>まずアナライザにkuromojiを指定して日本語の構文解析が出来るようになっているか確認します。</p>
<pre><code>$ curl -XGET &#39;http://localhost:9200/test/_analyze?analyzer=kuromoji&amp;pretty&#39; -d &#39;東京都渋谷区&#39;
/*{
  &quot;tokens&quot; : [ {
    &quot;token&quot; : &quot;東京&quot;,
    &quot;start_offset&quot; : 0,
    &quot;end_offset&quot; : 2,
    &quot;type&quot; : &quot;word&quot;,
    &quot;position&quot; : 1
  }, {
    &quot;token&quot; : &quot;都&quot;,
    &quot;start_offset&quot; : 2,
    &quot;end_offset&quot; : 3,
    &quot;type&quot; : &quot;word&quot;,
    &quot;position&quot; : 2
  }, {
    &quot;token&quot; : &quot;渋谷&quot;,
    &quot;start_offset&quot; : 3,
    &quot;end_offset&quot; : 5,
    &quot;type&quot; : &quot;word&quot;,
    &quot;position&quot; : 3
  }, {
    &quot;token&quot; : &quot;区&quot;,
    &quot;start_offset&quot; : 5,
    &quot;end_offset&quot; : 6,
    &quot;type&quot; : &quot;word&quot;,
    &quot;position&quot; : 4
  } ]
}*/
</code></pre><p>最後にデフォルトでkuromojiを使うようにelasticsearch.ymlに以下の行を追加します。</p>
<pre><code>index.analysis.analyzer.default.type: custom
index.analysis.analyzer.default.tokenizer: kuromoji_tokenizer
</code></pre><h1 id="mongodb-">MongoDBの設定</h1>
<p>MongoDBからIndexを作成するelasticsearch-river-mongodbプラグインはReplicaSetを構築した際に作成されるoplog.rsコレクションを利用するのでReplicaSetを構築する必要があります。</p>
<p>構築自体は1台構成でもいいのでmongoのコンソールから<code>rs.initiate()</code>を実行します</p>
<p>しばらく待つと構築が終わるので<code>rs.config()</code>で結果を確認します。</p>
<p>最後にElasticsearch側でCollectionとIndexの関連付けを行います。(DB名やIndex名は実際に使う名前を指定します)</p>
<pre><code>$ curl -XPUT &#39;http://localhost:9200/_river/mongodb/_meta&#39; -d &#39;{
  &quot;type&quot;: &quot;mongodb&quot;,
  &quot;mongodb&quot;: {
    &quot;db&quot;: &quot;DATABASE_NAME&quot;,
    &quot;collection&quot;: &quot;COLLECTION&quot;,
    &quot;gridfs&quot;: true
  },
  &quot;index&quot;: {
    &quot;name&quot;: &quot;ES_INDEX_NAME&quot;,
    &quot;type&quot;: &quot;ES_TYPE_NAME&quot;
  }
}&#39;
</code></pre><p>この時点でElasticsearchを再起動すると<code>NoShardAvailableActionException</code>という例外が出るんですが何故出るのか分からず調査中。検索自体は普通に出来ます。</p>
<h1 id="node-js-">Node.jsから呼び出す</h1>
<p>設定が終わってしまえばあとはMongoose等で普通にデータの追加や削除を行えばほぼタイムラグ無しにElasticsearch側に反映されます。</p>
<p>Elasticsearch側のインタフェースはREST APIなので普通にNode.jsからHTTPリクエストを投げれば良いんですがその辺をラップしてくれるライブラリがあります。</p>
<p>まずはインストール</p>
<pre><code>$ npm install elasticsearch
</code></pre><p>サンプルとして以下のようなSchemaのコレクションを検索する処理を書きます。</p>
<pre><code>{
  subject: String
  body: String
}
</code></pre><p>例によってCoffeeScriptですがsubjectとbodyに対してキーワード検索するにはこんな感じで書きます。</p>
<pre><code>log4js = require &#39;log4js&#39;
logger = log4js.getLogger()
elasticsearch = require &#39;elasticsearch&#39;;
es = elasticsearch {_index: &#39;index_name&#39;, _type: &#39;type_name&#39;}

search = (keyword, callback)-&gt;
  es.search {query:{multi_match:{query: keyword, fields:[&#39;subject&#39;, &#39;body&#39;]}}}, callback

search(&#39;日本語全文検索&#39;, (err, data)-&gt;
  if err
    logger.error err
  else
    logger.debug data
)
</code></pre><p>という感じで日本語全文検索出来るようにしただけで力尽きたので今日はここまで。</p>
<p>そのうちこれを使って何か作ってみたいと思います。</p>
<h1 id="-">今日使った諸々のリンク</h1>
<ul>
<li><a href="http://www.elasticsearch.org/">Elasticsearch</a><ul>
<li><a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">elasticsearch-analysis-kuromoji</a></li>
<li><a href="https://github.com/richardwilly98/elasticsearch-river-mongodb">elasticsearch-river-mongodb</a></li>
</ul>
</li>
<li><a href="http://www.mongodb.org/">MongoDB</a></li>
<li><a href="http://nodejs.org/">Node.js</a><ul>
<li><a href="https://github.com/ncb000gt/node-elasticsearch">node-elasticsearch</a></li>
</ul>
</li>
</ul>
]]></description>
               <pubDate>2013-09-16T05:45:00+09:00</pubDate>
           </item>
       
           <item>
               <title>Google Readerが終わるそうなので</title>
               <guid>https://www.sevenspirals.net/2013/05/01/feed_reader/</guid>
               <link>https://www.sevenspirals.net/2013/05/01/feed_reader/</link>
               <description><![CDATA[<img src='//farm4.staticflickr.com/3365/3541653049_a3e8534a8e_o.jpg'><p>7月にGoogle Readerがサービス終了とのことですが、個人的には使いまくってるのでちょっと困ります。</p>
<p>そこで一念発起して<strong>ちょうどGW入ったし今から作り始めれば自分が使いよいのが作れるだろう</strong>ということで大まかに作ってみました。</p>
<!-- more -->
<p>というわけで、作りかけのサイトが<a href="http://www.sevenspirals.net:3001/">こちら</a>。</p>
<p>開発中なので常時動かしてるわけではありませんが。</p>
<p>ちなみにport3000にアクセスするとちょっとしたホラーが。</p>
<p>あとは既読の記事は非表示にする機能と登録したFeedの変更削除が出来れば自分が最低限使いたい機能は揃うのでGoogle Readerから離脱しつつこっちの機能追加をしていこうと思います。</p>
<p>・・・というかなんで個人用なのに認証機能付けたんだ。＜自分</p>
]]></description>
               <pubDate>2013-05-01T10:10:15+09:00</pubDate>
           </item>
       
           <item>
               <title>Ruby2.0リリース&amp;amp;20周年おめでとうございます</title>
               <guid>https://www.sevenspirals.net/2013/02/24/ruby_2_0_0/</guid>
               <link>https://www.sevenspirals.net/2013/02/24/ruby_2_0_0/</link>
               <description><![CDATA[<img src='https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png'><p>えーっとタイトルだけ言いたかっただけです。(爆)</p>
<p>Ruby2.0についてはRails4.0の推奨が速くも（というかリリース前から）2.0推奨なので今度インストールしてみようと思います。</p>
<p>というわけで、おやすみなさい。</p>
]]></description>
               <pubDate>2013-02-24T23:43:00+09:00</pubDate>
           </item>
       
           <item>
               <title>WPFでMVVMパターン(2) - Model編</title>
               <guid>https://www.sevenspirals.net/2013/02/17/mvvm_2/</guid>
               <link>https://www.sevenspirals.net/2013/02/17/mvvm_2/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png'><p>というわけで<a href="/2013/01/26/mvvm_1/">前回</a>に引き続いてMVVMネタです。</p>
<p>今回はModelを作ります。</p>
<!-- more -->
<h1 id="-model-">とりあえずModelから</h1>
<p>どういう順番で作るのが正解なのかよく分かりませんが、私はだいたいModelから作り始めます。</p>
<p>理由は単純で<strong>Modelは絶対必要だから</strong>。</p>
<p>他の要素、ViewModelだけで無く(GUI的な)Viewも絶対必要とは考えません。この時点ではConsoleアプリケーションから呼び出して使うつもりで作りはじめます。その方がテストが書きやすい(気がする)ので。</p>
<p>だいたい、それ以外の機能はView作ってみて機能が足りなかったらViewModelに押しつけりゃいいというのが私の考えです。(いい加減)</p>
<h1 id="-">さくっとコーディング</h1>
<p>Model作成の時点では特にMVVMパターンだからどうという作法はあまりないので好きに作ります。＜おい</p>
<p>というわけでVisual StudioでWPFアプリケーションを作成して下記のクラスを追加しました。</p>
<h2 id="model-cs">Model.cs</h2>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Collections.ObjectModel;

namespace MVVM
{
    public class Model : INotifyPropertyChanged
    {
        ObservableCollection&lt;DetailModel&gt; _details;
        public ObservableCollection&lt;DetailModel&gt; Details
        {
            get { return _details; }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public Model()
        {
            _details = new ObservableCollection&lt;DetailModel&gt;();
        }

        public void Order()
        {
            /* なんらかの注文ぽい処理をするのだと思われる */

            foreach (DetailModel detail in _details)
            {
                Console.WriteLine(&quot;Key:{0}\\tCode:{1}\\tName:{2}\\tPrice:{3}\\tCount:{4}&quot;, detail.Key, detail.Code, detail.Name, detail.Price, detail.Count);
            }
        }
    }
}
</code></pre><h2 id="detailmodel-cs">DetailModel.cs</h2>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;

namespace MVVM
{
    public class DetailModel :INotifyPropertyChanged
    {
        public Guid _key;
        public Guid Key
        {
            get
            {
                return _key;
            }
        }

        public string _code;
        public string Code
        {
            get
            {
                return _code;
            }
            set
            {
                if (!string.IsNullOrEmpty(value) &amp;&amp; !value.Equals(_code))
                {
                    _code = value;
                    if (PropertyChanged != null)
                        PropertyChanged(this, new PropertyChangedEventArgs(&quot;Code&quot;));
                }
            }
        }

        public string _name;
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (!string.IsNullOrEmpty(value) &amp;&amp; !value.Equals(_name))
                {
                    _name = value;
                    if (PropertyChanged != null)
                        PropertyChanged(this, new PropertyChangedEventArgs(&quot;Name&quot;));
                }
            }
        }

        public decimal _price;
        public decimal Price
        {
            get
            {
                return _price;
            }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    if (PropertyChanged != null)
                        PropertyChanged(this, new PropertyChangedEventArgs(&quot;Price&quot;));
                }
            }
        }

        public uint _count;
        public uint Count
        {
            get
            {
                return _count;
            }
            set
            {
                if (_count != value)
                {
                    _count = value;
                    if (PropertyChanged != null)
                        PropertyChanged(this, new PropertyChangedEventArgs(&quot;Count&quot;));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public DetailModel()
        {
            _key = Guid.NewGuid();
            _code = &quot;&quot;;
            _name = &quot;&quot;;
            _price = 0;
            _count = 0;
        }

        public DetailModel(string code, string name, decimal price, uint count)
        {
            _key = Guid.NewGuid();
            this.Code = code;
            this.Name = name;
            this.Price = price;
            this.Count = count;
        }
    }
}
</code></pre><p>明細モデル（ただのデータオブジェクトですが）のコレクションと注文の操作を持つModelですけど長いよ・・・。</p>
<p>普通に何も考えずに書くときとの違いは、Modelの操作によってプロパティが更新された際にViewModelに通知する事を考えて、<code>INotifyPropertyChanged</code>を継承していることと同じくコレクションの変更を通知できるように<code>List&lt;T&gt;</code>ではなく、<code>ObservableCollection&lt;T&gt;</code>を使っているところでしょうか。</p>
<p>ただまあ、このパターンだと操作した結果、値が変わるような事は無さそうなのでアレですが。</p>
<h1 id="console-">Consoleアプリで実行</h1>
<p>Model単体では実行できないのでConsoleアプリを作って実行してみます。</p>
<p>ソリューションにConsoleアプリケーションのプロジェクトを追加して、先ほど作ったWPFプロジェクトを参照に追加します。</p>
<p>そこに先ほど作ったModelを呼び出すコードを追加します。こんな感じ。</p>
<h2 id="program-cs">Program.cs</h2>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestConsole
{
    class Program
    {
        static void Main(string[] args)
        {
            var model = new MVVM.Model();

            model.Details.Add(new MVVM.DetailModel(&quot;A001&quot;, &quot;リンゴ&quot;, 100, 1));
            model.Details.Add(new MVVM.DetailModel(&quot;A002&quot;, &quot;みかん&quot;, 80, 3));

            model.Order();

            Console.Read();
        }
    }
}
</code></pre><p>で、おもむろに実行。出力は以下のようになりました。</p>
<pre><code>Key:e2c9eec2-5b90-4072-a646-c1136ee458b9       Code:A001      Name:リンゴ      Price:100      Count:1
Key:1e28e2fe-9574-4238-bb16-c7013ab698ec       Code:A002      Name:みかん      Price:80       Count:3
</code></pre><p>まあ、さすがにちゃんと動いてるようですね。</p>
<p>今回は単純なModel&amp;手を抜いてConsoleアプリで実行してますが、実際にはNUnit等でちゃんとしたテストを書いてJenkinsで実行するといいと思います。というかしましょう。私含めて。＜やってないのかよ</p>
<p>特にリグレッションテストってある日突然情熱に目覚めて、やろう。と思ってもいざやると機能を追加する度にやることが加速度的に増えて心が折れがちです。</p>
<p>なのでロジックの部分をあらかじめテストしやすいように作るのが大事なんだと思います。</p>
<p><br/></p>
<p>というところで今回はここまで。次回はViewModel・・・をすっ飛ばしてViewを作ろうと思います。</p>
]]></description>
               <pubDate>2013-02-17T13:26:00+09:00</pubDate>
           </item>
       
           <item>
               <title>Hearthfireはじまりました - Skyrimプレイ日記</title>
               <guid>https://www.sevenspirals.net/2013/01/26/playlog2/</guid>
               <link>https://www.sevenspirals.net/2013/01/26/playlog2/</link>
               <description><![CDATA[<img src='https://lh5.googleusercontent.com/-gHcYGyZ6Ft8/UQPOexOKMjI/AAAAAAAABEg/ECqsnEaQlyc/s288/ScreenShot18.jpg'><p>というわけでしばらく間が空きましたが細々と続けてます。</p>
<p>メインクエストの&quot;創始者の角笛&quot;でウステングラブに行く途中に立ち寄ったモーサルでのクエストを解決した報酬で土地が買えるようになったのでやっとこさHearthfireが始まりました。</p>
<!-- more -->
<h1 id="-">建築風景</h1>
<p><img src="https://lh4.googleusercontent.com/-Xln9piDf9ho/UQPOexYVOKI/AAAAAAAABEk/Tr3a9bev4U8/s800/ScreenShot3.jpg" alt=""></p>
<p>購入した土地に設置されている建築ツールから家の建築を行います。</p>
<p>まず最初は小さい家からスタート、ここに建てますよっと。</p>
<p><img src="https://lh4.googleusercontent.com/-6vt1nwPNZ0g/UQPOfMe4R8I/AAAAAAAABEw/UE8VIFmhFLA/s800/ScreenShot4.jpg" alt=""></p>
<p>土台を設置。夜が深まって来て暗くて見づらいですが気にせず建築。＜まてや</p>
<p><img src="https://lh6.googleusercontent.com/-xc4ui7EdQog/UQPOfu-IH2I/AAAAAAAABFA/XVbyifq8tJQ/s800/ScreenShot7.jpg" alt=""></p>
<p>壁まで作った段階であまりにも暗かったので時間を飛ばして朝に。</p>
<p>何故かリディアさんが頬を赤らめながら映り込んできました。</p>
<p>Remodeled Armorを入れてるので北国なのに本当に大丈夫かという格好になっていますが元気に活躍してくれています。</p>
<p><img src="https://lh6.googleusercontent.com/-jtHme-yB-g8/UQPOgHJ2AmI/AAAAAAAABFM/F2kblARwp1E/s800/ScreenShot9.jpg" alt=""></p>
<p>気を取り直して建築続行、屋根の骨組みまでできあがりました。</p>
<p><img src="https://lh3.googleusercontent.com/-xMuhVQw2X0Q/UQPOeR5mfFI/AAAAAAAABEU/FxzpkaXxJIw/s800/ScreenShot11.jpg" alt=""></p>
<p>ドアと屋根を張って完成。</p>
<p>ドアを設置するまではシームレスなので途中で止めてみるのもそれはそれで面白いかも知れません。</p>
<p><img src="https://lh4.googleusercontent.com/-oXTj-JWzRBQ/UQPOeg-KtBI/AAAAAAAABEY/q9OeaD8XcRc/s800/ScreenShot12.jpg" alt=""></p>
<p>内装は初期状態では荷物置き用の宝箱があるだけです。</p>
<p>とりあえずベッドくらいは置きたいですね。</p>
<p>ちなみに窓が明るいのはMOD(名前忘れた)を入れたから。</p>
<h1 id="-">感想</h1>
<p>とりあえず最初の小さい家を作ってみましたがなんというかやっぱり自分で建てると愛着が沸くもんですねー。</p>
<p>釘を作ってるうちに鍛冶スキルがぐんぐん上がるドヴァキン。材料の鉄インゴットは結構消費するので集めておいた方が良いです。</p>
<p>とりあえずベッドと物置が出来て動きやすくなったので内装を作りながら再びメインクエストを進めていこうと思います。</p>
<h1 id="dawnguard-">Dawnguardは・・・？</h1>
<p>・・・いや、Dawnguard再編の噂は聞いてるんですがなかなかリフテンまで行く用事が無くて絶賛放置中です。</p>
<p>PCで日本語版Dragonbornが出るまでにはなんとか・・・。</p>
]]></description>
               <pubDate>2013-01-26T21:24:00+09:00</pubDate>
           </item>
       
           <item>
               <title>WPFでMVVMパターン(1)</title>
               <guid>https://www.sevenspirals.net/2013/01/26/mvvm_1/</guid>
               <link>https://www.sevenspirals.net/2013/01/26/mvvm_1/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-6yNW1XEmNnc/Uk-CGl_qvdI/AAAAAAAABr0/9LqbsZNWBWI/s800/62511.png'><p>今更という感じはかなりしますが、<a href="http://www.slideshare.net/Yamaki/wpfwpf">今こそWPF!</a>というわけでWPFとMVVMのお勉強を始めました。</p>
<p>今回は第1回ということでMVVMについて勉強したことのまとめです。</p>
<!-- more -->
<h2 id="wpf-">WPFって？</h2>
<p>.NET Framework3.0から追加されたUIシステムで、Direct3Dを介して描画することでGPU支援が受けられます。</p>
<p>また、ベクトルグラフィックスで拡大縮小が出来たりXPSフォーマットをサポートしており、画面に表示されている内容そのまま印刷出来るらしいです。(印刷はまだ試したことないっす)</p>
<p>そしてWPFのUIはXAMLで記述され、ロジックが記述されたソースコードと完全に切り離すことが出来ます。また、コントロールの見た目を大きくカスタマイズ出来るため、見た目を変えるためにわざわざユーザーコントロールを作って、と言うことは殆どしなくてよくなります。</p>
<p>このロジックとUIを切り離せるというのが今回の肝ですね。</p>
<h2 id="mvvm-">MVVMって？</h2>
<p>MVCパターンの派生パターンの一種で、元々はViewとロジックの分離というMVCの思想をWPFやSilverlightで実現するために生まれた考え方です。(直接の親はPresentation Modelパターンですけど)</p>
<p>従来のMVCパターンではControllerはViewへの入力をイベントとして受け取ってModelのメソッドを呼んでロジックを実行していました。</p>
<p>図にすると以下のような感じ。</p>
<hr>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/ModelViewControllerDiagram2.svg/313px-ModelViewControllerDiagram2.svg.png" alt=""></p>
<p>Image By <a href="http://ja.wikipedia.org/wiki/Model_View_Controller">Wikipedia</a></p>
<p>ただ、Controllerは入力に対する応答としてViewを操作することはありますが、ロジックの実行で変更されたModelの状態については関知しないのでViewはModelの変更を監視(イベントで通知する事もありますが)し、自身の描画を更新する必要がありました。</p>
<p>ここで問題になるのがViewがModelの変更を監視して自身の描画を更新するというところで、例えば&quot;金額がマイナスになったら文字を赤くする&quot;等のロジックをどうするかです。</p>
<p>画面に依存する問題なのでModelに持たせるのは変なのでまあ、Viewに持たせるわけですが、Viewにロジックを持たせてしまうとテストが大変です。</p>
<p>そこで、画面に表示する状態を持つPresentation Modelという役割を追加してViewは文字の色もModelのプロパティもボタンを操作した際のイベントすらもデータバインディングで自動的に反映するだけで済むようにすればModelを監視しなくて良いしViewとロジックを完全に分離できるよね。というのがMVVMの親になったPresentation Modelパターンの考え方です。</p>
<p>MVVMを図にするとこんな感じ。(Presentation Modelもほぼ同じ)</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png"></p>
<p>Image By <a href="http://ja.wikipedia.org/wiki/Model_View_ViewModel">Wikipedia</a></p>
<p>データバインディングで自動的にというのが重要でこの仕組みを全部手書きで実現すると手間がかかりすぎてViewとロジックは分離できるかも知れませんが肝心のロジックを書く時間等大事な物を失ってしまいそうです。なのでWPFというかMVVMに手を出すときはデータバインディング(或いはその類似技術)重要。</p>
<p>MVVMとPresentation Modelの違いは、MVVMはそこからさらに進んでWPFやSilverlightはViewを完全にXAMLだけで記述することでViewを完全に抽象化出来る(ViewModelに対して複数のViewを切り替えられる)ことで、なのでXAMLのような技術が無く、Viewを完全に抽象化出来ないMVVMパターンはPresentation Modelパターンと変わらないらしいです。</p>
<hr>
<h2 id="-">まとめ</h2>
<ul>
<li>MVVMはMVCの一種てPresentation Modelの子供</li>
<li>MVCではView絡みのロジックの受け入れ先がないという問題を解決するためにPresentation Model(他の派生パターンも)が生まれた</li>
<li>プロパティもイベントも状態も自動的に反映する。データバインディング重要</li>
<li>MVVMとPresentation Modelはほぼ一緒だけどWPFのMVVMはViewを抽象化できる</li>
</ul>
<p>WPFが見当たりませんが(おい)、まとめるとこんな感じでしょうか、次回からは実際にVisualStudioでModel、View、ViewModelを作っていこうと思います。</p>
<h2 id="-">参考</h2>
<ul>
<li><a href="http://www.slideshare.net/Yamaki/wpfwpf">今さらWPF？いいえ、今こそWPF！</a></li>
<li><a href="http://ugaya40.net/mvvm/mvvm_document.html">「MVVMパターンが必要な理由」啓蒙用資料公開</a></li>
<li><a href="http://ja.wikipedia.org/wiki/Model_View_Controller">MVCパターン@Wikipedia</a></li>
<li><a href="http://ja.wikipedia.org/wiki/Model_View_ViewModel">MVVMパターン@Wikipedia</a></li>
</ul>
]]></description>
               <pubDate>2013-01-26T13:03:00+09:00</pubDate>
           </item>
       
           <item>
               <title>プログラムでプログラムを自動生成する</title>
               <guid>https://www.sevenspirals.net/2013/01/25/t4_tamplate/</guid>
               <link>https://www.sevenspirals.net/2013/01/25/t4_tamplate/</link>
               <description><![CDATA[<img src='http://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg/300px-Japan_Air_Self-Defence_Force_Kawasaki_T-4_Aoki-1.jpg'><p>タイトルと写真でT4 Text Templateの話なんだなと一発で分かりますね。</p>
<p>どうしてこうなったと思わなくもないですが、仕事でプログラムを書いていると時々同じような処理を繰り返し書くという事態に遭遇することがあります。</p>
<p>大抵はスタブやプロパティの転記、Excel定義書からのエンティティクラスの書き起こし等々、元ネタも決まってるので基本的に怠惰(爆)なプログラマーは速攻で自動生成しようとします。</p>
<p>が、周りを見渡すと私のような怠惰な人間はあんまりいないのか結構な頻度で手書きで書いてたりします。</p>
<p>なので何番煎じか分かったもんじゃありませんが、プログラムでプログラムを自動生成する方法について書きたいと思います。</p>
<p>※ちなみに個人的にはExcel定義書に関してはこっちをコードから自動生成したいですが、今回は置いときます。</p>
<!-- more -->
<h2 id="-">基本的な考え方</h2>
<p>例えばExcel定義書からエンティティを書き起こす場合だと、以下のような定義を延々書く羽目になると思います。</p>
<p>※今回はCoffeeScriptじゃなくてC#です。</p>
<pre><code>/// &lt;summary&gt;
/// 社員コード
/// &lt;/summary&gt;
public int EmployeeCode{ get; set; }
</code></pre><p>この場合ですとおそらくExcel定義書には名前と型とIDくらいは最低限書いてあるんだと思いますが、項目が100も200もあった日にはC#の自動プロパティで少し楽になった程度では割に合わないくらい手間がかかります。</p>
<p>というか私の場合手で書いたら途中で絶対ミスる。</p>
<p>この例の場合、&quot;社員コード&quot;、&quot;int&quot;、&quot;EmployeeCode&quot;以外は定型です。</p>
<p>ですので、何らかの手段でExcelの中身を読み込めば以下のような処理で出力できます。</p>
<p>※今回Excelのデータを読み込む処理自体は割愛します。</p>
<pre><code>foreach(Field field in fields){
  Console.WriteLine(&quot;/// &lt;summary&gt;&quot;);
  Console.WriteLine(&quot;/// {0}&quot;, field.Name);
  Console.WriteLine(&quot;/// &lt;/summary&gt;&quot;);
  Console.WriteLine(&quot;public {0} {1}{{ get; set; }}&quot;, field.Type, field.Id);
}
</code></pre><p>このように定型の部分を抽出してプログラムで出力しようというのが基本の考え方です。</p>
<h2 id="t4-text-template">T4 Text Template</h2>
<p>で、上記のようにプログラムを書いてもいいんですが、書式が変わる度にいちいちプログラムを再コンパイルするのも面倒です。</p>
<p>なので面倒でないようにVisual Studioにはそのための仕組みが用意されています。それがT4 Text Template。</p>
<p>使い方は簡単。プロジェクトに<code>新しい項目の追加</code>から<code>テキストテンプレート</code>を選んで新規作成します。ちなみに拡張子は.ttです。</p>
<p>T4 Templateに先ほどのプログラムを移植すると以下のようになります。</p>
<p>せっかくなのでクラス定義丸ごと生成するようにしてみました。</p>
<pre><code>&lt;#@ template debug=&quot;false&quot; hostspecific=&quot;false&quot; language=&quot;C#&quot; #&gt;
&lt;#@ assembly name=&quot;System.Core&quot; #&gt;
&lt;#@ import namespace=&quot;System.Linq&quot; #&gt;
&lt;#@ import namespace=&quot;System.Text&quot; #&gt;
&lt;#@ import namespace=&quot;System.Collections.Generic&quot; #&gt;
&lt;#@ output extension=&quot;.cs&quot; #&gt;
&lt;#
  /* 項目の定義を取得する */
#&gt;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace foo.dto {
  public class &lt;#= className#&gt;
  {
&lt;#  Generate(fields, (field)=&gt;{#&gt;
    /// &lt;summary&gt;
    /// &lt;#= field.Name #&gt;
    /// &lt;/summary&gt;
    public &lt;#= field.Type #&gt; &lt;#= field.Id #&gt;{ get; set; }
&lt;#});#&gt;
  }
}
&lt;#+
void Generate&lt;T&gt;( IEnumerable&lt;T&gt; seq, Action&lt;T&gt; action )
{
  foreach( var item in seq ) { action(item); }
}
#&gt;
</code></pre><p>ざっくり解説すると地の文はそのまま出力され、<code>&lt;#= #&gt;</code>は変数の中身に置換されます。</p>
<p>また、<code>&lt;# #&gt;</code>で囲まれた部分はC#のプログラムとして実行されるのでこれを駆使してコードを生成します。</p>
<p><code>&lt;#+ #&gt;</code>で囲まれた部分はクラス定義としてメソッド等が定義できます。ここでは<code>Generate</code>という要素の集合を出力するためのメソッドを定義しています。</p>
<p>この手法は<a href="http://kazuktnd.wordpress.com/2010/08/13/csproj-user-%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE-t4-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/">こちら</a>で紹介されていて便利なのでそのまま使っています。</p>
<p><code>&lt;#@ assembly name=&quot;&quot;#&gt;</code>はその名の通りアセンブリでTemplate内でロードするクラスライブラリを指定します。GACに登録されていれば名前を指定するだけで読み込めます。</p>
<p><code>&lt;#@ import namespace=&quot;&quot;#&gt;</code>は<code>using</code>と同じ意味です。</p>
<p>基本的にC#で出来ることは全部出来るので例えば<code>&lt;#@ assembly name=&quot;&quot;#&gt;</code>で外部のライブラリを使ってExcelファイルを読み込む等々かなり複雑なことまで出来ます。</p>
<h2 id="-">まとめ</h2>
<p>なかなか日々の作業に追われていると、とにかく数をこなそうと頑張りがちです。</p>
<p>ただ、あまりに効率が悪いうえに頑張ったあげくにミスとか悲しすぎるので、<strong>楽しようよ</strong>。(魂の叫び)</p>
]]></description>
               <pubDate>2013-01-25T19:11:00+09:00</pubDate>
           </item>
       
           <item>
               <title>The Semantic Grid System</title>
               <guid>https://www.sevenspirals.net/2012/11/23/semantic_grid_system/</guid>
               <link>https://www.sevenspirals.net/2012/11/23/semantic_grid_system/</link>
               <description><![CDATA[<img src='http://farm6.staticflickr.com/5217/5420762245_548a535ffd_z.jpg'><p><a href="http://twitter.github.com/bootstrap/">Bootstrap</a>は私のようなセンスいまいちな開発者でも簡単に見栄えの良いサイトが作れる素晴らしいフレームワークなんですが1点だけ気になって夜も眠れないところがあります。(昨夜は熟睡でした)</p>
<!-- more -->
<h1 id="-">気になるところって?</h1>
<p>気になるところというのは段組を表現するためのGridシステムで、例えばBootstrapで左右に分割したレイアウトにしようと思ったら、</p>
<pre>
&lt;div class="container"&gt;
  &lt;div class="row"&gt;
    &lt;div id="navigation" class="span6"&gt;
      ～ナビゲーション～
    &lt;/div&gt;
    &lt;div id="content" class="span6"&gt;
      ～コンテンツ～
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>

<p>のようにします。</p>
<p>class属性に<code>.row</code>とか<code>.span*</code>とか付けてGrid構造を記述していますが、これではHTML内にGridのレイアウトが記述されているため、レイアウトを変えようと思ったらHTMLを変更しないといけません。</p>
<p>また、特に<code>.row</code>は純粋にGridの行を記述するためのものなので出来れば書きたくありません。</p>
<p>ただ、これはCSSを直接使った場合であってGitHubリポジトリから取得すればlessファイルが同梱されています。</p>
<p>この中に記述されたMixinを使えば任意のCSSセレクタを使ってGridレイアウトを定義できます。</p>
<pre>
@import "bootstrap/variables";
@import "bootstrap/mixins";

.side {
  .makeColumn(6);
}
.main {
  .makeColumn(6);
}
</pre>

<p>こんな感じで記述したlessファイルを<code>lessc</code>コマンドでコンパイルすると<code>.side</code>と<code>.main</code>を指定した要素が<code>.span6</code>を指定したのと同じになります。</p>
<p>で、このスタイルを使用するように書き換えたHTMLは以下のように、</p>
<pre>
&lt;div class="container"&gt;
  &lt;div class="row"&gt;
    &lt;div id="navigation" class="side"&gt;
      ～ナビゲーション～
    &lt;/div&gt;
    &lt;div id="content" class="main"&gt;
      ～コンテンツ～
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>

<p><code>.span6</code>という決め打ちがなくなったので例えば<code>.side</code>の幅を減らして<code>.main</code>を広く取りたいとなったときにスタイルシートを変更するだけで対応できるようになります。</p>
<p><code>.container</code>や<code>.row</code>についても<code>.container-fixed();</code>、<code>.makeRow();</code>というMixinが定義されているので置き換える事が可能ですが、今回の例では<strong>特に例を思いつかなかったので</strong>そのままです。</p>
<p><code>.row</code>の存在が何となく気に入らない（おい）以外は固定幅ならこれで問題無く使えるんですがResponsiveな場合や、複雑なレイアウトだと<strong>計算が面倒なので</strong><code>.row-fluid</code>を使いたいんですが何故か上手くいかずに挫折。</p>
<p>Responsiveな場合はメディアクエリの内容にに応じて<code>@gridColumnWidth</code>と<code>@gridGutterWidth</code>の値を定義してやればいけそうなんですがfluidだけはどうもこれらを%指定にするだけでは駄目らしく上手く動いてくれません。(やり方知ってるよという方是非教えて下さい。)</p>
<h1 id="-">ここから本題</h1>
<p>で、これを解決するために何か無いかと探していたら今回のタイトルの<a href="http://semantic.gs">The Semantic Grid System</a>(以下長いのでURLからsemantic.gs)が見つかったので使ってみました。</p>
<p>これは何かというと、先ほど出てきた<code>.makeRow();</code>や<code>.makeColumn();</code>のようなGridレイアウトのためのMixin定義で、less, scss, stylの3形式で提供されています。</p>
<p>提供されるMixinは、それぞれ<code>.makeRow();</code>と<code>makeColumn();</code>に対応する<code>.row();</code>と<code>.column();</code>、offsetのための<code>.push();</code>と<code>.pull();</code>です。</p>
<p><code>.container</code>に相当する物はないので自分で定義する必要がありますが、初期設定では(固定幅なら)Bootstrapの<code>.container</code>がそのまま使えます。</p>
<p>これを使って先ほどのHTMLとスタイルシートを書き換えてみます。</p>
<p>まずlessファイルから、</p>
<pre>
@import "grid"

.side {
  .column(6);
}
.main {
  .column(6);
}
</pre>

<p>あんまり変わりませんね。次はHTML、</p>
<pre>
&lt;div class="container"&gt;
  &lt;div id="navigation" class="side"&gt;
    ～ナビゲーション～
  &lt;/div&gt;
  &lt;div id="content" class="main"&gt;
    ～コンテンツ～
  &lt;/div&gt;
&lt;/div&gt;
</pre>

<p><code>.row</code>が消せました、やったね。サイトのサンプルにあるように複雑なレイアウトだと<code>.row();</code>を使う必要がありますが、簡単なレイアウトなら無くても動作します。</p>
<p>また、デフォルトでは固定幅ですが、<code>@total-width</code>に<code>100%</code>を指定するとfluid layoutとして動作します。</p>
<p>先ほどのようにBootstrapの<code>.container</code>を使う場合、Responsive
だと、コンテナの幅がウィンドウ(画面)のサイズによって変わるので、fluid layoutにして追従するようにした方が何かと楽です。</p>
<p>注意点としては、BootstrapではSmartphone向けの表示になると全ての<code>.span*</code>の幅が100%になりますが、semantic.gsではそういう指定は特に入っていないので必要なら自分で指定します。</p>
<p>最初、Bootstrapと競合しないか不安だったんですがある程度考慮して作られているらしく、特に問題無く動いています。</p>
<p>というわけで、<code>.container</code>こそ残っていますが、それ以外はほぼ満足のいく結果になったのでこれからは安眠できそうです。(繰り返しますが昨夜は熟睡でした)</p>
]]></description>
               <pubDate>2012-11-23T18:57:31+09:00</pubDate>
           </item>
       
           <item>
               <title>ズルいデザインテクニックを取り入れてみた</title>
               <guid>https://www.sevenspirals.net/2012/11/21/zurui-design/</guid>
               <link>https://www.sevenspirals.net/2012/11/21/zurui-design/</link>
               <description><![CDATA[<img src='http://www.lucnix.be/d/169479-2/Pont+du+Gard-+03.jpg'><p>※画像に特に意味はありません。</p>
<p>最近、<a href="https://speakerdeck.com/ken_c_lo/zurui-design">ズルいデザインテクニック</a>というのが流行っているらしいので流行に便乗してこのブログにも取り入れてみました。ズルいですね。</p>
<!-- more -->
<h2 id="-">ズルい付箋</h2>
<p>基本は<a href="http://www.paulund.co.uk/creating-different-css3-box-shadows-effects">こちらのサイト</a>のCSSと同じ構造ですが背景に単色でなくズルいグラデーションを使用しています。</p>
<p>あとは立体感を出すためにぼけ足の長い影を足しています。これは先ほどのサイトのEffect6～8で使われていますね。スライドでも紹介されています。</p>
<h2 id="-">ズルい背景</h2>
<p>背景画像はスライドにある<a href="http://subtlepatterns.com/">Subtle Patterns</a>の画像を使用しています。</p>
<p>記事の背景になっている紙のスタイルは付箋と同じテクニックで影付け+ここでも立体感を出すために画像の上からぼけ足の長い影を足しています。</p>
<h2 id="-">ズルい線、ズルい影</h2>
<p>その他、ズルい線やズルい影は色々なところで使われています。</p>
<p>使ってる箇所が多いのでスライドにもあるようにMixin化して使っています。(私はbootstrap+lessを使ってるのでbootstrap+lessで作りました)</p>
<h2 id="-larr-">ズルい感想&larr;?</h2>
<p>やって見ると思いの外簡単に見栄えを良くすることが出来ました。ズルいですね。</p>
<p>個人的に好みなのはズルい線とズルいグラデーションです。特にグラデーションは言われないと入ってるか入ってないか微妙なくらい薄くてもいざ削ると印象が大きく変わります。</p>
<p>というわけで今回はブログのCSSを更新した事をネタに記事を更新するというズルい回をお送りしました。</p>
]]></description>
               <pubDate>2012-11-21T19:33:15+09:00</pubDate>
           </item>
       
           <item>
               <title>ジェットスターで札幌に行ってみた</title>
               <guid>https://www.sevenspirals.net/2012/11/14/jetstar/</guid>
               <link>https://www.sevenspirals.net/2012/11/14/jetstar/</link>
               <description><![CDATA[<img src='http://www.lucnix.be/d/62183-2/DSC_2690.jpg'><p>先日、妹の結婚式のために札幌に行ったんですがその際に出来るだけ安く行こうということでジェットスターを利用してみました。</p>
<!-- more -->
<h2 id="-">予約</h2>
<p>宿泊先は手配済みだったので航空券だけジェットスターのサイトで予約しました。</p>
<p>このサイトが地味にくせ者で、一部日本語ページが作りかけなのかページ遷移の設定がおかしいのかちょいちょい英語ページにリダイレクトされます。あと、私と相性が悪いのか説明がわかりにくい。</p>
<p>出てくるのはだいたい操作ミスとか異常系のページ遷移みたいですがちょっと怖い。</p>
<p>便数はそんなに多くない（し、成田までの移動時間を考えると選択肢はさらに絞られる）のですがまあ、出来るだけ手頃な便と座席を指定して予約します。</p>
<p>ここで他と違うのは手荷物が有料で出来るだけ早いタイミングで申し込んだ方が安く付くというくらいでしょうか。今回は手荷物は機内持ち込み範囲内なので無しで。</p>
<p>予約が成立すると予約番号が発行されます。この番号はあとでチェックインに使います。</p>
<h2 id="-">ウェブチェックイン</h2>
<p>支払い済みでかつ出発の48時間以内になるとウェブサイト上でチェックインを行い、搭乗券を受け取ることが出来ます。</p>
<p>ウェブチェックインを行うと搭乗券のPDFが生成されるのでこれをメールで受信するかその場で印刷します。PDF自体はカラーですがバーコードを読むだけなので印刷時は白黒で構いません。</p>
<p>私の場合はプリンタを持ってないのでメールで受け取ってからセブンイレブンのネットプリントで印刷しました。</p>
<p>ちなみにQRコード搭乗券というのがあってそれならスマートフォンの画面表示で良いらしいんですが<strong>例によってどうやったら出来るのかよく分かりませんでした</strong>。</p>
<p>チェックインは復路が一週間以内なら往復まとめてチェックインできますが、何故か私はまあ、良いかと往路だけチェックインしたため、後で復路のチェックインを行う際にWEBサイトでまた悩む羽目になりました。</p>
<h2 id="-">成田へ</h2>
<p>ジェットスターは東京からだと成田発なので電車に揺られて成田空港まで移動。地味に全行程の中で一番時間がかかりました。</p>
<p>ちなみに初成田です。</p>
<h2 id="-">搭乗手続き</h2>
<p>搭乗手続き自体はウェブチェックインを済ましていて手荷物が無ければそのまま保安検査に向かえばOKです。</p>
<p>チェックインがまだの場合は空港内の端末でチェックインを行います。</p>
<p>保安検査では機内持ち込みの荷物の大きさもチェックされますがまあ、見た感じ明らかに逸脱していなければ止められることは無いんじゃないかなと思います。</p>
<p>保安検査を終えたら時間まで待ってバスで移動。時間まではまあ、売店があるくらいで特にすることも無いのでぼーっと待ちます。</p>
<p>荷物と時間に厳しい以外はこの辺の手続きは他と特に変わりません。</p>
<p>居ない人は一応放送で呼び出してましたが、定刻になったらさっさと出発してしまいました。</p>
<h2 id="-">機内</h2>
<p>機体自体は同じですが座席がたくさん詰め込まれてて狭いです。</p>
<p>ただまあ、我慢できない狭さではないので乗ってしまえば機内サービスが有料なくらいで特に違いは感じませんでした。気圧変化で耳が痛くなるのも同じです。＜それは体質の問題。</p>
<p>男性の添乗員を初めて見ました。</p>
<p>その後は爆睡したので記憶無し。</p>
<h2 id="-">到着</h2>
<p>手荷物がないので特に何事も無く到着ゲートをくぐって空港内へ。</p>
<p>ジェットスターのゲートは新千歳空港の一番端だったので実家から来た他の家族と合流するのにとぼとぼ歩いて真ん中の方に移動。</p>
<p>・・・が、何故かここで迷子スキルが発動。散々歩き回る羽目になりました。</p>
<h2 id="-">感想</h2>
<p>安いです。航空券に関しては予定の半額以下で収まりました。</p>
<p>その分、機内サービスが無いとか狭いとか予約変更できないとかはありますが、今回の場合予定は既に決まってるし私自身、機内サービスがあろうが無かろうが気にならないので問題ありませんでした。</p>
<p>従来のサービスが当たり前になっているくらい頻繁に飛行機に乗ってるとかあとは長距離とかだと辛いのかも知れませんがそうでもない国内の一人旅なら全然有りです。</p>
<p>ただ、成田空港までが遠かった・・・。</p>
]]></description>
               <pubDate>2012-11-14T06:47:00+09:00</pubDate>
           </item>
       
           <item>
               <title>メインクエスト開始</title>
               <guid>https://www.sevenspirals.net/2012/11/10/playlog1/</guid>
               <link>https://www.sevenspirals.net/2012/11/10/playlog1/</link>
               <description><![CDATA[<img src='https://lh6.googleusercontent.com/-fxamLzy3Lr8/UJ4v7PMb5CI/AAAAAAAAA8c/YdMr9PlLZ2A/s800/playlog1_1.jpg'><p>Alternate Start - Live Another Lifeを導入しているため、アルフタンドの大リフトに放り出された我らがドヴァキンですが、なんとかメインクエストまで戻ってきました。</p>
<p>意外と歩き回ることになってメインクエスト開始前にドラゴンブリッジ辺りまで足を伸ばす羽目になりました。（やっぱりそのまま進めた方が楽だったかもしれない）</p>
<p>まあ、すぐ自由に動き回れるから良いか。</p>
<!-- more -->
<p><img src="https://lh4.googleusercontent.com/-qmtc2sxxxFk/UJ4v7huzaxI/AAAAAAAAA8o/j_hV4QkyZp0/s800/playlog1_2.jpg" alt=""></p>
<p>メインクエストに合流してリバーウッドに到着しましたが、リディアが居ない上にシャウトが使えないので戦力的にきつい。というわけで少なくともミルムルニルを倒しておこうというわけでリバーウッドからホワイトランへ直行。</p>
<p>さっそく首長にヘルゲンでの出来事を報告。<strong>その場に居なかったのに</strong>見てきたように語るドヴァキン。</p>
<p><img src="https://lh5.googleusercontent.com/-2-dYk6H-UN0/UJ4v7rmoa4I/AAAAAAAAA8k/9JSs4GD22c0/s800/playlog1_3.jpg" alt=""></p>
<p>ここに来るまでにいくらか戦闘経験を積んでいるのでドラゴンストーンはさくっと入手。西の監視塔でミルムルニルと戦闘。</p>
<p><del>イリレスと愉快な仲間達が</del>さっくり退治します。</p>
<p>ミルムルニルを倒した事を首長に報告し、従士の資格をもらいリディアを仲間にします。</p>
<p><img src="https://lh4.googleusercontent.com/-PKWzDReLqQQ/UJ4v8s5PltI/AAAAAAAAA80/KUkswnmf3Uc/s800/playlog1_4.jpg" alt=""></p>
<p>うちのリディアさん。ころころ顔が変わりますが現在はこんな感じです。</p>
<p>いつもならここでブリーズホームを購入しますが今回は家を建てるので買わずにスルー。</p>
<p>いまだDawnguardとHearthfireは影も形も見えません。</p>
]]></description>
               <pubDate>2012-11-10T15:53:16+09:00</pubDate>
           </item>
       
           <item>
               <title>node.jsからTracを操作する(ための下準備)</title>
               <guid>https://www.sevenspirals.net/2012/11/02/20121102_1/</guid>
               <link>https://www.sevenspirals.net/2012/11/02/20121102_1/</link>
               <description><![CDATA[<img src='http://www.lucnix.be/d/121732-2/Bouteilles+de+couleurs.jpg'><p>しばらく前の話になりますが、Trac Lightningのバージョン3あたりからTraMが同梱されなくなりました。</p>
<p>個人で使う分には別に問題無いんですが、会社で使う場合だと大抵複数のプロジェクトが同時に走っており、それに応じて1人が関わっているプロジェクトも複数あるという場合が珍しくありません。</p>
<p>で、各プロジェクトが完全に独立していれば良いんですがまあ、そんなわけもなくプロジェクトを横断してチケットを集計したレポートが欲しいという話が出てきます。</p>
<!-- more -->
<p>そういうときにTracのプラグインを作ってもいいんですが、出来れば慣れた（というかマイブームの）CoffeeScriptで書きたい。</p>
<p>特にチケットの集計だけで良いならTrac Lightningには最初からXMLRPCプラグインが入っているのでそいつ経由でデータを抽出することが出来ます。</p>
<p>そこで、node.jsでXMLRPCが扱えるライブラリはないかと探したところ、<em>node-xmlrpc</em>というそのものずばりな物があったので使ってみたのですがBASIC認証には対応している物のDigest認証に対応していませんでした。</p>
<p>Trac Lightningは普通に入れるとDigest認証なのでこのままでは接続できません。</p>
<p>で、(探せば見つかりそうな気もするけど)ない物は作れというわけでnode-xmlrpcをDigest認証に対応させました。</p>
<p>かなりざっくりな上にTracとの接続しか試してませんが以下のようにすることでTracのXMLRPCメソッドが呼び出せます。</p>
<pre><code>xmlrpc = require &#39;xmlrpc&#39;
options =
  host: &quot;example.com&quot;
  port: 80
  path: &quot;/trac/hogehoge/login/xmlrpc&quot;
  digest_auth:
    user: &quot;foo&quot;
    pass: &quot;bar&quot;

client = xmlrpc.createClient(options)
client.methodCall &#39;ticket.get&#39;, [id], (err, ticket)-&gt;
  console.log ticket
</code></pre><p>これでチケットの情報は一通り抜けるのであとはプロジェクト毎に定期的に取得してDBに格納するなりして集計を行います。</p>
<p>今回改造を加えたソースは以下のリポジトリにアップしてあります。</p>
<p><a href='https://github.com/syaku/node-xmlrpc'>https://github.com/syaku/node-xmlrpc</a></p>
]]></description>
               <pubDate>2012-11-02T12:01:00+09:00</pubDate>
           </item>
       
           <item>
               <title>SparkleShareをさくらVPS上のGitoliteで利用する</title>
               <guid>https://www.sevenspirals.net/2012/10/31/20121031_1/</guid>
               <link>https://www.sevenspirals.net/2012/10/31/20121031_1/</link>
               <description><![CDATA[<img src='https://lh3.googleusercontent.com/-2v5ozfDRdnU/UJ4v5n49YoI/AAAAAAAAA8M/_cxaKYy1pYM/s800-Ic42/Sparkleshare-gnome.png'><p>新プランに移行してから大幅にストレージの容量が増えましたが特に使い道も無く盛大に余っていたのでどうにかしてこれを有効利用出来ないか、というわけで導入済みのGitoliteを使ってSparkleShareをインストールしてみました。</p>
<p>まだ使い始めなのでどのくらい安定しているかは分かりませんが、Gitリポジトリなので履歴が見れますしDropboxのように冗長化はされませんが、ローカルリポジトリに分散することを考えるとまあ、普通の用途なら問題無いかなと。</p>
<p>何より大容量で安価に使えるのが良いです。</p>
<!-- more -->
<h1 id="sparkleshare-">SparkleShareって?</h1>
<p>Gitリポジトリを経由してファイルを共有するDropboxみたいなツールです。</p>
<p>リポジトリフォルダを監視してファイルの追加、削除、編集が行われると片っ端からコミット・プッシュします。</p>
<p>sshで接続できるGitリポジトリなら何でも使えるのでGitHub上のリポジトリを使って共有することも出来ますが、さすがにフルオープンはあれなのでさくらVPS上に構築したGitolite環境にリポジトリを作って使います。</p>
<h1 id="sparkleshare-">SparkleShareクライアントのインストール</h1>
<p><img src="/img/attached/sparkleshare1.png" alt=""></p>
<p>インストーラからクライアントソフトをインストールします。ここでは特に分岐はありませんがインストール後に名前とメールアドレスを入力します。</p>
<p>（多分）お一人様だと余り関係ありませんがリポジトリを共有した際に誰が編集したか識別するためと、Gravatarからアバターの取得を行っているようです。</p>
<p>ここまで終わると公開キーが生成されます。これは後で使いますので控えておいて下さい。</p>
<h1 id="git-">Gitリポジトリの用意</h1>
<p>Gitoliteのインストールから書くと結構複雑で大変なのでそれは導入済みということで進めます。</p>
<p>gitolite-adminの設定を編集してSparkleShare用のリポジトリを作成し、先ほど生成されたキーをkeydirに追加し、SparkleShareからアクセス出来るようにして下さい。</p>
<h1 id="sparkleshare-">SparkleShare側の設定</h1>
<p><img src="/img/attached/sparkleshare2.png" alt=""></p>
<p>リポジトリを用意したらSparkleShareに登録します。</p>
<p>タスクトレイアイコンのメニューから、<em>Add hosted project...</em>を選択すると上のようなダイアログが開きます。</p>
<p>自前のリポジトリを使う場合は一番上の<em>On my own server</em>を選択し、<em>Address</em>と<em>Remote Path</em>を入力します。</p>
<p><em>Address</em>はGitoliteのアカウントがgitだとすると、<em>git@example.com</em>、<em>Remote Path</em>には先ほど作成したリポジトリ名を入力し、Addボタンで追加します。</p>
<p>上手くいくとユーザープロファイル直下のSparkleShareフォルダ内にリポジトリがクローンされますので適当なファイルを書き込んで自動的にプッシュされれば成功です。</p>
<p>公式サイト: <a href='http://sparkleshare.org/'>sparkleshare.org</a></p>
]]></description>
               <pubDate>2012-10-31T23:52:59+09:00</pubDate>
           </item>
       
           <item>
               <title>MOGOK上にRailsアプリを構築する(Windows編)</title>
               <guid>https://www.sevenspirals.net/2012/10/31/20121030_1/</guid>
               <link>https://www.sevenspirals.net/2012/10/31/20121030_1/</link>
               <description><![CDATA[<img src='https://lh3.googleusercontent.com/-13vAQJD3zBQ/UJ4v9WvWYtI/AAAAAAAAA9I/rYAj5Ti7m6o/s640-Ic42/ruby_org.png'><p>IIJが提供するRuby PaaSのMOGOKがオープンβサービスを開始したので早速MOGOK上にアプリケーションを構築してみたいと思います。</p>
<p>最初ということで基本的にはMOGOKのサイトのチュートリアルをなぞる形で進めていきます。</p>
<p>で、何を作るかですが、こういうのはコンソールアプリはHello World、WEBサービスはToDoリストを作るのが伝統らしい(嘘)のでその伝統に従って今回はToDoリストを作ってみたいと思います。</p>
<!-- more -->
<h4 id="sdk-">SDKインストール</h4>
<p>まず何はなくとも開発環境をインストールしないといけないんですが、Windowsに関して言えばインストーラを実行するだけでRubyからRailsからMySQLからコマンドラインツールまで全部入ります。簡単ですね。</p>
<p>SDKのインストールが完了すると、スタートメニューに&quot;MOGOK Windows Client Packages&quot;というのが追加されているのでその中の&quot;msys.bat&quot;を実行するとツール等にパスが通った状態のコンソールが立ち上がります。作業は基本的にこのコンソール上で行います。</p>
<h4 id="rails-">Railsアプリのひな形を作る</h4>
<p>コンソールを立ち上げるといきなり/binフォルダだったりするんでまずは適当な場所に作業用のフォルダを作成します。</p>
<p>日本語ユーザー名でもちゃんと動くかは試してませんがわかりやすいところと言うことで今回はDocumentsフォルダの配下にrails_appsフォルダを作成してその中で作業することにします。</p>
<pre><code>$ mkdir rails_apps
$ cd rails_apps
</code></pre><p>作業フォルダに入ったらまずRailsアプリケーションのひな形を作ります。アプリケーション名は今回はmogok-todoとします。</p>
<pre><code>$ rails new mogok-todo -d mysql
～大量の出力～
is installed.
</code></pre><p>コンソールにどばーっと出力されますが、特にエラーっぽい表示がなければひな形の作成は成功です。＜おおざっぱ
ひな形を作成したら次はGemfileを編集します。18行目辺りの、</p>
<pre><code># gem &#39;therubyracer&#39;, :platforms =&gt; :ruby
</code></pre><p>上記のコメントアウトを外します。</p>
<p>MOGOKサイトのチュートリアルではさらっと流していますが<strong>therubyracer</strong>はV8のJavaScriptインタプリタをrubyの中に突っ込んじまおうというライブラリらしいです。</p>
<p>MOGOKで使われているRailsは3.2.8なので3.1から採用されたcoffee-scriptとかの為かなーと思いますがすいません、Rails自体久々に触ったのでまだよく分かってません。（爆）</p>
<p><em>:platforms =&gt; :ruby</em>はC Rubyの場合のみインストールという指定ですね。JRubyとかではちゃんと動かないらしい。</p>
<p>Gemfileを書き換えたらインストールをしないといけないので以下のコマンドでインストールします。が、その前にMySQLのサービスを起動します。私の環境ではSDKインストール直後ではサービスは起動していませんでした。</p>
<p>ただし、これまた私の環境ではサービスが動いていても<em>#&lt;Mysql2::Error: Can&#39;t connect to MySQL server on &#39;localhost&#39; (10061)&gt;</em>というエラーが出たので<strong>database.yml</strong>のhost指定を<em>localhost</em>から<em>127.0.0.1</em>へ書き換えました。</p>
<p>無事MySQLが動いていれば以下のコマンドを実行。</p>
<pre><code>$ cd mogok-todo
$ bundle install
$ rake db:create:all
</code></pre><p>ここでエラーが出なければひな形の作成は終了です。</p>
<h4 id="-">アプリケーションを作り込む</h4>
<p>ここからはRailsアプリを作り込んでいきますが、あんまり複雑なのを作っても仕方ないので単純にタイトルと終了フラグを持つだけのモデルを作成します。</p>
<p>まずは<em>rails generate</em>コマンドでモデル、コントロール、ビューのひな形を作成します。</p>
<pre><code>$ rails generate scaffold task titie:string done:boolean
$ rake db.migrate
</code></pre><p>基本的なCRUDの処理はこれで出来てしまう&amp;余りにも公式チュートリアルそのままだとまずいので<a href='http://twitter.github.com/bootstrap/'>Twitter Bootstrap</a>を使ってViewをもう少しかっこよくしましょう。</p>
<p>公式サイトから<em>bootstrap.zip</em>をダウンロードしてきてその中の<em>cssフォルダ</em>と<em>imgフォルダ</em>をpublicフォルダにコピーします。</p>
<p>そして、BootstrapのCSSを使うために<em>app/views/layouts/application.html.erb</em>を以下のように書き換えます。</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;ToDoリスト&lt;/title&gt;
    &lt;%= stylesheet_link_tag    &quot;/css/bootstrap.min.css&quot; %&gt;
    &lt;%= stylesheet_link_tag    &quot;application&quot;, :media =&gt; &quot;all&quot; %&gt;
    &lt;%= javascript_include_tag &quot;application&quot; %&gt;
    &lt;%= csrf_meta_tags %&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=&#39;container&#39;&gt;
      &lt;%= yield %&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>ただ、標準でsass-railsが入ってるので実際にはsass-rails-bootstrapとか使った方がカスタマイズもやりやすいと思います。</p>
<p>あとはBootstrapの書式に従ってビューを順次書き換えや細かな機能を実装していきます。</p>
<p>そうしてできあがったのが<a href='http://mogok-todo-007.ruby.iijgio.com/tasks'>こちら</a>になります。</p>
<p>完了は削除というワイルド仕様です。</p>
<p>いくらRailsアプリの作成自体は本題じゃないと言ってももうちょっと真面目に作れと自分でも思います。はい。</p>
<p>最後にproduction環境でstaticなファイルを扱うために<em>config/environments/production.rb</em>の以下の値を<em>false</em>から<em>true</em>に書き換えます。</p>
<pre><code>config.server_static_assets = true
</code></pre><h4 id="git-">Gitリポジトリの作成</h4>
<p>MOGOKにデプロイするためにGitリポジトリを作成します。</p>
<p>この段階ではまだローカルリポジトリの操作なので普通にgitコマンドでリポジトリを作成します。</p>
<pre><code>$ git init
$ git add .
$ git commit -m &quot;first commit&quot;
</code></pre><p>特にここでエラーが出ることはないと思いますが以下のコマンドでリポジトリのステータスを確認します。</p>
<pre><code>$ git status
</code></pre><p>正常なら下記のような表示がコンソールに出力されます。</p>
<pre><code># On branch master
nothing to commit (working directory clean)
</code></pre><h4 id="mogok-">MOGOKにデプロイする</h4>
<p>いよいよクラウドにデプロイします。</p>
<p>コンソール上でMOGOKの操作を行うには<code>mogok</code>コマンドを使用します。</p>
<p>とりあえずおもむろに<code>$ mogok -v</code>でバージョン確認。</p>
<p>現時点では1.0.0となっているはずです。</p>
<p><code>$ mogok list</code>でアプリケーションの一覧が取得できます。まだ何も登録していなければ何も表示されません。</p>
<p>初回実行時はログインIDとパスワードを聞かれるはずなのでユーザー登録の際に登録したIDとパスワードを入力して下さい。</p>
<p>で、本番。下記のコマンドでMOGOKクラウド上にアプリケーションを登録します。</p>
<pre><code>$ mogok create mogok-todo-XXXX
</code></pre><p>アプリケーション名は全体でユニークな必要があるのでXXXXの部分を適当な文字列にするなり全く違う名前を付けるなりして下さい。</p>
<p>成功するとGitのリモートリポジトリが登録されるので、<code>$ git remote -v</code>でちゃんと登録されているか確認して下さい。上手くいっているようであれば<code>$ git push mogok master</code>でリモートリポジトリにプッシュ。</p>
<h4 id="-">ビルドして実行する</h4>
<p>プッシュが成功したら、<code>$ mogok build</code>でビルドして実行します。</p>
<p>割と時間がかかりますが、ビルドが終わったら普通のRailsアプリと同じようにdb:migrateを行います。</p>
<p>コマンドは以下のようにmogokコマンドから呼び出します。</p>
<pre><code>$ mogok rake db:migrate
</code></pre><p>migrateも正常に終わったら<code>$ mogok start</code>でアプリケーションを開始します。</p>
<p>正常に起動したら、<code>$ mogok info</code>を実行して表示されるURLにアクセスして動作を確認します。</p>
<h4 id="-">使ってみての感想</h4>
<p>開発環境の構築やデプロイが一発で出来るのはさすがに楽です。</p>
<p>作ってる途中のはまりどころは、単純に私がRailsに慣れてないからですがrails newの際に-d mysqlを付け忘れてはまったり、config.server_static_assetsを書き換え忘れてはまったりしました。</p>
<p>個人的にはマイブームはCoffeeScriptなのでHerokuのある状況でRailsしかないのはどうなのとか少しは思いますが、日本語の情報やサポートもありますし、正式版の価格次第ですがRails使うつもりなら選択肢としては良いんじゃないかと思います。</p>
]]></description>
               <pubDate>2012-10-31T12:47:11+09:00</pubDate>
           </item>
       
           <item>
               <title>XLSX.jsでnode.jsからxlsxファイルを読む</title>
               <guid>https://www.sevenspirals.net/2012/10/28/20121027_2/</guid>
               <link>https://www.sevenspirals.net/2012/10/28/20121027_2/</link>
               <description><![CDATA[<img src=''><p>というわけで前回の続きです。</p>
<p>今回は既にあるxlsxファイルを読み込んでnode.jsから操作します。</p>
<!-- more -->
<p>内容としては前回の出力処理の逆をやれば良いだけです。</p>
<p>ここでは前回作成したxlsxファイルを&quot;input.xlsx&quot;として読み込んでみます。</p>
<p>XLSX.js単体でxlsxファイルを読み込むときは、</p>
<pre><code>new xlsx(&amp;lt;base64文字列&amp;gt;)
</code></pre><p>となるので、node.jsではfs.readFileで読み込んだBufferオブジェクトをtoString(&quot;base64&quot;)で変換して渡してやります。</p>
<pre><code>xlsx = require &#39;node-xlsx&#39;

fs = require &quot;fs&quot;

buf = fs.readFileSync(&quot;input.xlsx&quot;)

# base64にエンコードしてから読み込み
book = new xlsx(buf.toString(&quot;base64&quot;))

console.log JSON.stringify(book)
</code></pre><p>このサンプルを実行すると以下のような出力が得られます。</p>
<pre><code>{&quot;worksheets&quot;:[[[100,200]]],&quot;zipTime&quot;:17,&quot;creator&quot;:&quot;syaku&quot;,&quot;lastModifiedBy&quot;:&quot;XLSX.js&quot;,&quot;created&quot;:&quot;2012-10-27T14:05:56.857Z&quot;,&quot;modified&quot;:&quot;2012-10-27T14:05:56.857Z&quot;,&quot;activeWorksheet&quot;:0,&quot;processTime&quot;:0}
</code></pre><p>ちゃんとJSONオブジェクトになっていますね。</p>
<p>あとはこれを好きなように操作して画面に表示するもよし、ファイルに書き出したい時は前回の手順でファイルに出力します。</p>
]]></description>
               <pubDate>2012-10-28T11:17:43+09:00</pubDate>
           </item>
       
           <item>
               <title>Hearthfireはじめました</title>
               <guid>https://www.sevenspirals.net/2012/10/27/20121027_1/</guid>
               <link>https://www.sevenspirals.net/2012/10/27/20121027_1/</link>
               <description><![CDATA[<img src='https://lh3.googleusercontent.com/-0FAmLJRKDME/UJ4v5mSZmcI/AAAAAAAAA8E/OywZvxCXc3A/s800-Ic42/enb2012_10_27_9_50_11.jpg'><p>というわけで日本語版も配信されたのでDawnguard共々購入しました。</p>
<p>メインクエストはクリアしていますが、せっかくなのでmodも色々詰め替えて新規にプレイしようと思います。</p>
<!-- more -->
<p>ちなみに現在のmodの構成はこんな感じです。</p>
<ul>
<li>Dawnguard</li>
<li>Hearthfire</li>
<li><a href='http://skyrim.2game.info/detail.php?id=19'>Unofficial Skyrim Patch</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=23491'>Unofficial Dawnguard Patch</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=25127'>Unofficial Hearthfire Patch</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=3863'>SkyUI</li>
<li><a href='http://skyrim.2game.info/detail.php?id=16178'>1080 Smaller ipHUD</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=3222'>Immersive HUD - iHUD</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=1177'>Xbox360 Controller KeyRemap</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=25501'>Warburgs Detailed Paper World Map</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=20228'>Materialbox - auto storage</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=60'>Enhanced Blood Textures</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=9557'>Alternate Start - Live Another Life</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=10168'>ApachiiSkyHair</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=6953'>BFG - Better FaceGen (Male Facegen Type1)</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=4141'>High Res Face Maps for Men by Geonox</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=12951'>Enhanced Character Edit</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=7127'>RANs HeadMesh Variants (TypeB)</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=7897'>envision Face</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=6709'>UNP+TBBP</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=19666'>Fair Skin Complexion Sweaty Body-ADEC-CBBE-UNP-UNPB</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=7305'>UNP Female Armors</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=19772'>Remodeled Armors - UNP version - Originally by Mak07 for CBBEv3M</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=1002'>JaySus Swords</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=14443'>Decent Women - improve female npcs face</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=20460'>Dark Brotherhood Babette Replacer -Dawnguard Supported-</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=19169'>EDialog</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=8879'>Paarthurnax Choices plus3</a></li>
<li><a href='http://skyrim.2game.info/detail.php?id=15972'>Radiance</a></li>
</ul>
<p>ENBはRequested ENBをVer0.113のdllで使用。</p>
<p>テクスチャ、体型は割と気分で変えてます。</p>
<p><img src='/img/attached/enb2012_10_27_9_51_11.jpg'></p>
<p>Alternate Startを入れてるのでまずは出自を選択します。適当にマーラ様にお任せしたら怒られました。</p>
<p>ともあれ、出自を決めたらベッドでお休みなさい・・・。</p>
<p><br />
<br /></p>
<p>/*/</p>
<p><br />
<br /></p>
<p><strong>「は！？」</strong></p>
<p><img src='/img/attached/enb2012_10_27_9_52_28.jpg'></p>
<p>まさかのシンデリオンの研究室からスタート。</p>
<p><img src='/img/attached/enb2012_10_27_9_55_25.jpg'></p>
<p>クエストログにドワーフ・スフィアがまだ居るかも知れないとか書いてるけどまあ、なんとかなるかと気にせず部屋から出たら瞬殺されました。普通に開始した方が楽だったかもしんない・・・。</p>
<p><img src='/img/attached/enb2012_10_27_10_0_26.jpg'></p>
<p>気を取り直して（金目の物を一通り拾ってから）なんとか脱出。シンデリオンの研究室からはアルフタンドの大リフトが目の前だったり意外とウィンドヘルムに近かったりとその辺は一応気を遣ってくれてる模様。</p>
<p>晴れて自由の身（<strong>ローブ一丁でスカイリムに放り出された</strong>とも言う）になったドヴァキンの明日はどっちだ。（ていうか結局Hearthfireはじまってないし・・・。）</p>
]]></description>
               <pubDate>2012-10-27T20:06:08+09:00</pubDate>
           </item>
       
           <item>
               <title>XLSX.jsをnode.jsから使えるようにした</title>
               <guid>https://www.sevenspirals.net/2012/10/19/20121019_1/</guid>
               <link>https://www.sevenspirals.net/2012/10/19/20121019_1/</link>
               <description><![CDATA[<img src=''><p>javascriptから.xlsxファイルを読み書きできるXLSX.jsをnode.jsから簡単に使えるようにWrapp(?)してみました。</p>
<!-- more -->
<p>XLSX.jsについては以下を参照。</p>
<p><a href="http://www.moongift.jp/2012/10/20121017-3/">JavaScriptでXLSX形式を扱う「XLSX.js」 - MOONGIFT</a></p>
<p>導入は、node.jsとnpmが入っている前提で以下のコマンド。</p>
<pre><code>npm install https://github.com/syaku/node-xlsx/tarball/master
</code></pre><p>使い方は元のXLSX.jsと同じで例えば以下のようにするとA1:100, B1:200と記入されたoutput.xlsxが生成されます。</p>
<p>ここまでnode.jsと言っときながらまさかのCoffeeScriptです。</p>
<pre><code>xlsx = require &#39;node-xlsx&#39;
fs = require &quot;fs&quot;

file =
  worksheets: [[]]
  creator: &#39;syaku&#39;
  activeWorksheet: 0

w = file.worksheets[0]
r = w.push([]) - 1
w[r].push 100
w[r].push 200

bin = new Buffer(xlsx(file).base64, &quot;base64&quot;)
fs.writeFileSync(&quot;output.xlsx&quot;, bin)
</code></pre><p>罫線や細かい属性は指定できないようですがnode.jsで作成したWEBアプリ等でお手軽にExcelに出力したいという用途には十分使えるのではないでしょうか。</p>
<p>今回作ったソースのリポジトリは以下にアップロードしてあります。</p>
<p><a href="https://github.com/syaku/node-xlsx/">https://github.com/syaku/node-xlsx/</a></p>
<p>というわけで、読み込みについては次の記事で。</p>
]]></description>
               <pubDate>2012-10-19T09:35:48+09:00</pubDate>
           </item>
       
           <item>
               <title>nasneが届いちゃった</title>
               <guid>https://www.sevenspirals.net/2012/07/26/nasne_01/</guid>
               <link>https://www.sevenspirals.net/2012/07/26/nasne_01/</link>
               <description><![CDATA[<img src='https://lh4.googleusercontent.com/-i7vPZwPDlPc/UBEihVexT3I/AAAAAAAAAts/W8miONS2gvw/s800/A7C961FD-9622-4012-ADB1-ACFC506347CB.JPG'><p>7月19日の発売が延期されたnasneですが、予約していた分の取り消しが間に合わなかったようで届いちゃいました。(爆)</p>
<!-- more -->
<p>届いたからには使ってみなければなるまい(あまり後先考えない人)。ということで開封して接続して起動してみたところ、HDDから異音がすることもなく無事起動。ラッキー。</p>
<p>自宅にはこれのためにひかりTVを解約してフレッツテレビを契約していたのでtorneを起動してnasneの登録とチャンネルスキャンを行ったらすぐBS/CSが観れるようになりました。</p>
<p>番組表の表示や番組検索はまあ、torneでキャッシュしてると思いますが、チャンネルの切替や視聴はネットワーク越しなのにこれまでのtroneで観るのと殆ど変わらないくらいスムーズです。</p>
<p>あとDLNAメディアサーバーとしての機能はマニュアルには記載されていますがVer1.5の配信が延期になったのでまだ使えません。</p>
<p>ともあれ、これでtorne+nasne+hulu+DMM.TVと動画コンテンツの視聴環境がほぼPS3に一本化できて大変便利になりました。ニコニコ動画は殆ど観ないのであとはYoutubeくらい？</p>
<p>今のところ調子よく動いてるようなのでしばらくいじってみようと思います。</p>
]]></description>
               <pubDate>2012-07-26T20:05:47+09:00</pubDate>
           </item>
       
           <item>
               <title>zenbackタグを入れてみた</title>
               <guid>https://www.sevenspirals.net/2012/07/21/zenback_tag/</guid>
               <link>https://www.sevenspirals.net/2012/07/21/zenback_tag/</link>
               <description><![CDATA[<img src=''><p>zenbackの関連記事の挙動が安定しないので識別用のタグを入れてみた。</p>
<!-- more -->
<p>さしあたって</p>
<pre><code>&lt;!--zenback_title_begin--&gt;
....
&lt;!--zenback_title_end--&gt;
</code></pre><p>と</p>
<pre><code>&lt;!--zenback_body_begin--&gt;
....
&lt;!--zenback_body_end--&gt;
</code></pre><p>を設定。これで関連記事のタイトルがちゃんと反映されるかどうか試す。</p>
<p>設定以降の記事について反映になるらしいのでちゃんと反映されるかどうかテスト投稿。</p>
]]></description>
               <pubDate>2012-07-21T02:47:25+09:00</pubDate>
           </item>
       
           <item>
               <title>口裂け女 リターンズを観てきました</title>
               <guid>https://www.sevenspirals.net/2012/07/13/kuchisake_returns/</guid>
               <link>https://www.sevenspirals.net/2012/07/13/kuchisake_returns/</link>
               <description><![CDATA[<img src=''><p>元々ホラー好きなのもあるんですが、主演の大堀さんが好きなので<cite><a href="http://manchikan.com/kuchisakereturns/">口裂け女 リターンズ</a></cite>を観に行ってきました。</p>
<!-- more -->
<p>この作品では口裂け女は山奥の村（口裂け女発祥ということから考えると岐阜？）で祭られてる生き神という設定で、民俗学を専攻している大学生の主人公とその友達がその村の祭りを取材に来て生け贄にされる。というストーリーです。</p>
<p>詳しくは公式サイト参照。＜おい</p>
<p>ちなみに、都市伝説の方の口裂け女はこの村から逃げ出した生き神が噂として広まったということになってます。</p>
<p>所々に笑い？あり、涙ありでそれなりに面白いんですがちょっと詰め込み過ぎな感じもしたのでもっとシンプルでも良かったんじゃないかと思います。</p>
<p>あんまりシンプルにしすぎるとアクション映画になりそうですが。</p>
<p>ちなみに、駅に着いたとたんに迷子スキルが発動して映画館の場所が分からなくなったりふらっと本屋に寄ったら出る際に何故か万引き防止のセンサーに引っかかったりとかありましたが、おかげで道は覚えたので次からは大丈夫だと思います。</p>
]]></description>
               <pubDate>2012-07-13T23:55:26+09:00</pubDate>
           </item>
       
           <item>
               <title>DISQUSを追加してみた</title>
               <guid>https://www.sevenspirals.net/2012/07/04/20120630_2/</guid>
               <link>https://www.sevenspirals.net/2012/07/04/20120630_2/</link>
               <description><![CDATA[<img src=''><p>コメントシステムにDISQUSを追加してみた。
zenbackやfacebookコメントとかとも比較してみてどれを使うか決める。</p>
<p>ところで記事によっては文字化けするけど何でやろ。</p>
<!-- more -->
<p><div id="disqus_thread"></div>
  <script type="text/javascript">
    /<em> </em> <em> CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE </em> <em> </em>/
    var disqus_shortname = &#39;sevenspiralsblog&#39;; // required: replace example with your forum shortname</p>
<pre><code>/* * * DON&#39;T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
  dsq.src = &#39;http://&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
  (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
})();
</code></pre><p>  </script>
  <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
  <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></description>
               <pubDate>2012-07-04T14:41:20+09:00</pubDate>
           </item>
       
           <item>
               <title>Facebookコメントも試す</title>
               <guid>https://www.sevenspirals.net/2012/07/04/20120701/</guid>
               <link>https://www.sevenspirals.net/2012/07/04/20120701/</link>
               <description><![CDATA[<img src=''><p>というわけでコメントツールシリーズ第3弾。</p>
<p>最近身の回りでやたらとFacebookが流行り始めたので実はこれでいいんじゃないかという説もあります。</p>
<!-- more -->
<p>使い方は簡単。</p>
<p><a href="https://developers.facebook.com/docs/reference/plugins/comments/">facebook DEVELOPERSサイト</a>へアクセスして必要な項目を設定、Get Codeボタンを押して埋め込み用のコードを取得します。</p>
<p>取得したコードをサイトのテンプレートに埋め込んでやれば使えるようになります。</p>
<p>あ、BlogとかだとURLはちゃんと記事のURLを自動で埋めるようにしないと多分おかしげな事になると思います。</p>
<p>というわけで、試しに貼り付けたのがこちら。</p>
<p>さすがにzenbackと一緒に貼るとめちゃくちゃ重いですね。</p>
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = &quot;//connect.facebook.net/ja_JP/all.js#xfbml=1&quot;;
  fjs.parentNode.insertBefore(js, fjs);
}(document, &#39;script&#39;, &#39;facebook-jssdk&#39;));</script>

<div class="fb-comments" data-href="http://www.sevenspirals.net/20120701.html" data-num-posts="3"></div>

<h4 id="-">追記</h4>
<p>何故か幅が100%にならなかったのでCSSで無理矢理100%にしてみた。</p>
]]></description>
               <pubDate>2012-07-04T01:40:49+09:00</pubDate>
           </item>
       
           <item>
               <title>閏秒</title>
               <guid>https://www.sevenspirals.net/2012/07/03/leap_second/</guid>
               <link>https://www.sevenspirals.net/2012/07/03/leap_second/</link>
               <description><![CDATA[<img src=''><p>このサーバーはさくらのVPSで運用しているんですが、そのさくらインターネットから「VPSのCPU利用率が以上に跳ね上がってるので調べてちょ（意訳）」とメールが来ました。</p>
<!-- more -->
<p>7/1に閏秒の挿入をしたのでそのタイミングで跳ね上がってたら日付の再設定を試して欲しいとのこと。</p>
<p>sshでログインしてみるとどうもJenkinsのjavaプロセスが張り付いてる。特にジョブは走っていないのでジョブが走りまくって暴走してるわけではないらしい。</p>
<p>で、コントロールパネルのログを見てみるとまさに上記のタイミングで急激に跳ね上がってる。</p>
<p>というわけで閏秒が犯人らしいので下記のコマンドで日付の再設定。</p>
<pre><code># date `date +&#39;%m%d%H%M%C%y.%S&#39;`
</code></pre><p>再設定したところでCPU利用率はがくっと下がり無事問題解決。</p>
<p>いやー、当日は閏秒の存在をすっかり忘れてましたが影響あるもんですねー。</p>
]]></description>
               <pubDate>2012-07-03T16:58:58+09:00</pubDate>
           </item>
       
    </channel>
</rss>
